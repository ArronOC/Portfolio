
PetriDish_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc0  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08008df0  08008df0  00009df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009c30  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001e0  08009e10  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009e10  0000b4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005672  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001736  00000000  00000000  0001087b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000518  00000000  00000000  00011fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b6  00000000  00000000  000124d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000558f  00000000  00000000  00012886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007df2  00000000  00000000  00017e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ec80  00000000  00000000  0001fc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0002e887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  0002e8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00031054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001e0 	.word	0x200001e0
 800014c:	00000000 	.word	0x00000000
 8000150:	08008dd8 	.word	0x08008dd8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001e4 	.word	0x200001e4
 800016c:	08008dd8 	.word	0x08008dd8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	@ 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000db6:	2afd      	cmp	r2, #253	@ 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	@ 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	@ 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	@ 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <main>:
char msgTxBuff[150];
char uartRxBuff[20];
char command[20];

int main(void)
{
 800113c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001140:	b0a8      	sub	sp, #160	@ 0xa0
 8001142:	af04      	add	r7, sp, #16
	/* =================Initialise variables/Handles========================= */
	RCC_SysConfig_t		SystemClockConfiguration;
	RCC_Prescalers_t 	ClockPrescalers;
	I2C_ERROR_CODE 		I2C_Status = I2C_NO_ERROR;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	CAV25M01_Handle_t 	EEPROM;
	LM75B_Handle_t 		TempSensor;
	char ClkSrc[4];
	char rdSerialNumber[SerNumSizeBytes];
	char BlankSerial[SerNumSizeBytes];
	uint8_t PetriMode = ENABLE;			// Enables petri dish mode by default
 800114a:	2301      	movs	r3, #1
 800114c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	uint8_t AccelMsgs = DISABLE;		// suppress accelerometer readouts over UART by default
 8001150:	2300      	movs	r3, #0
 8001152:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	uint8_t Xoff = 0, Yoff = 0, Zoff = 0, AccelData[6];
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]
 800115e:	2300      	movs	r3, #0
 8001160:	737b      	strb	r3, [r7, #13]
	float tempC = 0.0f;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	memset(command, '\0', sizeof(command));
 800116a:	2214      	movs	r2, #20
 800116c:	2100      	movs	r1, #0
 800116e:	48b5      	ldr	r0, [pc, #724]	@ (8001444 <main+0x308>)
 8001170:	f005 fa2f 	bl	80065d2 <memset>

	htim1.pTIMx = TIM1;							// Set handle1 to use TIMER1
 8001174:	4bb4      	ldr	r3, [pc, #720]	@ (8001448 <main+0x30c>)
 8001176:	4ab5      	ldr	r2, [pc, #724]	@ (800144c <main+0x310>)
 8001178:	601a      	str	r2, [r3, #0]
	htim1.init.Period = PERIOD;					// Set PERIOD
 800117a:	4bb5      	ldr	r3, [pc, #724]	@ (8001450 <main+0x314>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4ab2      	ldr	r2, [pc, #712]	@ (8001448 <main+0x30c>)
 8001180:	6093      	str	r3, [r2, #8]
	htim1.init.EnableCH1 = ENABLE;				// SE LED
 8001182:	4bb1      	ldr	r3, [pc, #708]	@ (8001448 <main+0x30c>)
 8001184:	2201      	movs	r2, #1
 8001186:	711a      	strb	r2, [r3, #4]
	htim1.init.EnableCH2 = ENABLE;				// E LED
 8001188:	4baf      	ldr	r3, [pc, #700]	@ (8001448 <main+0x30c>)
 800118a:	2201      	movs	r2, #1
 800118c:	715a      	strb	r2, [r3, #5]
	htim1.init.EnableCH3 = ENABLE;				// NE LED
 800118e:	4bae      	ldr	r3, [pc, #696]	@ (8001448 <main+0x30c>)
 8001190:	2201      	movs	r2, #1
 8001192:	719a      	strb	r2, [r3, #6]
	htim1.init.EnableCH4 = DISABLE;				// Not used
 8001194:	4bac      	ldr	r3, [pc, #688]	@ (8001448 <main+0x30c>)
 8001196:	2200      	movs	r2, #0
 8001198:	71da      	strb	r2, [r3, #7]

	htim2.pTIMx = TIM2;							// Set handle2 to use TIMER2
 800119a:	4bae      	ldr	r3, [pc, #696]	@ (8001454 <main+0x318>)
 800119c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a0:	601a      	str	r2, [r3, #0]
	htim2.init.Period = PERIOD;					// Set PERIOD
 80011a2:	4bab      	ldr	r3, [pc, #684]	@ (8001450 <main+0x314>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4aab      	ldr	r2, [pc, #684]	@ (8001454 <main+0x318>)
 80011a8:	6093      	str	r3, [r2, #8]
	htim2.init.EnableCH1 = ENABLE;				// N LED
 80011aa:	4baa      	ldr	r3, [pc, #680]	@ (8001454 <main+0x318>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	711a      	strb	r2, [r3, #4]
	htim2.init.EnableCH2 = DISABLE;				// Not used
 80011b0:	4ba8      	ldr	r3, [pc, #672]	@ (8001454 <main+0x318>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	715a      	strb	r2, [r3, #5]
	htim2.init.EnableCH3 = ENABLE;				// SW LED
 80011b6:	4ba7      	ldr	r3, [pc, #668]	@ (8001454 <main+0x318>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	719a      	strb	r2, [r3, #6]
	htim2.init.EnableCH4 = ENABLE;				// S LED
 80011bc:	4ba5      	ldr	r3, [pc, #660]	@ (8001454 <main+0x318>)
 80011be:	2201      	movs	r2, #1
 80011c0:	71da      	strb	r2, [r3, #7]

	htim3.pTIMx = TIM3;							// Set handle3 to use TIMER3
 80011c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001458 <main+0x31c>)
 80011c4:	4aa5      	ldr	r2, [pc, #660]	@ (800145c <main+0x320>)
 80011c6:	601a      	str	r2, [r3, #0]
	htim3.init.Period = PERIOD;					// Set PERIOD
 80011c8:	4ba1      	ldr	r3, [pc, #644]	@ (8001450 <main+0x314>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4aa2      	ldr	r2, [pc, #648]	@ (8001458 <main+0x31c>)
 80011ce:	6093      	str	r3, [r2, #8]
	htim3.init.EnableCH1 = DISABLE;				// Not used
 80011d0:	4ba1      	ldr	r3, [pc, #644]	@ (8001458 <main+0x31c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	711a      	strb	r2, [r3, #4]
	htim3.init.EnableCH2 = DISABLE;				// Not used
 80011d6:	4ba0      	ldr	r3, [pc, #640]	@ (8001458 <main+0x31c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	715a      	strb	r2, [r3, #5]
	htim3.init.EnableCH3 = DISABLE;				// Not used
 80011dc:	4b9e      	ldr	r3, [pc, #632]	@ (8001458 <main+0x31c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	719a      	strb	r2, [r3, #6]
	htim3.init.EnableCH4 = ENABLE;				// W LED
 80011e2:	4b9d      	ldr	r3, [pc, #628]	@ (8001458 <main+0x31c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	71da      	strb	r2, [r3, #7]

	htim4.pTIMx = TIM4;							// Set handle4 to use TIMER4
 80011e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001460 <main+0x324>)
 80011ea:	4a9e      	ldr	r2, [pc, #632]	@ (8001464 <main+0x328>)
 80011ec:	601a      	str	r2, [r3, #0]
	htim4.init.Period = PERIOD;				 	// Set PERIOD
 80011ee:	4b98      	ldr	r3, [pc, #608]	@ (8001450 <main+0x314>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a9b      	ldr	r2, [pc, #620]	@ (8001460 <main+0x324>)
 80011f4:	6093      	str	r3, [r2, #8]
	htim4.init.EnableCH1 = ENABLE;				// NW LED
 80011f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001460 <main+0x324>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	711a      	strb	r2, [r3, #4]
	htim4.init.EnableCH2 = DISABLE;				// Not used
 80011fc:	4b98      	ldr	r3, [pc, #608]	@ (8001460 <main+0x324>)
 80011fe:	2200      	movs	r2, #0
 8001200:	715a      	strb	r2, [r3, #5]
	htim4.init.EnableCH3 = DISABLE;				// Not used
 8001202:	4b97      	ldr	r3, [pc, #604]	@ (8001460 <main+0x324>)
 8001204:	2200      	movs	r2, #0
 8001206:	719a      	strb	r2, [r3, #6]
	htim4.init.EnableCH4 = DISABLE;				// Not used
 8001208:	4b95      	ldr	r3, [pc, #596]	@ (8001460 <main+0x324>)
 800120a:	2200      	movs	r2, #0
 800120c:	71da      	strb	r2, [r3, #7]

	hspi1.pSPI = SPI1;
 800120e:	4b96      	ldr	r3, [pc, #600]	@ (8001468 <main+0x32c>)
 8001210:	677b      	str	r3, [r7, #116]	@ 0x74
	hspi1.SPIConfig.SPI_BusConfig.DataWidth = SPI_DATAFORMAT8BITS;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
	hspi1.SPIConfig.SPI_BusConfig.LSBFirst = SPI_TX_MSBFIRST;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
	hspi1.SPIConfig.SPI_ClockPhase = SPI_CPHA_FIRST;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	hspi1.SPIConfig.SPI_ClockPolarity = SPI_CPOL_IDLELOW;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
	hspi1.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	hspi1.SPIConfig.SPI_SSM = SPI_SSM_EN;
 8001230:	2301      	movs	r3, #1
 8001232:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
	// SPI Clock speed is configured later depending on which clock source is used for sysclk

	hi2c1.pI2Cx = I2C1;
 8001236:	4b8d      	ldr	r3, [pc, #564]	@ (800146c <main+0x330>)
 8001238:	4a8d      	ldr	r2, [pc, #564]	@ (8001470 <main+0x334>)
 800123a:	601a      	str	r2, [r3, #0]
	hi2c1.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_FM4K;		// Fast mode 400kHz
 800123c:	4b8b      	ldr	r3, [pc, #556]	@ (800146c <main+0x330>)
 800123e:	4a8d      	ldr	r2, [pc, #564]	@ (8001474 <main+0x338>)
 8001240:	605a      	str	r2, [r3, #4]
	hi2c1.I2C_Config.I2C_DutyCycle = I2C_FM_DUTY_2;
 8001242:	4b8a      	ldr	r3, [pc, #552]	@ (800146c <main+0x330>)
 8001244:	2200      	movs	r2, #0
 8001246:	721a      	strb	r2, [r3, #8]
	hi2c1.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLED;
 8001248:	4b88      	ldr	r3, [pc, #544]	@ (800146c <main+0x330>)
 800124a:	2201      	movs	r2, #1
 800124c:	725a      	strb	r2, [r3, #9]
	hi2c1.I2C_Config.I2C_AddrMode = I2C_7BIT_SLAVE;
 800124e:	4b87      	ldr	r3, [pc, #540]	@ (800146c <main+0x330>)
 8001250:	2200      	movs	r2, #0
 8001252:	729a      	strb	r2, [r3, #10]
	hi2c1.I2C_Config.I2C_DualAddrEn = I2C_DUAL_ADDRESS_DI;
 8001254:	4b85      	ldr	r3, [pc, #532]	@ (800146c <main+0x330>)
 8001256:	2200      	movs	r2, #0
 8001258:	72da      	strb	r2, [r3, #11]
	hi2c1.I2C_Config.I2C_OwnAddr1 = 0;						// Unit is I2C master, no address
 800125a:	4b84      	ldr	r3, [pc, #528]	@ (800146c <main+0x330>)
 800125c:	2200      	movs	r2, #0
 800125e:	819a      	strh	r2, [r3, #12]

	husart2.pUSARTx = USART2;
 8001260:	4b85      	ldr	r3, [pc, #532]	@ (8001478 <main+0x33c>)
 8001262:	4a86      	ldr	r2, [pc, #536]	@ (800147c <main+0x340>)
 8001264:	601a      	str	r2, [r3, #0]
	husart2.USART_Config.BaudRate = USART_BaudRate_BPS_115200;
 8001266:	4b84      	ldr	r3, [pc, #528]	@ (8001478 <main+0x33c>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800126c:	609a      	str	r2, [r3, #8]
	husart2.USART_Config.HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800126e:	4b82      	ldr	r3, [pc, #520]	@ (8001478 <main+0x33c>)
 8001270:	2200      	movs	r2, #0
 8001272:	74da      	strb	r2, [r3, #19]
	husart2.USART_Config.Mode = USART_MODE_TXRX;
 8001274:	4b80      	ldr	r3, [pc, #512]	@ (8001478 <main+0x33c>)
 8001276:	2202      	movs	r2, #2
 8001278:	711a      	strb	r2, [r3, #4]
	husart2.USART_Config.NumStopBits = USART_STOPBITS_1;
 800127a:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <main+0x33c>)
 800127c:	2200      	movs	r2, #0
 800127e:	741a      	strb	r2, [r3, #16]
	husart2.USART_Config.ParityControl = USART_PARITY_NONE;
 8001280:	4b7d      	ldr	r3, [pc, #500]	@ (8001478 <main+0x33c>)
 8001282:	2200      	movs	r2, #0
 8001284:	749a      	strb	r2, [r3, #18]
	husart2.USART_Config.WordLength = USART_WORDLEN_8BITS;
 8001286:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <main+0x33c>)
 8001288:	2200      	movs	r2, #0
 800128a:	745a      	strb	r2, [r3, #17]
	husart2.TxBusyState = USART_READY;
 800128c:	4b7a      	ldr	r3, [pc, #488]	@ (8001478 <main+0x33c>)
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	husart2.RxBusyState = USART_READY;
 8001294:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <main+0x33c>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	EEPROM.pSPIhandle = &hspi1;
 800129c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a0:	673b      	str	r3, [r7, #112]	@ 0x70
	EEPROM.pnCS0 = &nCS0;
 80012a2:	4b77      	ldr	r3, [pc, #476]	@ (8001480 <main+0x344>)
 80012a4:	667b      	str	r3, [r7, #100]	@ 0x64
	EEPROM.pnHOLD = &nHOLD;
 80012a6:	4b77      	ldr	r3, [pc, #476]	@ (8001484 <main+0x348>)
 80012a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	EEPROM.pnWP = &nWP;
 80012aa:	4b77      	ldr	r3, [pc, #476]	@ (8001488 <main+0x34c>)
 80012ac:	66bb      	str	r3, [r7, #104]	@ 0x68

	TempSensor.i2cHandle = &hi2c1;
 80012ae:	4b6f      	ldr	r3, [pc, #444]	@ (800146c <main+0x330>)
 80012b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	TempSensor.Addr = LM75B_Addr_000;
 80012b2:	2348      	movs	r3, #72	@ 0x48
 80012b4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60

	Accelerometer.i2cHandle = &hi2c1;
 80012b8:	4b74      	ldr	r3, [pc, #464]	@ (800148c <main+0x350>)
 80012ba:	4a6c      	ldr	r2, [pc, #432]	@ (800146c <main+0x330>)
 80012bc:	601a      	str	r2, [r3, #0]
	Accelerometer.SlaveAddr = ADXL343_Addr_High;
 80012be:	4b73      	ldr	r3, [pc, #460]	@ (800148c <main+0x350>)
 80012c0:	221d      	movs	r2, #29
 80012c2:	711a      	strb	r2, [r3, #4]
	Accelerometer.NewData = nREADY;
 80012c4:	4b71      	ldr	r3, [pc, #452]	@ (800148c <main+0x350>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	77da      	strb	r2, [r3, #31]
		husart2.USART_Config.APBClock = APB1Clk;
		strcpy(ClkSrc, "HSE");
	}
	if (1)	// Use 48MHz PLL as system clock
	{
		SystemClockConfiguration.SysClkSrc = RCC_SW_PLL;					// Set PLL to be the system clock source
 80012ca:	2302      	movs	r3, #2
 80012cc:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
		SystemClockConfiguration.PllConfig.PLLsrc = RCC_PLL_SRC_HSE;		// Set HSE to the be clock source for PLL (16MHz)
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
		SystemClockConfiguration.PllConfig.PLLHSEDiv = RCC_PLL_HSE_DIV_2;	// Set HSE divider to /2 (16/2=8MHz)
 80012d6:	2301      	movs	r3, #1
 80012d8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		SystemClockConfiguration.PllConfig.PLLMul= RCC_PLL_MUL_6;			// Set PLL multiplier to x6 (8*6 = 48MHz)
 80012dc:	2304      	movs	r3, #4
 80012de:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		ClockPrescalers.APB1prescaler = RCC_PPRE1_2;						// Set APB1 prescaler /2 (24MHz)
 80012e2:	2304      	movs	r3, #4
 80012e4:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
		ClockPrescalers.ADCprescaler = RCC_ADCPRE1_4;						// Set ADC prescaler to /4
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		ClockPrescalers.AHBprescaler = RCC_HPRE_1;							// Set AHB prescaler to /1
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
		ClockPrescalers.APB2prescaler = RCC_PPRE2_1;						// Set APB2 prescaler to /1 (48MHz)
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		SysClk = 48000000;
 80012fa:	4b65      	ldr	r3, [pc, #404]	@ (8001490 <main+0x354>)
 80012fc:	4a65      	ldr	r2, [pc, #404]	@ (8001494 <main+0x358>)
 80012fe:	601a      	str	r2, [r3, #0]
		APB1Clk = 24000000;
 8001300:	4b65      	ldr	r3, [pc, #404]	@ (8001498 <main+0x35c>)
 8001302:	4a66      	ldr	r2, [pc, #408]	@ (800149c <main+0x360>)
 8001304:	601a      	str	r2, [r3, #0]
		APB2Clk = SysClk;
 8001306:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <main+0x354>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a65      	ldr	r2, [pc, #404]	@ (80014a0 <main+0x364>)
 800130c:	6013      	str	r3, [r2, #0]
		ADCClk = APB2Clk / 4;
 800130e:	4b64      	ldr	r3, [pc, #400]	@ (80014a0 <main+0x364>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	4a63      	ldr	r2, [pc, #396]	@ (80014a4 <main+0x368>)
 8001316:	6013      	str	r3, [r2, #0]
		hspi1.SPIConfig.SPI_SclkSpeed = SPI_SCLK_DIV8;	// 6MHz operation when sysclk = 48MHz
 8001318:	2302      	movs	r3, #2
 800131a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
		husart2.USART_Config.APBClock = APB1Clk;
 800131e:	4b5e      	ldr	r3, [pc, #376]	@ (8001498 <main+0x35c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a55      	ldr	r2, [pc, #340]	@ (8001478 <main+0x33c>)
 8001324:	60d3      	str	r3, [r2, #12]
		strcpy(ClkSrc, "PLL");
 8001326:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <main+0x36c>)
 8001328:	65bb      	str	r3, [r7, #88]	@ 0x58
	}
	RCC_Init_SysClk(&SystemClockConfiguration);	// Configure system clock
 800132a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fb3c 	bl	80049ac <RCC_Init_SysClk>
	RCC_Init_AHBClk(&ClockPrescalers);			// Configure AHB clock
 8001334:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fbc5 	bl	8004ac8 <RCC_Init_AHBClk>
	RCC_Init_PCLK1(&ClockPrescalers);			// Configure PCLK1/APB1
 800133e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fbda 	bl	8004afc <RCC_Init_PCLK1>
	RCC_Init_PCLK2(&ClockPrescalers);			// Configure PCLK2/APB2
 8001348:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fbef 	bl	8004b30 <RCC_Init_PCLK2>
	RCC_Init_ADCCLK(&ClockPrescalers);			// Configure ADCCLK (not actually used in this application)
 8001352:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fc04 	bl	8004b64 <RCC_Init_ADCCLK>
	SYST_Config(SysClk);													// setup SysTick to provide exceptions on 1ms intervals
 800135c:	4b4c      	ldr	r3, [pc, #304]	@ (8001490 <main+0x354>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fa6b 	bl	800383c <SYST_Config>
	/* ================================================================ */

	/* =====================GPIO Configuration========================= */
	GPIO_PeriClockControl(GPIOA, ENABLE);		// Enables GPIOA clock
 8001366:	2101      	movs	r1, #1
 8001368:	4850      	ldr	r0, [pc, #320]	@ (80014ac <main+0x370>)
 800136a:	f002 fbaf 	bl	8003acc <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOB, ENABLE);		// Enables GPIOB clock
 800136e:	2101      	movs	r1, #1
 8001370:	484f      	ldr	r0, [pc, #316]	@ (80014b0 <main+0x374>)
 8001372:	f002 fbab 	bl	8003acc <GPIO_PeriClockControl>
	AFIO_PeriEn(ENABLE);						// Enables AFIO clock
 8001376:	2001      	movs	r0, #1
 8001378:	f002 fb72 	bl	8003a60 <AFIO_PeriEn>
	AFIO_REMAP();								// Re-maps certain pins to their alternate functions
 800137c:	f002 fb8c 	bl	8003a98 <AFIO_REMAP>
	GPIO_INIT_ALL();							// Configures all GPIO pins to their required GPIO/AFIO configuration
 8001380:	f000 fc46 	bl	8001c10 <GPIO_INIT_ALL>
	/* =====================USART Configuration========================= */
	/*
	 * Configure USART2 peripheral
	 * Console message to indicate device is booting
	 */
	USART_Init(&husart2);									// Configure USART2
 8001384:	483c      	ldr	r0, [pc, #240]	@ (8001478 <main+0x33c>)
 8001386:	f003 ffe2 	bl	800534e <USART_Init>
	NVIC_IRQITConfig(USART2_IRQn, ENABLE);					// Enables USART2 interrupts
 800138a:	2101      	movs	r1, #1
 800138c:	2026      	movs	r0, #38	@ 0x26
 800138e:	f002 faef 	bl	8003970 <NVIC_IRQITConfig>
	UserMessages(&husart2, " Device Booting...", ENABLE);	// Console messages over SWV (debugger connected) and/or UART interface
 8001392:	2201      	movs	r2, #1
 8001394:	4947      	ldr	r1, [pc, #284]	@ (80014b4 <main+0x378>)
 8001396:	4838      	ldr	r0, [pc, #224]	@ (8001478 <main+0x33c>)
 8001398:	f001 f888 	bl	80024ac <UserMessages>
	/* ================System Clock Console Messages==================== */
	/*
	 * Console messages stating clock speeds of various busses
	 * Note that this can't happen until UART is active hence why it is later in application
	 */
	sprintf(msgTxBuff, "\r\nClock Configuration:\r\n"
 800139c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013a0:	461a      	mov	r2, r3
 80013a2:	4945      	ldr	r1, [pc, #276]	@ (80014b8 <main+0x37c>)
 80013a4:	4845      	ldr	r0, [pc, #276]	@ (80014bc <main+0x380>)
 80013a6:	f005 f8b1 	bl	800650c <siprintf>
			"System Clock Source\t%s", ClkSrc);
	UserMessages(&husart2, msgTxBuff, ENABLE);
 80013aa:	2201      	movs	r2, #1
 80013ac:	4943      	ldr	r1, [pc, #268]	@ (80014bc <main+0x380>)
 80013ae:	4832      	ldr	r0, [pc, #200]	@ (8001478 <main+0x33c>)
 80013b0:	f001 f87c 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "System Clock Frequency\t%luMHz", (SysClk/1000000));
 80013b4:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <main+0x354>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a41      	ldr	r2, [pc, #260]	@ (80014c0 <main+0x384>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0c9b      	lsrs	r3, r3, #18
 80013c0:	461a      	mov	r2, r3
 80013c2:	4940      	ldr	r1, [pc, #256]	@ (80014c4 <main+0x388>)
 80013c4:	483d      	ldr	r0, [pc, #244]	@ (80014bc <main+0x380>)
 80013c6:	f005 f8a1 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 80013ca:	2201      	movs	r2, #1
 80013cc:	493b      	ldr	r1, [pc, #236]	@ (80014bc <main+0x380>)
 80013ce:	482a      	ldr	r0, [pc, #168]	@ (8001478 <main+0x33c>)
 80013d0:	f001 f86c 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "AHB Clock Frequency\t%luMHz",(SysClk/1000000));
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <main+0x354>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a39      	ldr	r2, [pc, #228]	@ (80014c0 <main+0x384>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	0c9b      	lsrs	r3, r3, #18
 80013e0:	461a      	mov	r2, r3
 80013e2:	4939      	ldr	r1, [pc, #228]	@ (80014c8 <main+0x38c>)
 80013e4:	4835      	ldr	r0, [pc, #212]	@ (80014bc <main+0x380>)
 80013e6:	f005 f891 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 80013ea:	2201      	movs	r2, #1
 80013ec:	4933      	ldr	r1, [pc, #204]	@ (80014bc <main+0x380>)
 80013ee:	4822      	ldr	r0, [pc, #136]	@ (8001478 <main+0x33c>)
 80013f0:	f001 f85c 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "APB1 Clock Frequency\t%luMHz", (APB1Clk/1000000));
 80013f4:	4b28      	ldr	r3, [pc, #160]	@ (8001498 <main+0x35c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a31      	ldr	r2, [pc, #196]	@ (80014c0 <main+0x384>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0c9b      	lsrs	r3, r3, #18
 8001400:	461a      	mov	r2, r3
 8001402:	4932      	ldr	r1, [pc, #200]	@ (80014cc <main+0x390>)
 8001404:	482d      	ldr	r0, [pc, #180]	@ (80014bc <main+0x380>)
 8001406:	f005 f881 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 800140a:	2201      	movs	r2, #1
 800140c:	492b      	ldr	r1, [pc, #172]	@ (80014bc <main+0x380>)
 800140e:	481a      	ldr	r0, [pc, #104]	@ (8001478 <main+0x33c>)
 8001410:	f001 f84c 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "APB2 Clock Frequency\t%luMHz",(APB2Clk/1000000));
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <main+0x364>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <main+0x384>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	461a      	mov	r2, r3
 8001422:	492b      	ldr	r1, [pc, #172]	@ (80014d0 <main+0x394>)
 8001424:	4825      	ldr	r0, [pc, #148]	@ (80014bc <main+0x380>)
 8001426:	f005 f871 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 800142a:	2201      	movs	r2, #1
 800142c:	4923      	ldr	r1, [pc, #140]	@ (80014bc <main+0x380>)
 800142e:	4812      	ldr	r0, [pc, #72]	@ (8001478 <main+0x33c>)
 8001430:	f001 f83c 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "ADC Clock Frequency\t%luMHz",(ADCClk/1000000));
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <main+0x368>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <main+0x384>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	461a      	mov	r2, r3
 8001442:	e047      	b.n	80014d4 <main+0x398>
 8001444:	20000384 	.word	0x20000384
 8001448:	20000244 	.word	0x20000244
 800144c:	40012c00 	.word	0x40012c00
 8001450:	20000000 	.word	0x20000000
 8001454:	20000250 	.word	0x20000250
 8001458:	2000025c 	.word	0x2000025c
 800145c:	40000400 	.word	0x40000400
 8001460:	20000268 	.word	0x20000268
 8001464:	40000800 	.word	0x40000800
 8001468:	40013000 	.word	0x40013000
 800146c:	20000274 	.word	0x20000274
 8001470:	40005400 	.word	0x40005400
 8001474:	00061a80 	.word	0x00061a80
 8001478:	200002a0 	.word	0x200002a0
 800147c:	40004400 	.word	0x40004400
 8001480:	20000204 	.word	0x20000204
 8001484:	2000020c 	.word	0x2000020c
 8001488:	20000214 	.word	0x20000214
 800148c:	20000224 	.word	0x20000224
 8001490:	200002c8 	.word	0x200002c8
 8001494:	02dc6c00 	.word	0x02dc6c00
 8001498:	200002cc 	.word	0x200002cc
 800149c:	016e3600 	.word	0x016e3600
 80014a0:	200002d0 	.word	0x200002d0
 80014a4:	200002d4 	.word	0x200002d4
 80014a8:	004c4c50 	.word	0x004c4c50
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	08008df0 	.word	0x08008df0
 80014b8:	08008e04 	.word	0x08008e04
 80014bc:	200002d8 	.word	0x200002d8
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	08008e34 	.word	0x08008e34
 80014c8:	08008e54 	.word	0x08008e54
 80014cc:	08008e70 	.word	0x08008e70
 80014d0:	08008e8c 	.word	0x08008e8c
 80014d4:	4987      	ldr	r1, [pc, #540]	@ (80016f4 <main+0x5b8>)
 80014d6:	4888      	ldr	r0, [pc, #544]	@ (80016f8 <main+0x5bc>)
 80014d8:	f005 f818 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 80014dc:	2201      	movs	r2, #1
 80014de:	4986      	ldr	r1, [pc, #536]	@ (80016f8 <main+0x5bc>)
 80014e0:	4886      	ldr	r0, [pc, #536]	@ (80016fc <main+0x5c0>)
 80014e2:	f000 ffe3 	bl	80024ac <UserMessages>
	/* ===================GPIO/AFIO Console Messages==================== */
	/*
	 * Console messages stating GPIO/AFIO configuration
	 * Note that this can't happen until UART is active hence why it is later in application
	 */
	sprintf(msgTxBuff, "\r\nGPIO Configuration:\r\n"
 80014e6:	4986      	ldr	r1, [pc, #536]	@ (8001700 <main+0x5c4>)
 80014e8:	4883      	ldr	r0, [pc, #524]	@ (80016f8 <main+0x5bc>)
 80014ea:	f005 f80f 	bl	800650c <siprintf>
			"GPIOA Enabled");
	UserMessages(&husart2, msgTxBuff, ENABLE);
 80014ee:	2201      	movs	r2, #1
 80014f0:	4981      	ldr	r1, [pc, #516]	@ (80016f8 <main+0x5bc>)
 80014f2:	4882      	ldr	r0, [pc, #520]	@ (80016fc <main+0x5c0>)
 80014f4:	f000 ffda 	bl	80024ac <UserMessages>

	UserMessages(&husart2, "GPIOB Enabled", ENABLE);
 80014f8:	2201      	movs	r2, #1
 80014fa:	4982      	ldr	r1, [pc, #520]	@ (8001704 <main+0x5c8>)
 80014fc:	487f      	ldr	r0, [pc, #508]	@ (80016fc <main+0x5c0>)
 80014fe:	f000 ffd5 	bl	80024ac <UserMessages>

	UserMessages(&husart2, "AFIO Enabled", ENABLE);
 8001502:	2201      	movs	r2, #1
 8001504:	4980      	ldr	r1, [pc, #512]	@ (8001708 <main+0x5cc>)
 8001506:	487d      	ldr	r0, [pc, #500]	@ (80016fc <main+0x5c0>)
 8001508:	f000 ffd0 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff,	"Pin Re-mapping\r\n"
 800150c:	497f      	ldr	r1, [pc, #508]	@ (800170c <main+0x5d0>)
 800150e:	487a      	ldr	r0, [pc, #488]	@ (80016f8 <main+0x5bc>)
 8001510:	f004 fffc 	bl	800650c <siprintf>
			"PA15 Released from JTDI\r\n"
			"PB4 Released from nJTRST\r\n"
			"TIM2 Pins fully re-mapped\r\n"
			"I2C1 Re-mapped to PB8/PB9");
	UserMessages(&husart2, msgTxBuff, ENABLE);
 8001514:	2201      	movs	r2, #1
 8001516:	4978      	ldr	r1, [pc, #480]	@ (80016f8 <main+0x5bc>)
 8001518:	4878      	ldr	r0, [pc, #480]	@ (80016fc <main+0x5c0>)
 800151a:	f000 ffc7 	bl	80024ac <UserMessages>

	sprintf(msgTxBuff, "GPIO Pins initialised\r\n\r\n"
 800151e:	497c      	ldr	r1, [pc, #496]	@ (8001710 <main+0x5d4>)
 8001520:	4875      	ldr	r0, [pc, #468]	@ (80016f8 <main+0x5bc>)
 8001522:	f004 fff3 	bl	800650c <siprintf>
			"Initialising Peripherals...");
	UserMessages(&husart2, msgTxBuff, ENABLE);
 8001526:	2201      	movs	r2, #1
 8001528:	4973      	ldr	r1, [pc, #460]	@ (80016f8 <main+0x5bc>)
 800152a:	4874      	ldr	r0, [pc, #464]	@ (80016fc <main+0x5c0>)
 800152c:	f000 ffbe 	bl	80024ac <UserMessages>
	/* =====================TIMER Configuration========================= */
	/*
	 * Configure TIMER1 -> 4 peripherals
	 * Console messages to give status updates
	 */
	TIM_init(&htim1);
 8001530:	4878      	ldr	r0, [pc, #480]	@ (8001714 <main+0x5d8>)
 8001532:	f003 fd2d 	bl	8004f90 <TIM_init>
	UserMessages(&husart2, "TIMER1 Initialised", ENABLE);
 8001536:	2201      	movs	r2, #1
 8001538:	4977      	ldr	r1, [pc, #476]	@ (8001718 <main+0x5dc>)
 800153a:	4870      	ldr	r0, [pc, #448]	@ (80016fc <main+0x5c0>)
 800153c:	f000 ffb6 	bl	80024ac <UserMessages>

	TIM_init(&htim2);
 8001540:	4876      	ldr	r0, [pc, #472]	@ (800171c <main+0x5e0>)
 8001542:	f003 fd25 	bl	8004f90 <TIM_init>
	UserMessages(&husart2, "TIMER2 Initialised", ENABLE);
 8001546:	2201      	movs	r2, #1
 8001548:	4975      	ldr	r1, [pc, #468]	@ (8001720 <main+0x5e4>)
 800154a:	486c      	ldr	r0, [pc, #432]	@ (80016fc <main+0x5c0>)
 800154c:	f000 ffae 	bl	80024ac <UserMessages>

	TIM_init(&htim3);
 8001550:	4874      	ldr	r0, [pc, #464]	@ (8001724 <main+0x5e8>)
 8001552:	f003 fd1d 	bl	8004f90 <TIM_init>
	UserMessages(&husart2, "TIMER3 Initialised", ENABLE);
 8001556:	2201      	movs	r2, #1
 8001558:	4973      	ldr	r1, [pc, #460]	@ (8001728 <main+0x5ec>)
 800155a:	4868      	ldr	r0, [pc, #416]	@ (80016fc <main+0x5c0>)
 800155c:	f000 ffa6 	bl	80024ac <UserMessages>

	TIM_init(&htim4);
 8001560:	4872      	ldr	r0, [pc, #456]	@ (800172c <main+0x5f0>)
 8001562:	f003 fd15 	bl	8004f90 <TIM_init>
	UserMessages(&husart2, "TIMER4 Initialised", ENABLE);
 8001566:	2201      	movs	r2, #1
 8001568:	4971      	ldr	r1, [pc, #452]	@ (8001730 <main+0x5f4>)
 800156a:	4864      	ldr	r0, [pc, #400]	@ (80016fc <main+0x5c0>)
 800156c:	f000 ff9e 	bl	80024ac <UserMessages>
	/* ======================SPI Configuration========================== */
	/*
	 * Configure SPI1 peripheral
	 * Console messages to give status updates
	 */
	SPI_Init(&hspi1);
 8001570:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fb4f 	bl	8004c18 <SPI_Init>
	UserMessages(&husart2, "SPI1 Initialised", ENABLE);
 800157a:	2201      	movs	r2, #1
 800157c:	496d      	ldr	r1, [pc, #436]	@ (8001734 <main+0x5f8>)
 800157e:	485f      	ldr	r0, [pc, #380]	@ (80016fc <main+0x5c0>)
 8001580:	f000 ff94 	bl	80024ac <UserMessages>
	/*
	 * Configure I2C1 peripheral
	 * Enables the I2C1 error interrupt in the NVIC
	 * Console messages to give status updates
	 */
	I2C_Init(&hi2c1);
 8001584:	486c      	ldr	r0, [pc, #432]	@ (8001738 <main+0x5fc>)
 8001586:	f002 fd85 	bl	8004094 <I2C_Init>
	NVIC_IRQITConfig(I2C1_ER_IRQn, ENABLE);
 800158a:	2101      	movs	r1, #1
 800158c:	2020      	movs	r0, #32
 800158e:	f002 f9ef 	bl	8003970 <NVIC_IRQITConfig>
	UserMessages(&husart2, "I2C1 Initialised", ENABLE);
 8001592:	2201      	movs	r2, #1
 8001594:	4969      	ldr	r1, [pc, #420]	@ (800173c <main+0x600>)
 8001596:	4859      	ldr	r0, [pc, #356]	@ (80016fc <main+0x5c0>)
 8001598:	f000 ff88 	bl	80024ac <UserMessages>
	/* ===================== Initialise IC handles ===================== */
	/*
	 * Configures U4, U5 & U6 providing updates over the console
	 * application will hang here if configuration fails
	 */
	UserMessages(&husart2, "\r\nInitialising Devices...", ENABLE);
 800159c:	2201      	movs	r2, #1
 800159e:	4968      	ldr	r1, [pc, #416]	@ (8001740 <main+0x604>)
 80015a0:	4856      	ldr	r0, [pc, #344]	@ (80016fc <main+0x5c0>)
 80015a2:	f000 ff83 	bl	80024ac <UserMessages>

	// U6 SPI EEPROM (CAV25M01VE-GT3)
	if (CAV25M01_Init(&EEPROM))
 80015a6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 fcb6 	bl	8002f1c <CAV25M01_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d011      	beq.n	80015da <main+0x49e>
	{
		// Configuration PASSED
		UserMessages(&husart2, "Communication to SPI EPPROM U6 PASSED", ENABLE);
 80015b6:	2201      	movs	r2, #1
 80015b8:	4962      	ldr	r1, [pc, #392]	@ (8001744 <main+0x608>)
 80015ba:	4850      	ldr	r0, [pc, #320]	@ (80016fc <main+0x5c0>)
 80015bc:	f000 ff76 	bl	80024ac <UserMessages>
		UserMessages(&husart2, "Communication to SPI EPPROM U6 FAILED", ENABLE);
		while(1); //Hang here due to failure
	}

	// U4 I2C Temperature Sensor (LM75BD,118)
	I2C_Status = LM75B_POR(&TempSensor);
 80015c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 f860 	bl	800368a <LM75B_POR>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	if ( I2C_Status == I2C_NO_ERROR)
 80015d0:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <main+0x4b8>
 80015d8:	e006      	b.n	80015e8 <main+0x4ac>
		UserMessages(&husart2, "Communication to SPI EPPROM U6 FAILED", ENABLE);
 80015da:	2201      	movs	r2, #1
 80015dc:	495a      	ldr	r1, [pc, #360]	@ (8001748 <main+0x60c>)
 80015de:	4847      	ldr	r0, [pc, #284]	@ (80016fc <main+0x5c0>)
 80015e0:	f000 ff64 	bl	80024ac <UserMessages>
		while(1); //Hang here due to failure
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <main+0x4a8>
	{
		// Configuration PASSED
		UserMessages(&husart2, "Temperature Sensor U4 Configured", ENABLE);
 80015e8:	2201      	movs	r2, #1
 80015ea:	4958      	ldr	r1, [pc, #352]	@ (800174c <main+0x610>)
 80015ec:	4843      	ldr	r0, [pc, #268]	@ (80016fc <main+0x5c0>)
 80015ee:	f000 ff5d 	bl	80024ac <UserMessages>
 80015f2:	e00b      	b.n	800160c <main+0x4d0>
	} else
	{
		// Configuration FAILED
		UserMessages(&husart2, "Temperature Sensor U4 FAILED To Configure", ENABLE);
 80015f4:	2201      	movs	r2, #1
 80015f6:	4956      	ldr	r1, [pc, #344]	@ (8001750 <main+0x614>)
 80015f8:	4840      	ldr	r0, [pc, #256]	@ (80016fc <main+0x5c0>)
 80015fa:	f000 ff57 	bl	80024ac <UserMessages>
		I2C_ApplicationEventCallback(TempSensor.i2cHandle, I2C_Status);
 80015fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001600:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fdde 	bl	80021c8 <I2C_ApplicationEventCallback>
	}

	// U5 I2C Accelerometer (ADXL343BCCZ-RL7)
	I2C_Status = ADXL343_Init(&Accelerometer);
 800160c:	4851      	ldr	r0, [pc, #324]	@ (8001754 <main+0x618>)
 800160e:	f001 f918 	bl	8002842 <ADXL343_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
	if ( I2C_Status == I2C_NO_ERROR )
 8001618:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800161c:	2b00      	cmp	r3, #0
 800161e:	d12a      	bne.n	8001676 <main+0x53a>
	{
		// Configuration PASSED
		UserMessages(&husart2, "Accelerometer U5 Configured", ENABLE);
 8001620:	2201      	movs	r2, #1
 8001622:	494d      	ldr	r1, [pc, #308]	@ (8001758 <main+0x61c>)
 8001624:	4835      	ldr	r0, [pc, #212]	@ (80016fc <main+0x5c0>)
 8001626:	f000 ff41 	bl	80024ac <UserMessages>

		// Setup the NVIC to accept the Data Ready interrupt from the accelerometer
		NVIC_IRQPriorityConfig(EXTI4_IRQn, 15); 				// Set EXTI4 interrupt priority
 800162a:	210f      	movs	r1, #15
 800162c:	200a      	movs	r0, #10
 800162e:	f002 f9ed 	bl	8003a0c <NVIC_IRQPriorityConfig>
		NVIC_IRQITConfig(EXTI4_IRQn, ENABLE);					// Enable the ACC_INT1 interrupt
 8001632:	2101      	movs	r1, #1
 8001634:	200a      	movs	r0, #10
 8001636:	f002 f99b 	bl	8003970 <NVIC_IRQITConfig>
		I2C_Status = ADXL343_EnDataReadyInt(&Accelerometer); 	// Enable INT1 on ADXL343
 800163a:	4846      	ldr	r0, [pc, #280]	@ (8001754 <main+0x618>)
 800163c:	f001 f985 	bl	800294a <ADXL343_EnDataReadyInt>
 8001640:	4603      	mov	r3, r0
 8001642:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
		if ( I2C_Status == I2C_NO_ERROR )
 8001646:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <main+0x51e>
		{
			// Interrupt configuration PASSED
			UserMessages(&husart2, "U5 DATA_READY (ACC_INT1) I2C Interrupt Enabled", ENABLE);
 800164e:	2201      	movs	r2, #1
 8001650:	4942      	ldr	r1, [pc, #264]	@ (800175c <main+0x620>)
 8001652:	482a      	ldr	r0, [pc, #168]	@ (80016fc <main+0x5c0>)
 8001654:	f000 ff2a 	bl	80024ac <UserMessages>
 8001658:	e01a      	b.n	8001690 <main+0x554>
		} else
		{
			// Interrupt configuration FAILED
			UserMessages(&husart2, "Failed to enable U5 DATA_READY (ACC_INT1) I2C interrupt", ENABLE);
 800165a:	2201      	movs	r2, #1
 800165c:	4940      	ldr	r1, [pc, #256]	@ (8001760 <main+0x624>)
 800165e:	4827      	ldr	r0, [pc, #156]	@ (80016fc <main+0x5c0>)
 8001660:	f000 ff24 	bl	80024ac <UserMessages>
			I2C_ApplicationEventCallback(Accelerometer.i2cHandle, I2C_Status);
 8001664:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <main+0x618>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fdaa 	bl	80021c8 <I2C_ApplicationEventCallback>
 8001674:	e00c      	b.n	8001690 <main+0x554>
		}
	} else
	{
		// Configuration FAILED
		UserMessages(&husart2, "Accelerometer U5 FAILED to Configure", ENABLE);
 8001676:	2201      	movs	r2, #1
 8001678:	493a      	ldr	r1, [pc, #232]	@ (8001764 <main+0x628>)
 800167a:	4820      	ldr	r0, [pc, #128]	@ (80016fc <main+0x5c0>)
 800167c:	f000 ff16 	bl	80024ac <UserMessages>
		I2C_ApplicationEventCallback(Accelerometer.i2cHandle, I2C_Status);
 8001680:	4b34      	ldr	r3, [pc, #208]	@ (8001754 <main+0x618>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fd9c 	bl	80021c8 <I2C_ApplicationEventCallback>
	/* ========================== Application ========================== */
	/*
	 * Check if device has been initialised
	 * i.e. serial data written to EEPROM
	 */
	CAV25M01_SerNum(&EEPROM, rdSerialNumber, RECALL);
 8001690:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001694:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001698:	2200      	movs	r2, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fe0a 	bl	80032b4 <CAV25M01_SerNum>
	if ( strncmp(rdSerialNumber, "STM32", 5) != 0 )		// check first 5 bytes for data
 80016a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a4:	2205      	movs	r2, #5
 80016a6:	4930      	ldr	r1, [pc, #192]	@ (8001768 <main+0x62c>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 ffd9 	bl	8006660 <strncmp>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d05f      	beq.n	8001774 <main+0x638>
	{
		// Device not initialised, run SETUP procedure
		UserMessages(&husart2, "\r\nNo serial number stored on device, performing first time setup", ENABLE);
 80016b4:	2201      	movs	r2, #1
 80016b6:	492d      	ldr	r1, [pc, #180]	@ (800176c <main+0x630>)
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <main+0x5c0>)
 80016ba:	f000 fef7 	bl	80024ac <UserMessages>
		SetupDevice(&EEPROM);
 80016be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 ff46 	bl	8002554 <SetupDevice>

		// Retrieve serial number from EEPROM
		CAV25M01_SerNum(&EEPROM, rdSerialNumber, RECALL);
 80016c8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80016cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016d0:	2200      	movs	r2, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fdee 	bl	80032b4 <CAV25M01_SerNum>
		UserMessages(&husart2, rdSerialNumber, ENABLE);		// reports serial number over console
 80016d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	@ (80016fc <main+0x5c0>)
 80016e2:	f000 fee3 	bl	80024ac <UserMessages>
		UserMessages(&husart2, "First time setup complete", ENABLE);
 80016e6:	2201      	movs	r2, #1
 80016e8:	4921      	ldr	r1, [pc, #132]	@ (8001770 <main+0x634>)
 80016ea:	4804      	ldr	r0, [pc, #16]	@ (80016fc <main+0x5c0>)
 80016ec:	f000 fede 	bl	80024ac <UserMessages>
 80016f0:	e047      	b.n	8001782 <main+0x646>
 80016f2:	bf00      	nop
 80016f4:	08008ea8 	.word	0x08008ea8
 80016f8:	200002d8 	.word	0x200002d8
 80016fc:	200002a0 	.word	0x200002a0
 8001700:	08008ec4 	.word	0x08008ec4
 8001704:	08008eec 	.word	0x08008eec
 8001708:	08008efc 	.word	0x08008efc
 800170c:	08008f0c 	.word	0x08008f0c
 8001710:	08008f84 	.word	0x08008f84
 8001714:	20000244 	.word	0x20000244
 8001718:	08008fbc 	.word	0x08008fbc
 800171c:	20000250 	.word	0x20000250
 8001720:	08008fd0 	.word	0x08008fd0
 8001724:	2000025c 	.word	0x2000025c
 8001728:	08008fe4 	.word	0x08008fe4
 800172c:	20000268 	.word	0x20000268
 8001730:	08008ff8 	.word	0x08008ff8
 8001734:	0800900c 	.word	0x0800900c
 8001738:	20000274 	.word	0x20000274
 800173c:	08009020 	.word	0x08009020
 8001740:	08009034 	.word	0x08009034
 8001744:	08009050 	.word	0x08009050
 8001748:	08009078 	.word	0x08009078
 800174c:	080090a0 	.word	0x080090a0
 8001750:	080090c4 	.word	0x080090c4
 8001754:	20000224 	.word	0x20000224
 8001758:	080090f0 	.word	0x080090f0
 800175c:	0800910c 	.word	0x0800910c
 8001760:	0800913c 	.word	0x0800913c
 8001764:	08009174 	.word	0x08009174
 8001768:	0800919c 	.word	0x0800919c
 800176c:	080091a4 	.word	0x080091a4
 8001770:	080091e8 	.word	0x080091e8
	}
	else
	{
		// Device already initialised, report serial number over console
		UserMessages(&husart2, rdSerialNumber, ENABLE);
 8001774:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001778:	2201      	movs	r2, #1
 800177a:	4619      	mov	r1, r3
 800177c:	48a8      	ldr	r0, [pc, #672]	@ (8001a20 <main+0x8e4>)
 800177e:	f000 fe95 	bl	80024ac <UserMessages>
	}

	// Begin UART Rx interrupt so commands can be received
	USART_ReceiveDataIT(&husart2, (uint8_t *)uartRxBuff, sizeof(uartRxBuff));
 8001782:	2214      	movs	r2, #20
 8001784:	49a7      	ldr	r1, [pc, #668]	@ (8001a24 <main+0x8e8>)
 8001786:	48a6      	ldr	r0, [pc, #664]	@ (8001a20 <main+0x8e4>)
 8001788:	f003 ff71 	bl	800566e <USART_ReceiveDataIT>

	sprintf(msgTxBuff, "\r\nDevice successfully booted\r\n"
 800178c:	49a6      	ldr	r1, [pc, #664]	@ (8001a28 <main+0x8ec>)
 800178e:	48a7      	ldr	r0, [pc, #668]	@ (8001a2c <main+0x8f0>)
 8001790:	f004 febc 	bl	800650c <siprintf>
			"Ready to receive commands");
	UserMessages(&husart2, msgTxBuff, ENABLE);
 8001794:	2201      	movs	r2, #1
 8001796:	49a5      	ldr	r1, [pc, #660]	@ (8001a2c <main+0x8f0>)
 8001798:	48a1      	ldr	r0, [pc, #644]	@ (8001a20 <main+0x8e4>)
 800179a:	f000 fe87 	bl	80024ac <UserMessages>

	/* Main loop body */
	while(1)
	{
		GPIO_ToggleOutputPin(BootLED.pGPIOx, BootLED.GPIO_PinConfig.GPIO_PinNumber);		// Toggles the green boot LED
 800179e:	4ba4      	ldr	r3, [pc, #656]	@ (8001a30 <main+0x8f4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4aa3      	ldr	r2, [pc, #652]	@ (8001a30 <main+0x8f4>)
 80017a4:	7912      	ldrb	r2, [r2, #4]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fb8a 	bl	8003ec2 <GPIO_ToggleOutputPin>

		// Read accelerometer data and update LEDs if enabled & new data ready
		if (PetriMode == ENABLE)
 80017ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d14f      	bne.n	8001856 <main+0x71a>
		{
			if (Accelerometer.NewData == READY)
 80017b6:	4b9f      	ldr	r3, [pc, #636]	@ (8001a34 <main+0x8f8>)
 80017b8:	7fdb      	ldrb	r3, [r3, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d16b      	bne.n	8001896 <main+0x75a>
			{
				I2C_Status = ADXL343_ReadData(&Accelerometer, AccelData, &ACC_INT1);
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4a9d      	ldr	r2, [pc, #628]	@ (8001a38 <main+0x8fc>)
 80017c2:	4619      	mov	r1, r3
 80017c4:	489b      	ldr	r0, [pc, #620]	@ (8001a34 <main+0x8f8>)
 80017c6:	f001 fa12 	bl	8002bee <ADXL343_ReadData>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
				if (I2C_Status != I2C_NO_ERROR) I2C_ApplicationEventCallback(Accelerometer.i2cHandle, I2C_Status);
 80017d0:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <main+0x6ac>
 80017d8:	4b96      	ldr	r3, [pc, #600]	@ (8001a34 <main+0x8f8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fcf0 	bl	80021c8 <I2C_ApplicationEventCallback>
				ADXL343_PitchRollCalc(&Accelerometer, AccelData);
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4891      	ldr	r0, [pc, #580]	@ (8001a34 <main+0x8f8>)
 80017ee:	f001 fad3 	bl	8002d98 <ADXL343_PitchRollCalc>
				LED_PetriDish(Accelerometer.Roll, Accelerometer.Pitch, Accelerometer.Zg);
 80017f2:	4b90      	ldr	r3, [pc, #576]	@ (8001a34 <main+0x8f8>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4a8f      	ldr	r2, [pc, #572]	@ (8001a34 <main+0x8f8>)
 80017f8:	6891      	ldr	r1, [r2, #8]
 80017fa:	4a8e      	ldr	r2, [pc, #568]	@ (8001a34 <main+0x8f8>)
 80017fc:	6992      	ldr	r2, [r2, #24]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fb92 	bl	8001f28 <LED_PetriDish>

				// report accelerometer data over console if enabled
				if (AccelMsgs == ENABLE)
 8001804:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001808:	2b01      	cmp	r3, #1
 800180a:	d144      	bne.n	8001896 <main+0x75a>
				{
					sprintf(msgTxBuff, "roll: %.2f, pitch: %.2f, Zg: %.2f", Accelerometer.Roll, Accelerometer.Pitch, Accelerometer.Zg);
 800180c:	4b89      	ldr	r3, [pc, #548]	@ (8001a34 <main+0x8f8>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe19 	bl	8000448 <__aeabi_f2d>
 8001816:	4680      	mov	r8, r0
 8001818:	4689      	mov	r9, r1
 800181a:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <main+0x8f8>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe12 	bl	8000448 <__aeabi_f2d>
 8001824:	4604      	mov	r4, r0
 8001826:	460d      	mov	r5, r1
 8001828:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <main+0x8f8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe0b 	bl	8000448 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800183a:	e9cd 4500 	strd	r4, r5, [sp]
 800183e:	4642      	mov	r2, r8
 8001840:	464b      	mov	r3, r9
 8001842:	497e      	ldr	r1, [pc, #504]	@ (8001a3c <main+0x900>)
 8001844:	4879      	ldr	r0, [pc, #484]	@ (8001a2c <main+0x8f0>)
 8001846:	f004 fe61 	bl	800650c <siprintf>
					UserMessages(&husart2, msgTxBuff, ENABLE);
 800184a:	2201      	movs	r2, #1
 800184c:	4977      	ldr	r1, [pc, #476]	@ (8001a2c <main+0x8f0>)
 800184e:	4874      	ldr	r0, [pc, #464]	@ (8001a20 <main+0x8e4>)
 8001850:	f000 fe2c 	bl	80024ac <UserMessages>
 8001854:	e01f      	b.n	8001896 <main+0x75a>
			}
		}
		else
		{
			// Petri mode disabled, turn LEDs off
			htim1.pTIMx->CCR[0] = 0;	// SE LED
 8001856:	4b7a      	ldr	r3, [pc, #488]	@ (8001a40 <main+0x904>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.pTIMx->CCR[1] = 0;	// E LED
 800185e:	4b78      	ldr	r3, [pc, #480]	@ (8001a40 <main+0x904>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.pTIMx->CCR[2] = 0;	// NE LED
 8001866:	4b76      	ldr	r3, [pc, #472]	@ (8001a40 <main+0x904>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim2.pTIMx->CCR[2] = 0;	// SW LED
 800186e:	4b75      	ldr	r3, [pc, #468]	@ (8001a44 <main+0x908>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c
			htim2.pTIMx->CCR[3] = 0;	// S LED
 8001876:	4b73      	ldr	r3, [pc, #460]	@ (8001a44 <main+0x908>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
			htim3.pTIMx->CCR[3] = 0;	// W LED
 800187e:	4b72      	ldr	r3, [pc, #456]	@ (8001a48 <main+0x90c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	@ 0x40
			htim4.pTIMx->CCR[0] = 0;	// NW LED
 8001886:	4b71      	ldr	r3, [pc, #452]	@ (8001a4c <main+0x910>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
			htim2.pTIMx->CCR[0] = 0;	// N LED
 800188e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a44 <main+0x908>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		if (strcasecmp(command,"") == 0)
 8001896:	4b6e      	ldr	r3, [pc, #440]	@ (8001a50 <main+0x914>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8192 	beq.w	8001bc4 <main+0xa88>
		{
			// no command received, perform no action
		}
		else if (strcasecmp(command,"SETUP") == 0)
 80018a0:	496c      	ldr	r1, [pc, #432]	@ (8001a54 <main+0x918>)
 80018a2:	486b      	ldr	r0, [pc, #428]	@ (8001a50 <main+0x914>)
 80018a4:	f004 fe9e 	bl	80065e4 <strcasecmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d11d      	bne.n	80018ea <main+0x7ae>
		{
			// Setup device serial number
			UserMessages(&husart2, "Entering setup mode", ENABLE);
 80018ae:	2201      	movs	r2, #1
 80018b0:	4969      	ldr	r1, [pc, #420]	@ (8001a58 <main+0x91c>)
 80018b2:	485b      	ldr	r0, [pc, #364]	@ (8001a20 <main+0x8e4>)
 80018b4:	f000 fdfa 	bl	80024ac <UserMessages>

			SetupDevice(&EEPROM);
 80018b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fe49 	bl	8002554 <SetupDevice>

			// Retrieve serial number from EEPROM & report over console
			CAV25M01_SerNum(&EEPROM, rdSerialNumber, RECALL);
 80018c2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80018c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018ca:	2200      	movs	r2, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 fcf1 	bl	80032b4 <CAV25M01_SerNum>
			UserMessages(&husart2, rdSerialNumber, ENABLE);
 80018d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	4851      	ldr	r0, [pc, #324]	@ (8001a20 <main+0x8e4>)
 80018dc:	f000 fde6 	bl	80024ac <UserMessages>

			Command_Handling(&husart2, "Exiting setup mode");
 80018e0:	495e      	ldr	r1, [pc, #376]	@ (8001a5c <main+0x920>)
 80018e2:	484f      	ldr	r0, [pc, #316]	@ (8001a20 <main+0x8e4>)
 80018e4:	f000 fdc6 	bl	8002474 <Command_Handling>
 80018e8:	e16c      	b.n	8001bc4 <main+0xa88>
		}
		else if (strcasecmp(command,"CALIBRATE") == 0)
 80018ea:	495d      	ldr	r1, [pc, #372]	@ (8001a60 <main+0x924>)
 80018ec:	4858      	ldr	r0, [pc, #352]	@ (8001a50 <main+0x914>)
 80018ee:	f004 fe79 	bl	80065e4 <strcasecmp>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d156      	bne.n	80019a6 <main+0x86a>
		{
			// Calibrate accelerometer offsets
			sprintf(msgTxBuff, "Ensure device is flat\r\n"
 80018f8:	495a      	ldr	r1, [pc, #360]	@ (8001a64 <main+0x928>)
 80018fa:	484c      	ldr	r0, [pc, #304]	@ (8001a2c <main+0x8f0>)
 80018fc:	f004 fe06 	bl	800650c <siprintf>
					"Starting calibration procedure in");
			UserMessages(&husart2, msgTxBuff, ENABLE);
 8001900:	2201      	movs	r2, #1
 8001902:	494a      	ldr	r1, [pc, #296]	@ (8001a2c <main+0x8f0>)
 8001904:	4846      	ldr	r0, [pc, #280]	@ (8001a20 <main+0x8e4>)
 8001906:	f000 fdd1 	bl	80024ac <UserMessages>

			// 5 second countdown
			for (uint8_t i = 5; i > 0; i--)
 800190a:	2305      	movs	r3, #5
 800190c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 8001910:	e014      	b.n	800193c <main+0x800>
			{
				sprintf(msgTxBuff, "%u", i);
 8001912:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001916:	461a      	mov	r2, r3
 8001918:	4953      	ldr	r1, [pc, #332]	@ (8001a68 <main+0x92c>)
 800191a:	4844      	ldr	r0, [pc, #272]	@ (8001a2c <main+0x8f0>)
 800191c:	f004 fdf6 	bl	800650c <siprintf>
				UserMessages(&husart2, msgTxBuff, ENABLE);
 8001920:	2201      	movs	r2, #1
 8001922:	4942      	ldr	r1, [pc, #264]	@ (8001a2c <main+0x8f0>)
 8001924:	483e      	ldr	r0, [pc, #248]	@ (8001a20 <main+0x8e4>)
 8001926:	f000 fdc1 	bl	80024ac <UserMessages>
				DELAY_MS(1000);
 800192a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800192e:	f001 ffb5 	bl	800389c <DELAY_MS>
			for (uint8_t i = 5; i > 0; i--)
 8001932:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001936:	3b01      	subs	r3, #1
 8001938:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 800193c:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e6      	bne.n	8001912 <main+0x7d6>
			}

			// calibrates X,Y,Z offsets
			I2C_Status = ADXL343_CalibrateFlat(&Accelerometer, &ACC_INT1);
 8001944:	493c      	ldr	r1, [pc, #240]	@ (8001a38 <main+0x8fc>)
 8001946:	483b      	ldr	r0, [pc, #236]	@ (8001a34 <main+0x8f8>)
 8001948:	f001 f831 	bl	80029ae <ADXL343_CalibrateFlat>
 800194c:	4603      	mov	r3, r0
 800194e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
			if (I2C_Status == I2C_NO_ERROR)
 8001952:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10e      	bne.n	8001978 <main+0x83c>
			{
				strcpy(msgTxBuff, "Accelerometer Calibrated");
 800195a:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <main+0x8f0>)
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <main+0x930>)
 800195e:	4614      	mov	r4, r2
 8001960:	461d      	mov	r5, r3
 8001962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001966:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196a:	c403      	stmia	r4!, {r0, r1}
 800196c:	7022      	strb	r2, [r4, #0]
				Command_Handling(&husart2, msgTxBuff);
 800196e:	492f      	ldr	r1, [pc, #188]	@ (8001a2c <main+0x8f0>)
 8001970:	482b      	ldr	r0, [pc, #172]	@ (8001a20 <main+0x8e4>)
 8001972:	f000 fd7f 	bl	8002474 <Command_Handling>
 8001976:	e125      	b.n	8001bc4 <main+0xa88>
			} else
			{
				strcpy(msgTxBuff, "Failed to Calibrate Accelerometer");
 8001978:	4a2c      	ldr	r2, [pc, #176]	@ (8001a2c <main+0x8f0>)
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <main+0x934>)
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	8023      	strh	r3, [r4, #0]
				Command_Handling(&husart2, msgTxBuff);
 800198c:	4927      	ldr	r1, [pc, #156]	@ (8001a2c <main+0x8f0>)
 800198e:	4824      	ldr	r0, [pc, #144]	@ (8001a20 <main+0x8e4>)
 8001990:	f000 fd70 	bl	8002474 <Command_Handling>
				I2C_ApplicationEventCallback(Accelerometer.i2cHandle, I2C_Status);
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <main+0x8f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fc12 	bl	80021c8 <I2C_ApplicationEventCallback>
 80019a4:	e10e      	b.n	8001bc4 <main+0xa88>
			}
		}
		else if (strcasecmp(command,"FEEDBACK OFF") == 0)
 80019a6:	4933      	ldr	r1, [pc, #204]	@ (8001a74 <main+0x938>)
 80019a8:	4829      	ldr	r0, [pc, #164]	@ (8001a50 <main+0x914>)
 80019aa:	f004 fe1b 	bl	80065e4 <strcasecmp>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <main+0x888>
		{
			// Turn off leds updating based on accelerometer data
			PetriMode = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			Command_Handling(&husart2, "Accelerometer LED feedback disabled");
 80019ba:	492f      	ldr	r1, [pc, #188]	@ (8001a78 <main+0x93c>)
 80019bc:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <main+0x8e4>)
 80019be:	f000 fd59 	bl	8002474 <Command_Handling>
 80019c2:	e0ff      	b.n	8001bc4 <main+0xa88>
		}
		else if (strcasecmp(command,"FEEDBACK ON") == 0)
 80019c4:	492d      	ldr	r1, [pc, #180]	@ (8001a7c <main+0x940>)
 80019c6:	4822      	ldr	r0, [pc, #136]	@ (8001a50 <main+0x914>)
 80019c8:	f004 fe0c 	bl	80065e4 <strcasecmp>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <main+0x8a6>
		{
			// Turn on leds updating based on accelerometer data
			PetriMode = ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			Command_Handling(&husart2, "Accelerometer LED feedback enabled");
 80019d8:	4929      	ldr	r1, [pc, #164]	@ (8001a80 <main+0x944>)
 80019da:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <main+0x8e4>)
 80019dc:	f000 fd4a 	bl	8002474 <Command_Handling>
 80019e0:	e0f0      	b.n	8001bc4 <main+0xa88>
		}
		else if (strcasecmp(command,"DATA ON") == 0)
 80019e2:	4928      	ldr	r1, [pc, #160]	@ (8001a84 <main+0x948>)
 80019e4:	481a      	ldr	r0, [pc, #104]	@ (8001a50 <main+0x914>)
 80019e6:	f004 fdfd 	bl	80065e4 <strcasecmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d107      	bne.n	8001a00 <main+0x8c4>
		{
			// Turn on accelerometer reporting over UART
			AccelMsgs = ENABLE;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
			Command_Handling(&husart2, " ");
 80019f6:	4924      	ldr	r1, [pc, #144]	@ (8001a88 <main+0x94c>)
 80019f8:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <main+0x8e4>)
 80019fa:	f000 fd3b 	bl	8002474 <Command_Handling>
 80019fe:	e0e1      	b.n	8001bc4 <main+0xa88>
		}
		else if (strcasecmp(command,"DATA OFF") == 0)
 8001a00:	4922      	ldr	r1, [pc, #136]	@ (8001a8c <main+0x950>)
 8001a02:	4813      	ldr	r0, [pc, #76]	@ (8001a50 <main+0x914>)
 8001a04:	f004 fdee 	bl	80065e4 <strcasecmp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d142      	bne.n	8001a94 <main+0x958>
		{
			// Turn off accelerometer reporting over UART
			AccelMsgs = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
			Command_Handling(&husart2, "Disabled accelerometer readings reporting over UART");
 8001a14:	491e      	ldr	r1, [pc, #120]	@ (8001a90 <main+0x954>)
 8001a16:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <main+0x8e4>)
 8001a18:	f000 fd2c 	bl	8002474 <Command_Handling>
 8001a1c:	e0d2      	b.n	8001bc4 <main+0xa88>
 8001a1e:	bf00      	nop
 8001a20:	200002a0 	.word	0x200002a0
 8001a24:	20000370 	.word	0x20000370
 8001a28:	08009204 	.word	0x08009204
 8001a2c:	200002d8 	.word	0x200002d8
 8001a30:	200001fc 	.word	0x200001fc
 8001a34:	20000224 	.word	0x20000224
 8001a38:	2000021c 	.word	0x2000021c
 8001a3c:	0800923c 	.word	0x0800923c
 8001a40:	20000244 	.word	0x20000244
 8001a44:	20000250 	.word	0x20000250
 8001a48:	2000025c 	.word	0x2000025c
 8001a4c:	20000268 	.word	0x20000268
 8001a50:	20000384 	.word	0x20000384
 8001a54:	08009260 	.word	0x08009260
 8001a58:	08009268 	.word	0x08009268
 8001a5c:	0800927c 	.word	0x0800927c
 8001a60:	08009290 	.word	0x08009290
 8001a64:	0800929c 	.word	0x0800929c
 8001a68:	080092d8 	.word	0x080092d8
 8001a6c:	080092dc 	.word	0x080092dc
 8001a70:	080092f8 	.word	0x080092f8
 8001a74:	0800931c 	.word	0x0800931c
 8001a78:	0800932c 	.word	0x0800932c
 8001a7c:	08009350 	.word	0x08009350
 8001a80:	0800935c 	.word	0x0800935c
 8001a84:	08009380 	.word	0x08009380
 8001a88:	08009388 	.word	0x08009388
 8001a8c:	0800938c 	.word	0x0800938c
 8001a90:	08009398 	.word	0x08009398
		}
		else if (strcasecmp(command,"TEMP") == 0)
 8001a94:	494d      	ldr	r1, [pc, #308]	@ (8001bcc <main+0xa90>)
 8001a96:	484e      	ldr	r0, [pc, #312]	@ (8001bd0 <main+0xa94>)
 8001a98:	f004 fda4 	bl	80065e4 <strcasecmp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <main+0x992>
		{
			// take a temperature reading
			tempC = LM75B_ReadTemp(&TempSensor);
 8001aa2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fe6f 	bl	800378a <LM75B_ReadTemp>
 8001aac:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			sprintf(msgTxBuff,"Temperature: %.3fC", tempC);
 8001ab0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001ab4:	f7fe fcc8 	bl	8000448 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4945      	ldr	r1, [pc, #276]	@ (8001bd4 <main+0xa98>)
 8001abe:	4846      	ldr	r0, [pc, #280]	@ (8001bd8 <main+0xa9c>)
 8001ac0:	f004 fd24 	bl	800650c <siprintf>

			Command_Handling(&husart2, msgTxBuff);
 8001ac4:	4944      	ldr	r1, [pc, #272]	@ (8001bd8 <main+0xa9c>)
 8001ac6:	4845      	ldr	r0, [pc, #276]	@ (8001bdc <main+0xaa0>)
 8001ac8:	f000 fcd4 	bl	8002474 <Command_Handling>
 8001acc:	e07a      	b.n	8001bc4 <main+0xa88>
		}
		else if (strcasecmp(command,"FORMAT") == 0)
 8001ace:	4944      	ldr	r1, [pc, #272]	@ (8001be0 <main+0xaa4>)
 8001ad0:	483f      	ldr	r0, [pc, #252]	@ (8001bd0 <main+0xa94>)
 8001ad2:	f004 fd87 	bl	80065e4 <strcasecmp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11e      	bne.n	8001b1a <main+0x9de>
		{
			// Delete serial information
			CAV25M01_SerNum(&EEPROM, BlankSerial, STORE);
 8001adc:	f107 0110 	add.w	r1, r7, #16
 8001ae0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fbe4 	bl	80032b4 <CAV25M01_SerNum>

			// Delete accelerometer offset data
			Xoff = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
			Yoff = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73bb      	strb	r3, [r7, #14]
			Zoff = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	737b      	strb	r3, [r7, #13]
			CAV25M01_AccData(&EEPROM, &Xoff, &Yoff, &Zoff, STORE);
 8001af8:	f107 030d 	add.w	r3, r7, #13
 8001afc:	f107 020e 	add.w	r2, r7, #14
 8001b00:	f107 010f 	add.w	r1, r7, #15
 8001b04:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001b08:	2401      	movs	r4, #1
 8001b0a:	9400      	str	r4, [sp, #0]
 8001b0c:	f001 fc41 	bl	8003392 <CAV25M01_AccData>

			Command_Handling(&husart2, "Device formatted");
 8001b10:	4934      	ldr	r1, [pc, #208]	@ (8001be4 <main+0xaa8>)
 8001b12:	4832      	ldr	r0, [pc, #200]	@ (8001bdc <main+0xaa0>)
 8001b14:	f000 fcae 	bl	8002474 <Command_Handling>
 8001b18:	e054      	b.n	8001bc4 <main+0xa88>
		}
		else
		{
			// unknown command entered, print list of available commands to console
			sprintf(msgTxBuff, "Unknown command entered\r\nList of available commands (case insensitive, termination = \r\n):");
 8001b1a:	4933      	ldr	r1, [pc, #204]	@ (8001be8 <main+0xaac>)
 8001b1c:	482e      	ldr	r0, [pc, #184]	@ (8001bd8 <main+0xa9c>)
 8001b1e:	f004 fcf5 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b22:	2201      	movs	r2, #1
 8001b24:	492c      	ldr	r1, [pc, #176]	@ (8001bd8 <main+0xa9c>)
 8001b26:	482d      	ldr	r0, [pc, #180]	@ (8001bdc <main+0xaa0>)
 8001b28:	f000 fcc0 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "SETUP          Waits for entry of serial number and stores this in EEPROM (blank device enters this mode on power up)");
 8001b2c:	492f      	ldr	r1, [pc, #188]	@ (8001bec <main+0xab0>)
 8001b2e:	482a      	ldr	r0, [pc, #168]	@ (8001bd8 <main+0xa9c>)
 8001b30:	f004 fcec 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b34:	2201      	movs	r2, #1
 8001b36:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <main+0xa9c>)
 8001b38:	4828      	ldr	r0, [pc, #160]	@ (8001bdc <main+0xaa0>)
 8001b3a:	f000 fcb7 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "CALIBRATE      Configures accelerometer flat level by configuring the X/Y/Z offsets");
 8001b3e:	492c      	ldr	r1, [pc, #176]	@ (8001bf0 <main+0xab4>)
 8001b40:	4825      	ldr	r0, [pc, #148]	@ (8001bd8 <main+0xa9c>)
 8001b42:	f004 fce3 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b46:	2201      	movs	r2, #1
 8001b48:	4923      	ldr	r1, [pc, #140]	@ (8001bd8 <main+0xa9c>)
 8001b4a:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <main+0xaa0>)
 8001b4c:	f000 fcae 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "FEEDBACK OFF   Stops updating the LEDs based on accelerometer data, LEDs turn off");
 8001b50:	4928      	ldr	r1, [pc, #160]	@ (8001bf4 <main+0xab8>)
 8001b52:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <main+0xa9c>)
 8001b54:	f004 fcda 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	491f      	ldr	r1, [pc, #124]	@ (8001bd8 <main+0xa9c>)
 8001b5c:	481f      	ldr	r0, [pc, #124]	@ (8001bdc <main+0xaa0>)
 8001b5e:	f000 fca5 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "FEEDBACK ON    Starts updating the LEDs based on accelerometer data (on by default upon power up)");
 8001b62:	4925      	ldr	r1, [pc, #148]	@ (8001bf8 <main+0xabc>)
 8001b64:	481c      	ldr	r0, [pc, #112]	@ (8001bd8 <main+0xa9c>)
 8001b66:	f004 fcd1 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	491a      	ldr	r1, [pc, #104]	@ (8001bd8 <main+0xa9c>)
 8001b6e:	481b      	ldr	r0, [pc, #108]	@ (8001bdc <main+0xaa0>)
 8001b70:	f000 fc9c 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "DATA ON        Accelerometer data reported over UART port (off by default upon power up)");
 8001b74:	4921      	ldr	r1, [pc, #132]	@ (8001bfc <main+0xac0>)
 8001b76:	4818      	ldr	r0, [pc, #96]	@ (8001bd8 <main+0xa9c>)
 8001b78:	f004 fcc8 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4916      	ldr	r1, [pc, #88]	@ (8001bd8 <main+0xa9c>)
 8001b80:	4816      	ldr	r0, [pc, #88]	@ (8001bdc <main+0xaa0>)
 8001b82:	f000 fc93 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "DATA OFF       Stops accelerometer data from being reported over UART port");
 8001b86:	491e      	ldr	r1, [pc, #120]	@ (8001c00 <main+0xac4>)
 8001b88:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <main+0xa9c>)
 8001b8a:	f004 fcbf 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4911      	ldr	r1, [pc, #68]	@ (8001bd8 <main+0xa9c>)
 8001b92:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <main+0xaa0>)
 8001b94:	f000 fc8a 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "TEMP           Takes a temperature reading");
 8001b98:	491a      	ldr	r1, [pc, #104]	@ (8001c04 <main+0xac8>)
 8001b9a:	480f      	ldr	r0, [pc, #60]	@ (8001bd8 <main+0xa9c>)
 8001b9c:	f004 fcb6 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	490d      	ldr	r1, [pc, #52]	@ (8001bd8 <main+0xa9c>)
 8001ba4:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <main+0xaa0>)
 8001ba6:	f000 fc81 	bl	80024ac <UserMessages>

			sprintf(msgTxBuff, "FORMAT         Clears device of serial number & accelerometer offsets");
 8001baa:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <main+0xacc>)
 8001bac:	480a      	ldr	r0, [pc, #40]	@ (8001bd8 <main+0xa9c>)
 8001bae:	f004 fcad 	bl	800650c <siprintf>
			UserMessages(&husart2, msgTxBuff,ENABLE);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <main+0xa9c>)
 8001bb6:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <main+0xaa0>)
 8001bb8:	f000 fc78 	bl	80024ac <UserMessages>

			Command_Handling(&husart2, "Enter Command:");
 8001bbc:	4913      	ldr	r1, [pc, #76]	@ (8001c0c <main+0xad0>)
 8001bbe:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <main+0xaa0>)
 8001bc0:	f000 fc58 	bl	8002474 <Command_Handling>
		}


		DELAY_MS(200);
 8001bc4:	20c8      	movs	r0, #200	@ 0xc8
 8001bc6:	f001 fe69 	bl	800389c <DELAY_MS>
		GPIO_ToggleOutputPin(BootLED.pGPIOx, BootLED.GPIO_PinConfig.GPIO_PinNumber);		// Toggles the green boot LED
 8001bca:	e5e8      	b.n	800179e <main+0x662>
 8001bcc:	080093cc 	.word	0x080093cc
 8001bd0:	20000384 	.word	0x20000384
 8001bd4:	080093d4 	.word	0x080093d4
 8001bd8:	200002d8 	.word	0x200002d8
 8001bdc:	200002a0 	.word	0x200002a0
 8001be0:	080093e8 	.word	0x080093e8
 8001be4:	080093f0 	.word	0x080093f0
 8001be8:	08009404 	.word	0x08009404
 8001bec:	08009460 	.word	0x08009460
 8001bf0:	080094d8 	.word	0x080094d8
 8001bf4:	0800952c 	.word	0x0800952c
 8001bf8:	08009580 	.word	0x08009580
 8001bfc:	080095e4 	.word	0x080095e4
 8001c00:	08009640 	.word	0x08009640
 8001c04:	0800968c 	.word	0x0800968c
 8001c08:	080096b8 	.word	0x080096b8
 8001c0c:	08009700 	.word	0x08009700

08001c10 <GPIO_INIT_ALL>:
 * @return		- none
 *
 * @Note		-
 */
void GPIO_INIT_ALL(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO;	//Generic GPIO handle to initialise pins

	// Configure PA0 (BootLED) as output push pull 2MHz
	BootLED.pGPIOx = GPIOA;
 8001c16:	4b7e      	ldr	r3, [pc, #504]	@ (8001e10 <GPIO_INIT_ALL+0x200>)
 8001c18:	4a7e      	ldr	r2, [pc, #504]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001c1a:	601a      	str	r2, [r3, #0]
	BootLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e10 <GPIO_INIT_ALL+0x200>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	711a      	strb	r2, [r3, #4]
	BootLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_2MHZ_OUT;
 8001c22:	4b7b      	ldr	r3, [pc, #492]	@ (8001e10 <GPIO_INIT_ALL+0x200>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	715a      	strb	r2, [r3, #5]
	BootLED.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_GEN_PP;
 8001c28:	4b79      	ldr	r3, [pc, #484]	@ (8001e10 <GPIO_INIT_ALL+0x200>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&BootLED);
 8001c2e:	4878      	ldr	r0, [pc, #480]	@ (8001e10 <GPIO_INIT_ALL+0x200>)
 8001c30:	f001 ff8c 	bl	8003b4c <GPIO_Init>

	// Configure PB4 (ACC_INT1) as input interrupt on rising edge
	ACC_INT1.pGPIOx = GPIOB;
 8001c34:	4b78      	ldr	r3, [pc, #480]	@ (8001e18 <GPIO_INIT_ALL+0x208>)
 8001c36:	4a79      	ldr	r2, [pc, #484]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001c38:	601a      	str	r2, [r3, #0]
	ACC_INT1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8001c3a:	4b77      	ldr	r3, [pc, #476]	@ (8001e18 <GPIO_INIT_ALL+0x208>)
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	711a      	strb	r2, [r3, #4]
	ACC_INT1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8001c40:	4b75      	ldr	r3, [pc, #468]	@ (8001e18 <GPIO_INIT_ALL+0x208>)
 8001c42:	2205      	movs	r2, #5
 8001c44:	715a      	strb	r2, [r3, #5]
	ACC_INT1.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_INP_RESET;
 8001c46:	4b74      	ldr	r3, [pc, #464]	@ (8001e18 <GPIO_INIT_ALL+0x208>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&ACC_INT1);
 8001c4c:	4872      	ldr	r0, [pc, #456]	@ (8001e18 <GPIO_INIT_ALL+0x208>)
 8001c4e:	f001 ff7d 	bl	8003b4c <GPIO_Init>

	// Configure PB5 (ACC_INT2) as input interrupt on rising edge
	GPIO.pGPIOx = GPIOB;
 8001c52:	4b72      	ldr	r3, [pc, #456]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001c54:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001c56:	2305      	movs	r3, #5
 8001c58:	713b      	strb	r3, [r7, #4]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_INP_RESET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&GPIO);
 8001c62:	463b      	mov	r3, r7
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 ff71 	bl	8003b4c <GPIO_Init>

	/* ==================== TIM Definitions ==================== */
	// Configure PA8 (LEDse) for AFIO Output
	GPIO.pGPIOx = GPIOA;
 8001c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001c6c:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	713b      	strb	r3, [r7, #4]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_ALT_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&GPIO);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 ff65 	bl	8003b4c <GPIO_Init>

	// Configure PA9 (LEDe) for AFIO Output
	GPIO.pGPIOx = GPIOA;
 8001c82:	4b64      	ldr	r3, [pc, #400]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001c84:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8001c86:	2309      	movs	r3, #9
 8001c88:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 ff5d 	bl	8003b4c <GPIO_Init>

	// Configure PA10 (LEDne) for AFIO Output
	GPIO.pGPIOx = GPIOA;
 8001c92:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001c94:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8001c96:	230a      	movs	r3, #10
 8001c98:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 ff55 	bl	8003b4c <GPIO_Init>

	// Configure PA15 (LEDn) for AFIO Output
	GPIO.pGPIOx = GPIOA;
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001ca4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001caa:	463b      	mov	r3, r7
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 ff4d 	bl	8003b4c <GPIO_Init>

	// Configure PB6 (LEDnw) for AFIO Output
	GPIO.pGPIOx = GPIOB;
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001cb4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 ff45 	bl	8003b4c <GPIO_Init>

	// Configure PB1 (LEDw) for AFIO Output
	GPIO.pGPIOx = GPIOB;
 8001cc2:	4b56      	ldr	r3, [pc, #344]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001cc4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001cca:	463b      	mov	r3, r7
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 ff3d 	bl	8003b4c <GPIO_Init>

	// Configure PB10 (LEDsw) for AFIO Output
	GPIO.pGPIOx = GPIOB;
 8001cd2:	4b52      	ldr	r3, [pc, #328]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001cd4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 ff35 	bl	8003b4c <GPIO_Init>

	// Configure PB11 (LEDs) for AFIO Output
	GPIO.pGPIOx = GPIOB;
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001ce4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_11;
 8001ce6:	230b      	movs	r3, #11
 8001ce8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001cea:	463b      	mov	r3, r7
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 ff2d 	bl	8003b4c <GPIO_Init>

	/*==================================================================*/
	/* ======================== SPI Definitions ========================*/
	// Configure PA5 (SCK) for AFIO Output (SPI SCK)
	GPIO.pGPIOx = GPIOA;
 8001cf2:	4b48      	ldr	r3, [pc, #288]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001cf4:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_ALT_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	71bb      	strb	r3, [r7, #6]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001d02:	463b      	mov	r3, r7
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 ff21 	bl	8003b4c <GPIO_Init>

	// Configure PA7 (MOSI)for AFIO Output (SPI MOSI)
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 ff1b 	bl	8003b4c <GPIO_Init>

	// Configure PA6 (MISO) as floating Input (AFIO Input) (SPI MISO)
	GPIO.pGPIOx = GPIOA;
 8001d16:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001d18:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_INP_RESET;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	71bb      	strb	r3, [r7, #6]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INP;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001d22:	2306      	movs	r3, #6
 8001d24:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001d26:	463b      	mov	r3, r7
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 ff0f 	bl	8003b4c <GPIO_Init>

	// Configure PB0 (nCS0) for GPIO Output
	nCS0.pGPIOx = GPIOB;
 8001d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d30:	4a3a      	ldr	r2, [pc, #232]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001d32:	601a      	str	r2, [r3, #0]
	nCS0.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_GEN_PP;
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	719a      	strb	r2, [r3, #6]
	nCS0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001d3a:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	715a      	strb	r2, [r3, #5]
	nCS0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001d40:	4b37      	ldr	r3, [pc, #220]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&nCS0);
 8001d46:	4836      	ldr	r0, [pc, #216]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d48:	f001 ff00 	bl	8003b4c <GPIO_Init>
	GPIO_WriteToOutputPin(nCS0.pGPIOx, nCS0.GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a33      	ldr	r2, [pc, #204]	@ (8001e20 <GPIO_INIT_ALL+0x210>)
 8001d52:	7911      	ldrb	r1, [r2, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 f88f 	bl	8003e7a <GPIO_WriteToOutputPin>

	// Configure PB12 (nWP) for GPIO Output
	nWP.pGPIOx = GPIOB;
 8001d5c:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001d60:	601a      	str	r2, [r3, #0]
	nWP.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_GEN_PP;
 8001d62:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	719a      	strb	r2, [r3, #6]
	nWP.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001d68:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	715a      	strb	r2, [r3, #5]
	nWP.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d70:	220c      	movs	r2, #12
 8001d72:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&nWP);
 8001d74:	482b      	ldr	r0, [pc, #172]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d76:	f001 fee9 	bl	8003b4c <GPIO_Init>
	GPIO_WriteToOutputPin(nWP.pGPIOx, nWP.GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a29      	ldr	r2, [pc, #164]	@ (8001e24 <GPIO_INIT_ALL+0x214>)
 8001d80:	7911      	ldrb	r1, [r2, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 f878 	bl	8003e7a <GPIO_WriteToOutputPin>

	// Configure PB13 (nHOLD) for GPIO Output
	nHOLD.pGPIOx = GPIOB;
 8001d8a:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001d8c:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001d8e:	601a      	str	r2, [r3, #0]
	nHOLD.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_GEN_PP;
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	719a      	strb	r2, [r3, #6]
	nHOLD.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001d96:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001d98:	2203      	movs	r2, #3
 8001d9a:	715a      	strb	r2, [r3, #5]
	nHOLD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8001d9c:	4b22      	ldr	r3, [pc, #136]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001d9e:	220d      	movs	r2, #13
 8001da0:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&nHOLD);
 8001da2:	4821      	ldr	r0, [pc, #132]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001da4:	f001 fed2 	bl	8003b4c <GPIO_Init>
	GPIO_WriteToOutputPin(nHOLD.pGPIOx, nHOLD.GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);
 8001da8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1e      	ldr	r2, [pc, #120]	@ (8001e28 <GPIO_INIT_ALL+0x218>)
 8001dae:	7911      	ldrb	r1, [r2, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 f861 	bl	8003e7a <GPIO_WriteToOutputPin>
	/*==================================================================*/

	/*========================= I2C Definitions ========================*/
	// Configure PB8 (SCL) for AFIO Output (I2C SCL)
	GPIO.pGPIOx = GPIOB;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <GPIO_INIT_ALL+0x20c>)
 8001dba:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_ALT_OD;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	71bb      	strb	r3, [r7, #6]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 febe 	bl	8003b4c <GPIO_Init>

	// Configure PB9 (SCK) for AFIO bi-directional (I2C SCK)
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8001dd0:	2309      	movs	r3, #9
 8001dd2:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 feb8 	bl	8003b4c <GPIO_Init>
	/*==================================================================*/

	/*======================== UART Definitions ========================*/
	// Configure PA2 (UART_TX) for AFIO Output
	GPIO.pGPIOx = GPIOA;
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <GPIO_INIT_ALL+0x204>)
 8001dde:	603b      	str	r3, [r7, #0]
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_OUT_ALT_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	71bb      	strb	r3, [r7, #6]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_50MHZ_OUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8001de8:	2302      	movs	r3, #2
 8001dea:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001dec:	463b      	mov	r3, r7
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 feac 	bl	8003b4c <GPIO_Init>
	// Configure PA3 (UART_RX) for Input
	GPIO.GPIO_PinConfig.GPIO_PinCNF = GPIO_CNF_INP_RESET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	71bb      	strb	r3, [r7, #6]
	GPIO.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INP;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	717b      	strb	r3, [r7, #5]
	GPIO.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&GPIO);
 8001e00:	463b      	mov	r3, r7
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fea2 	bl	8003b4c <GPIO_Init>
	/*==================================================================*/
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	200001fc 	.word	0x200001fc
 8001e14:	40010800 	.word	0x40010800
 8001e18:	2000021c 	.word	0x2000021c
 8001e1c:	40010c00 	.word	0x40010c00
 8001e20:	20000204 	.word	0x20000204
 8001e24:	20000214 	.word	0x20000214
 8001e28:	2000020c 	.word	0x2000020c

08001e2c <EXTI4_IRQHandler>:
 * @return		- none
 *
 * @Note		- overrides weak definition in startup file
 */
void EXTI4_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	// 1. Set DataReady Flag
	Accelerometer.NewData = READY;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <EXTI4_IRQHandler+0x14>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	77da      	strb	r2, [r3, #31]

	// 2. Clear the interrupt in EXTI
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8001e36:	2004      	movs	r0, #4
 8001e38:	f002 f858 	bl	8003eec <GPIO_IRQHandling>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000224 	.word	0x20000224

08001e44 <EXTI9_5_IRQHandler>:
 * @return		- none
 *
 * @Note		- overrides weak definition in startup file
 */
void EXTI9_5_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	// May need to add delay so that multiple triggers don't occur
	// Determine which EXTI line was triggered
	if ((EXTI->PR & 0x20) == 0x20)			// Check if EXTI5 was triggered (ACC_INT2, Not used in this application)
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <EXTI9_5_IRQHandler+0x70>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d103      	bne.n	8001e5c <EXTI9_5_IRQHandler+0x18>
	{
		// handle the interrupt
		GPIO_IRQHandling(GPIO_PIN_NO_5);
 8001e54:	2005      	movs	r0, #5
 8001e56:	f002 f849 	bl	8003eec <GPIO_IRQHandling>
		// handle the interrupt
		GPIO_IRQHandling(GPIO_PIN_NO_9);
		// perform function

	}
}
 8001e5a:	e028      	b.n	8001eae <EXTI9_5_IRQHandler+0x6a>
	} else if ((EXTI->PR & 0x40) == 0x40)	// Check if EXTI6 was triggered
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <EXTI9_5_IRQHandler+0x70>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e64:	2b40      	cmp	r3, #64	@ 0x40
 8001e66:	d103      	bne.n	8001e70 <EXTI9_5_IRQHandler+0x2c>
		GPIO_IRQHandling(GPIO_PIN_NO_6);
 8001e68:	2006      	movs	r0, #6
 8001e6a:	f002 f83f 	bl	8003eec <GPIO_IRQHandling>
}
 8001e6e:	e01e      	b.n	8001eae <EXTI9_5_IRQHandler+0x6a>
	} else if ((EXTI->PR & 0x80) == 0x80)	// Check if EXTI7 was triggered
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <EXTI9_5_IRQHandler+0x70>)
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e78:	2b80      	cmp	r3, #128	@ 0x80
 8001e7a:	d103      	bne.n	8001e84 <EXTI9_5_IRQHandler+0x40>
		GPIO_IRQHandling(GPIO_PIN_NO_7);
 8001e7c:	2007      	movs	r0, #7
 8001e7e:	f002 f835 	bl	8003eec <GPIO_IRQHandling>
}
 8001e82:	e014      	b.n	8001eae <EXTI9_5_IRQHandler+0x6a>
	} else if ((EXTI->PR & 0x100) == 0x100)	// Check if EXTI8 was triggered
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <EXTI9_5_IRQHandler+0x70>)
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e90:	d103      	bne.n	8001e9a <EXTI9_5_IRQHandler+0x56>
		GPIO_IRQHandling(GPIO_PIN_NO_8);
 8001e92:	2008      	movs	r0, #8
 8001e94:	f002 f82a 	bl	8003eec <GPIO_IRQHandling>
}
 8001e98:	e009      	b.n	8001eae <EXTI9_5_IRQHandler+0x6a>
	} else if ((EXTI->PR & 0x200) == 0x200)	// Check if EXTI9 was triggered
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <EXTI9_5_IRQHandler+0x70>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea6:	d102      	bne.n	8001eae <EXTI9_5_IRQHandler+0x6a>
		GPIO_IRQHandling(GPIO_PIN_NO_9);
 8001ea8:	2009      	movs	r0, #9
 8001eaa:	f002 f81f 	bl	8003eec <GPIO_IRQHandling>
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40010400 	.word	0x40010400

08001eb8 <LED_ErrorState>:
 * @return		- none
 *
 * @Note		- additional error states could be added with different LED combinations
 */
void LED_ErrorState(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	htim1.pTIMx->CCR[0] = PERIOD;	// SE LED
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <LED_ErrorState+0x5c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a15      	ldr	r2, [pc, #84]	@ (8001f18 <LED_ErrorState+0x60>)
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.pTIMx->CCR[1] = PERIOD;	// E LED
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <LED_ErrorState+0x5c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <LED_ErrorState+0x60>)
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	639a      	str	r2, [r3, #56]	@ 0x38
	htim1.pTIMx->CCR[2] = PERIOD;	// NE LED
 8001ed0:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <LED_ErrorState+0x5c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <LED_ErrorState+0x60>)
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim2.pTIMx->CCR[2] = PERIOD;	// SW LED
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <LED_ErrorState+0x64>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <LED_ErrorState+0x60>)
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
	htim2.pTIMx->CCR[3] = PERIOD;	// S LED
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <LED_ErrorState+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <LED_ErrorState+0x60>)
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	641a      	str	r2, [r3, #64]	@ 0x40
	htim3.pTIMx->CCR[3] = PERIOD;	// W LED
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <LED_ErrorState+0x68>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <LED_ErrorState+0x60>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40
	htim4.pTIMx->CCR[0] = PERIOD;	// NW LED
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <LED_ErrorState+0x6c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a06      	ldr	r2, [pc, #24]	@ (8001f18 <LED_ErrorState+0x60>)
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	635a      	str	r2, [r3, #52]	@ 0x34
	htim2.pTIMx->CCR[0] = PERIOD;	// N LED
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <LED_ErrorState+0x64>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <LED_ErrorState+0x60>)
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	20000244 	.word	0x20000244
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000250 	.word	0x20000250
 8001f20:	2000025c 	.word	0x2000025c
 8001f24:	20000268 	.word	0x20000268

08001f28 <LED_PetriDish>:
 * @return		- none
 *
 * @Note		-
 */
void LED_PetriDish(float Roll, float Pitch, float Zg)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	@ 0x58
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	int32_t maxBrightness = PERIOD,			// LED is in this state above 85 degrees tilt
 8001f34:	4b96      	ldr	r3, [pc, #600]	@ (8002190 <LED_PetriDish+0x268>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
			minBrightness = 0,				// LED is in this state if not tilting in this direction
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
			degBrightness = PERIOD / 90,	// how much LEDBrightness increases per degree of tilt
 8001f3e:	4b94      	ldr	r3, [pc, #592]	@ (8002190 <LED_PetriDish+0x268>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	4a93      	ldr	r2, [pc, #588]	@ (8002194 <LED_PetriDish+0x26c>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	61fb      	str	r3, [r7, #28]
			botLED, midLED, topLED,
			rollBrightness, pitchBrightness;
	uint8_t posRoll, posPitch;
	float 	diagonalWeighting;
	int32_t nLED = minBrightness;
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	647b      	str	r3, [r7, #68]	@ 0x44
	int32_t neLED = minBrightness;
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	643b      	str	r3, [r7, #64]	@ 0x40
	int32_t swLED = minBrightness;
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int32_t wLED = minBrightness;
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
	int32_t nwLED = minBrightness;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t sLED = minBrightness;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
	int32_t eLED = minBrightness;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t seLED = minBrightness;
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	// board inverted, set all LEDs to maximum
	if (Zg < invertedZg)
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff f894 	bl	80010a0 <__aeabi_fcmplt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <LED_PetriDish+0x98>
	{
		htim1.pTIMx->CCR[0] = maxBrightness;	// SE LED
 8001f7e:	4b86      	ldr	r3, [pc, #536]	@ (8002198 <LED_PetriDish+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.pTIMx->CCR[1] = maxBrightness;	// E LED
 8001f86:	4b84      	ldr	r3, [pc, #528]	@ (8002198 <LED_PetriDish+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8c:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.pTIMx->CCR[2] = maxBrightness;	// NE LED
 8001f8e:	4b82      	ldr	r3, [pc, #520]	@ (8002198 <LED_PetriDish+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f94:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim2.pTIMx->CCR[2] = maxBrightness;	// SW LED
 8001f96:	4b81      	ldr	r3, [pc, #516]	@ (800219c <LED_PetriDish+0x274>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim2.pTIMx->CCR[3] = maxBrightness;	// S LED
 8001f9e:	4b7f      	ldr	r3, [pc, #508]	@ (800219c <LED_PetriDish+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.pTIMx->CCR[3] = maxBrightness;	// W LED
 8001fa6:	4b7e      	ldr	r3, [pc, #504]	@ (80021a0 <LED_PetriDish+0x278>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
		htim4.pTIMx->CCR[0] = maxBrightness;	// NW LED
 8001fae:	4b7d      	ldr	r3, [pc, #500]	@ (80021a4 <LED_PetriDish+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb4:	635a      	str	r2, [r3, #52]	@ 0x34
		htim2.pTIMx->CCR[0] = maxBrightness;	// N LED
 8001fb6:	4b79      	ldr	r3, [pc, #484]	@ (800219c <LED_PetriDish+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbc:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8001fbe:	e0e0      	b.n	8002182 <LED_PetriDish+0x25a>
	}
	else
	{
		// Determine direction of roll for active LEDs
		if (Roll > 0) posRoll = 1;
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff f889 	bl	80010dc <__aeabi_fcmpgt>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <LED_PetriDish+0xb0>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001fd6:	e006      	b.n	8001fe6 <LED_PetriDish+0xbe>
		else
		{
			posRoll = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			Roll = Roll * -1;	// remove negative values to make maths easier
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fe4:	60fb      	str	r3, [r7, #12]
		}

		// Determine direction of pitch for active LEDs
		if (Pitch > 0) posPitch = 1;
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f7ff f876 	bl	80010dc <__aeabi_fcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <LED_PetriDish+0xd6>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001ffc:	e006      	b.n	800200c <LED_PetriDish+0xe4>
		else
		{
			posPitch = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
			Pitch = Pitch * -1;	// remove negative values to make maths easier
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800200a:	60bb      	str	r3, [r7, #8]
		}

		rollBrightness = (int32_t)Roll * degBrightness;
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f7ff f86f 	bl	80010f0 <__aeabi_f2iz>
 8002012:	4602      	mov	r2, r0
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	61bb      	str	r3, [r7, #24]
		pitchBrightness = (int32_t)Pitch * degBrightness;
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7ff f867 	bl	80010f0 <__aeabi_f2iz>
 8002022:	4602      	mov	r2, r0
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
		diagonalWeighting = atan(Pitch/Roll) * 57.3; // *57.3 converts to degrees
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	68b8      	ldr	r0, [r7, #8]
 8002030:	f7fe ff4c 	bl	8000ecc <__aeabi_fdiv>
 8002034:	4603      	mov	r3, r0
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fa06 	bl	8000448 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f006 fc18 	bl	8008878 <atan>
 8002048:	a34f      	add	r3, pc, #316	@ (adr r3, 8002188 <LED_PetriDish+0x260>)
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	f7fe fa53 	bl	80004f8 <__aeabi_dmul>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fd25 	bl	8000aa8 <__aeabi_d2f>
 800205e:	4603      	mov	r3, r0
 8002060:	613b      	str	r3, [r7, #16]


		if (diagonalWeighting < 22.5f)		// tilting between SE & E with more E weighting
 8002062:	4951      	ldr	r1, [pc, #324]	@ (80021a8 <LED_PetriDish+0x280>)
 8002064:	6938      	ldr	r0, [r7, #16]
 8002066:	f7ff f81b 	bl	80010a0 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <LED_PetriDish+0x156>
		{
			topLED = rollBrightness;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
			midLED = pitchBrightness;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	653b      	str	r3, [r7, #80]	@ 0x50
			botLED = minBrightness;
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	657b      	str	r3, [r7, #84]	@ 0x54
 800207c:	e025      	b.n	80020ca <LED_PetriDish+0x1a2>
		}
		else if (diagonalWeighting < 45) 	// tilting between SE & E with more SE weighting
 800207e:	494b      	ldr	r1, [pc, #300]	@ (80021ac <LED_PetriDish+0x284>)
 8002080:	6938      	ldr	r0, [r7, #16]
 8002082:	f7ff f80d 	bl	80010a0 <__aeabi_fcmplt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <LED_PetriDish+0x176>
		{
			topLED = rollBrightness;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	64fb      	str	r3, [r7, #76]	@ 0x4c
			midLED = rollBrightness + pitchBrightness;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4413      	add	r3, r2
 8002096:	653b      	str	r3, [r7, #80]	@ 0x50
			botLED = minBrightness;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	657b      	str	r3, [r7, #84]	@ 0x54
 800209c:	e015      	b.n	80020ca <LED_PetriDish+0x1a2>
		}
		else if (diagonalWeighting < 67.5f) // tilting between SE & S with more SE weighting
 800209e:	4944      	ldr	r1, [pc, #272]	@ (80021b0 <LED_PetriDish+0x288>)
 80020a0:	6938      	ldr	r0, [r7, #16]
 80020a2:	f7fe fffd 	bl	80010a0 <__aeabi_fcmplt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <LED_PetriDish+0x196>
		{
			botLED = pitchBrightness;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	657b      	str	r3, [r7, #84]	@ 0x54
			midLED = pitchBrightness + rollBrightness;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4413      	add	r3, r2
 80020b6:	653b      	str	r3, [r7, #80]	@ 0x50
			topLED = minBrightness;
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020bc:	e005      	b.n	80020ca <LED_PetriDish+0x1a2>
		}
		else 								// tilting between SE & S with more S weighting
		{
			botLED = pitchBrightness;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	657b      	str	r3, [r7, #84]	@ 0x54
			midLED = rollBrightness;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	653b      	str	r3, [r7, #80]	@ 0x50
			topLED = minBrightness;
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		 * if Pitch > Roll then the angle is above 45
		 * 		if angle is < 67.5, diagonal LED = pitch brightness + rollBrightness
		 * 		else, diagonal LED = rollBrightness
		 */

		if (posRoll && posPitch)		// SE Quadrant
 80020ca:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <LED_PetriDish+0x1c0>
 80020d2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <LED_PetriDish+0x1c0>
		{
			eLED = topLED;
 80020da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			sLED = botLED;
 80020de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
			seLED = midLED;
 80020e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e6:	e02b      	b.n	8002140 <LED_PetriDish+0x218>
		}
		else if (posRoll && !posPitch)	// NE Quadrant
 80020e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <LED_PetriDish+0x1de>
 80020f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <LED_PetriDish+0x1de>
		{
			nLED = botLED;
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	647b      	str	r3, [r7, #68]	@ 0x44
			eLED = topLED;
 80020fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
			neLED = midLED;
 8002100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002102:	643b      	str	r3, [r7, #64]	@ 0x40
 8002104:	e01c      	b.n	8002140 <LED_PetriDish+0x218>
		}
		else if (!posRoll && posPitch)	// SW Quadrant
 8002106:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <LED_PetriDish+0x1fc>
 800210e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <LED_PetriDish+0x1fc>
		{
			wLED = topLED;
 8002116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002118:	63bb      	str	r3, [r7, #56]	@ 0x38
			sLED = botLED;
 800211a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
			swLED = midLED;
 800211e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002122:	e00d      	b.n	8002140 <LED_PetriDish+0x218>
		}
		else if (!posRoll && !posPitch)	// NW Quadrant
 8002124:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <LED_PetriDish+0x218>
 800212c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <LED_PetriDish+0x218>
		{
			nLED = botLED;
 8002134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002136:	647b      	str	r3, [r7, #68]	@ 0x44
			wLED = topLED;
 8002138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800213a:	63bb      	str	r3, [r7, #56]	@ 0x38
			nwLED = midLED;
 800213c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		// Set all LEDs
		htim1.pTIMx->CCR[0] = seLED;	// SE LED
 8002140:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <LED_PetriDish+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002146:	635a      	str	r2, [r3, #52]	@ 0x34
		htim1.pTIMx->CCR[1] = eLED;		// E LED
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <LED_PetriDish+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800214e:	639a      	str	r2, [r3, #56]	@ 0x38
		htim1.pTIMx->CCR[2] = neLED;	// NE LED
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <LED_PetriDish+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002156:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim2.pTIMx->CCR[2] = swLED;	// SW LED
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <LED_PetriDish+0x274>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
		htim2.pTIMx->CCR[3] = sLED;		// S LED
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <LED_PetriDish+0x274>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002166:	641a      	str	r2, [r3, #64]	@ 0x40
		htim3.pTIMx->CCR[3] = wLED;		// W LED
 8002168:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <LED_PetriDish+0x278>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800216e:	641a      	str	r2, [r3, #64]	@ 0x40
		htim4.pTIMx->CCR[0] = nwLED;	// NW LED
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <LED_PetriDish+0x27c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002176:	635a      	str	r2, [r3, #52]	@ 0x34
		htim2.pTIMx->CCR[0] = nLED;		// N LED
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <LED_PetriDish+0x274>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800217e:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	return;
 8002180:	bf00      	nop
}
 8002182:	3758      	adds	r7, #88	@ 0x58
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	66666666 	.word	0x66666666
 800218c:	404ca666 	.word	0x404ca666
 8002190:	20000000 	.word	0x20000000
 8002194:	b60b60b7 	.word	0xb60b60b7
 8002198:	20000244 	.word	0x20000244
 800219c:	20000250 	.word	0x20000250
 80021a0:	2000025c 	.word	0x2000025c
 80021a4:	20000268 	.word	0x20000268
 80021a8:	41b40000 	.word	0x41b40000
 80021ac:	42340000 	.word	0x42340000
 80021b0:	42870000 	.word	0x42870000

080021b4 <I2C1_ER_IRQHandler>:
 * @return		-
 *
 * @Note		- overwrites weak definition in startup file
 */
void I2C1_ER_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&hi2c1);
 80021b8:	4802      	ldr	r0, [pc, #8]	@ (80021c4 <I2C1_ER_IRQHandler+0x10>)
 80021ba:	f002 fb70 	bl	800489e <I2C_ER_IRQHandling>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000274 	.word	0x20000274

080021c8 <I2C_ApplicationEventCallback>:
 * @return		-
 *
 * @Note		-
 */
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CxHandle, uint8_t AppEv)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	70fb      	strb	r3, [r7, #3]
	if ( AppEv == I2C_BUS_ERROR)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10d      	bne.n	80021f6 <I2C_ApplicationEventCallback+0x2e>
	{
		UserMessages(&husart2, "I2C Bus error occured", DISABLE);
 80021da:	2200      	movs	r2, #0
 80021dc:	4936      	ldr	r1, [pc, #216]	@ (80022b8 <I2C_ApplicationEventCallback+0xf0>)
 80021de:	4837      	ldr	r0, [pc, #220]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 80021e0:	f000 f964 	bl	80024ac <UserMessages>
		// Generate STOP condition
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 feae 	bl	8003f4a <I2C_GenerateSTOPCondition>

		LED_ErrorState();
 80021ee:	f7ff fe63 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <I2C_ApplicationEventCallback+0x2a>

	} else if ( AppEv == I2C_ACK_ERROR)
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d10d      	bne.n	8002218 <I2C_ApplicationEventCallback+0x50>
	{
		UserMessages(&husart2, "I2C Ack error occured", DISABLE);
 80021fc:	2200      	movs	r2, #0
 80021fe:	4930      	ldr	r1, [pc, #192]	@ (80022c0 <I2C_ApplicationEventCallback+0xf8>)
 8002200:	482e      	ldr	r0, [pc, #184]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 8002202:	f000 f953 	bl	80024ac <UserMessages>
		// Generate STOP condition
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fe9d 	bl	8003f4a <I2C_GenerateSTOPCondition>

		LED_ErrorState();
 8002210:	f7ff fe52 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <I2C_ApplicationEventCallback+0x4c>

	} else if ( AppEv == I2C_ARLO_ERROR)
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d10d      	bne.n	800223a <I2C_ApplicationEventCallback+0x72>
	{
		UserMessages(&husart2, "I2C ARLO error occured", DISABLE);
 800221e:	2200      	movs	r2, #0
 8002220:	4928      	ldr	r1, [pc, #160]	@ (80022c4 <I2C_ApplicationEventCallback+0xfc>)
 8002222:	4826      	ldr	r0, [pc, #152]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 8002224:	f000 f942 	bl	80024ac <UserMessages>
		// Generate STOP condition
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fe8c 	bl	8003f4a <I2C_GenerateSTOPCondition>

		LED_ErrorState();
 8002232:	f7ff fe41 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 8002236:	bf00      	nop
 8002238:	e7fd      	b.n	8002236 <I2C_ApplicationEventCallback+0x6e>

	} else if ( AppEv == I2C_TIMEOUT_ERROR)
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d10d      	bne.n	800225c <I2C_ApplicationEventCallback+0x94>
	{
		UserMessages(&husart2, "I2C Timeout error occured", DISABLE);
 8002240:	2200      	movs	r2, #0
 8002242:	4921      	ldr	r1, [pc, #132]	@ (80022c8 <I2C_ApplicationEventCallback+0x100>)
 8002244:	481d      	ldr	r0, [pc, #116]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 8002246:	f000 f931 	bl	80024ac <UserMessages>
		// Generate STOP condition
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fe7b 	bl	8003f4a <I2C_GenerateSTOPCondition>

		LED_ErrorState();
 8002254:	f7ff fe30 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <I2C_ApplicationEventCallback+0x90>

	} else if ( AppEv == I2C_ERROR_OVR)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10d      	bne.n	800227e <I2C_ApplicationEventCallback+0xb6>
	{
		UserMessages(&husart2, "I2C OVR error occured", DISABLE);
 8002262:	2200      	movs	r2, #0
 8002264:	4919      	ldr	r1, [pc, #100]	@ (80022cc <I2C_ApplicationEventCallback+0x104>)
 8002266:	4815      	ldr	r0, [pc, #84]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 8002268:	f000 f920 	bl	80024ac <UserMessages>
		// Generate STOP condition
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fe6a 	bl	8003f4a <I2C_GenerateSTOPCondition>

		LED_ErrorState();
 8002276:	f7ff fe1f 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 800227a:	bf00      	nop
 800227c:	e7fd      	b.n	800227a <I2C_ApplicationEventCallback+0xb2>

	} else if ( AppEv == USER_INVALID_DEVICE)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	2b07      	cmp	r3, #7
 8002282:	d108      	bne.n	8002296 <I2C_ApplicationEventCallback+0xce>
	{
		UserMessages(&husart2, "I2C DEVICE ID is invalid", DISABLE);
 8002284:	2200      	movs	r2, #0
 8002286:	4912      	ldr	r1, [pc, #72]	@ (80022d0 <I2C_ApplicationEventCallback+0x108>)
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 800228a:	f000 f90f 	bl	80024ac <UserMessages>
		LED_ErrorState();
 800228e:	f7ff fe13 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 8002292:	bf00      	nop
 8002294:	e7fd      	b.n	8002292 <I2C_ApplicationEventCallback+0xca>

	} else if ( AppEv == USER_TIMEOUT)
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d108      	bne.n	80022ae <I2C_ApplicationEventCallback+0xe6>
	{
		UserMessages(&husart2, "I2C Blocking API timed out", DISABLE);
 800229c:	2200      	movs	r2, #0
 800229e:	490d      	ldr	r1, [pc, #52]	@ (80022d4 <I2C_ApplicationEventCallback+0x10c>)
 80022a0:	4806      	ldr	r0, [pc, #24]	@ (80022bc <I2C_ApplicationEventCallback+0xf4>)
 80022a2:	f000 f903 	bl	80024ac <UserMessages>
		LED_ErrorState();
 80022a6:	f7ff fe07 	bl	8001eb8 <LED_ErrorState>
		// Hang in infinite loop
		while(1);
 80022aa:	bf00      	nop
 80022ac:	e7fd      	b.n	80022aa <I2C_ApplicationEventCallback+0xe2>
	}
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08009710 	.word	0x08009710
 80022bc:	200002a0 	.word	0x200002a0
 80022c0:	08009728 	.word	0x08009728
 80022c4:	08009740 	.word	0x08009740
 80022c8:	08009758 	.word	0x08009758
 80022cc:	08009774 	.word	0x08009774
 80022d0:	0800978c 	.word	0x0800978c
 80022d4:	080097a8 	.word	0x080097a8

080022d8 <USART2_IRQHandler>:
 * @return		-
 *
 * @Note		- overwrites weak definition in startup file
 */
void USART2_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	USART_IRQHandling(&husart2);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <USART2_IRQHandler+0x10>)
 80022de:	f003 f9f6 	bl	80056ce <USART_IRQHandling>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200002a0 	.word	0x200002a0

080022ec <USART_ApplicationEventCallback>:
 * @return		- none
 *
 * @Note		-
 */
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
	if (ApEv == USART_EVENT_TX_CMPLT)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <USART_ApplicationEventCallback+0x1c>
	{
		/*
		 * Transmission of data complete
		 * Set Tx State back to ready for next transmission
		 */
		pUSARTHandle->TxBusyState = USART_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
				USART_ReceiveDataIT(&husart2, (uint8_t *)uartRxBuff, sizeof(uartRxBuff));
			}

		}
	}
}
 8002306:	e0a5      	b.n	8002454 <USART_ApplicationEventCallback+0x168>
	} else if (ApEv == USART_EVENT_RX_CMPLT)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d135      	bne.n	800237a <USART_ApplicationEventCallback+0x8e>
		if ((pUSARTHandle->RxCRRcvd == RECEIVED) && (pUSARTHandle->RxLFRcvd == RECEIVED))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002314:	2b01      	cmp	r3, #1
 8002316:	d124      	bne.n	8002362 <USART_ApplicationEventCallback+0x76>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800231e:	2b01      	cmp	r3, #1
 8002320:	d11f      	bne.n	8002362 <USART_ApplicationEventCallback+0x76>
			memcpy(command,uartRxBuff,strlen(uartRxBuff) - 2 );
 8002322:	484e      	ldr	r0, [pc, #312]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 8002324:	f7fd ff24 	bl	8000170 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	3b02      	subs	r3, #2
 800232c:	461a      	mov	r2, r3
 800232e:	494b      	ldr	r1, [pc, #300]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 8002330:	484b      	ldr	r0, [pc, #300]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002332:	f004 fa34 	bl	800679e <memcpy>
			command[strcspn(command, "\n")] = 0;
 8002336:	494b      	ldr	r1, [pc, #300]	@ (8002464 <USART_ApplicationEventCallback+0x178>)
 8002338:	4849      	ldr	r0, [pc, #292]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 800233a:	f004 f96d 	bl	8006618 <strcspn>
 800233e:	4603      	mov	r3, r0
 8002340:	4a47      	ldr	r2, [pc, #284]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002342:	2100      	movs	r1, #0
 8002344:	54d1      	strb	r1, [r2, r3]
			command[strcspn(command, "\r")] = 0;
 8002346:	4948      	ldr	r1, [pc, #288]	@ (8002468 <USART_ApplicationEventCallback+0x17c>)
 8002348:	4845      	ldr	r0, [pc, #276]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 800234a:	f004 f965 	bl	8006618 <strcspn>
 800234e:	4603      	mov	r3, r0
 8002350:	4a43      	ldr	r2, [pc, #268]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002352:	2100      	movs	r1, #0
 8002354:	54d1      	strb	r1, [r2, r3]
			memset(uartRxBuff, '\0', sizeof(uartRxBuff));
 8002356:	2214      	movs	r2, #20
 8002358:	2100      	movs	r1, #0
 800235a:	4840      	ldr	r0, [pc, #256]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 800235c:	f004 f939 	bl	80065d2 <memset>
}
 8002360:	e078      	b.n	8002454 <USART_ApplicationEventCallback+0x168>
			strcpy(command, "Unknown");
 8002362:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002364:	4a41      	ldr	r2, [pc, #260]	@ (800246c <USART_ApplicationEventCallback+0x180>)
 8002366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800236a:	e883 0003 	stmia.w	r3, {r0, r1}
			memset(uartRxBuff, '\0', sizeof(uartRxBuff));
 800236e:	2214      	movs	r2, #20
 8002370:	2100      	movs	r1, #0
 8002372:	483a      	ldr	r0, [pc, #232]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 8002374:	f004 f92d 	bl	80065d2 <memset>
}
 8002378:	e06c      	b.n	8002454 <USART_ApplicationEventCallback+0x168>
	} else if (ApEv == USART_EVENT_IDLE)
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d106      	bne.n	800238e <USART_ApplicationEventCallback+0xa2>
		USART_ClearFlag(pUSARTHandle->pUSARTx, USART_FLAG_IDLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2110      	movs	r1, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f002 ff74 	bl	8005274 <USART_ClearFlag>
}
 800238c:	e062      	b.n	8002454 <USART_ApplicationEventCallback+0x168>
	} else if (ApEv == USART_EVENT_CTS)
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d103      	bne.n	800239c <USART_ApplicationEventCallback+0xb0>
		LED_ErrorState();
 8002394:	f7ff fd90 	bl	8001eb8 <LED_ErrorState>
		while(1);
 8002398:	bf00      	nop
 800239a:	e7fd      	b.n	8002398 <USART_ApplicationEventCallback+0xac>
	} else if (ApEv == USART_EVENT_PE)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d103      	bne.n	80023aa <USART_ApplicationEventCallback+0xbe>
		LED_ErrorState();
 80023a2:	f7ff fd89 	bl	8001eb8 <LED_ErrorState>
		while(1);
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <USART_ApplicationEventCallback+0xba>
	} else if (ApEv == USART_ERR_FE)
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d103      	bne.n	80023b8 <USART_ApplicationEventCallback+0xcc>
		LED_ErrorState();
 80023b0:	f7ff fd82 	bl	8001eb8 <LED_ErrorState>
		while(1);
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <USART_ApplicationEventCallback+0xc8>
	} else if (ApEv == USART_ERR_NE)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d103      	bne.n	80023c6 <USART_ApplicationEventCallback+0xda>
		LED_ErrorState();
 80023be:	f7ff fd7b 	bl	8001eb8 <LED_ErrorState>
		while(1);
 80023c2:	bf00      	nop
 80023c4:	e7fd      	b.n	80023c2 <USART_ApplicationEventCallback+0xd6>
	} else if (ApEv == USART_ERR_ORE)
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	2b07      	cmp	r3, #7
 80023ca:	d103      	bne.n	80023d4 <USART_ApplicationEventCallback+0xe8>
		LED_ErrorState();
 80023cc:	f7ff fd74 	bl	8001eb8 <LED_ErrorState>
		while(1);
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <USART_ApplicationEventCallback+0xe4>
	} else if (ApEv == USART_EVENT_RX_RCVD)
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d13c      	bne.n	8002454 <USART_ApplicationEventCallback+0x168>
		if ((pUSARTHandle->RxCRRcvd == RECEIVED) && (pUSARTHandle->RxLFRcvd == RECEIVED))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d137      	bne.n	8002454 <USART_ApplicationEventCallback+0x168>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d132      	bne.n	8002454 <USART_ApplicationEventCallback+0x168>
			pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_POS_RXNEIE );
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0220 	bic.w	r2, r2, #32
 80023fc:	60da      	str	r2, [r3, #12]
			pUSARTHandle->RxBusyState = USART_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			memcpy(command,uartRxBuff,strlen(uartRxBuff));
 8002406:	4815      	ldr	r0, [pc, #84]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 8002408:	f7fd feb2 	bl	8000170 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	4912      	ldr	r1, [pc, #72]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 8002412:	4813      	ldr	r0, [pc, #76]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002414:	f004 f9c3 	bl	800679e <memcpy>
			command[strcspn(command, "\n")] = 0;
 8002418:	4912      	ldr	r1, [pc, #72]	@ (8002464 <USART_ApplicationEventCallback+0x178>)
 800241a:	4811      	ldr	r0, [pc, #68]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 800241c:	f004 f8fc 	bl	8006618 <strcspn>
 8002420:	4603      	mov	r3, r0
 8002422:	4a0f      	ldr	r2, [pc, #60]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002424:	2100      	movs	r1, #0
 8002426:	54d1      	strb	r1, [r2, r3]
			command[strcspn(command, "\r")] = 0;
 8002428:	490f      	ldr	r1, [pc, #60]	@ (8002468 <USART_ApplicationEventCallback+0x17c>)
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 800242c:	f004 f8f4 	bl	8006618 <strcspn>
 8002430:	4603      	mov	r3, r0
 8002432:	4a0b      	ldr	r2, [pc, #44]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002434:	2100      	movs	r1, #0
 8002436:	54d1      	strb	r1, [r2, r3]
			memset(uartRxBuff, '\0', sizeof(uartRxBuff));
 8002438:	2214      	movs	r2, #20
 800243a:	2100      	movs	r1, #0
 800243c:	4807      	ldr	r0, [pc, #28]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 800243e:	f004 f8c8 	bl	80065d2 <memset>
			if (strcasecmp(command, "") == 0)
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <USART_ApplicationEventCallback+0x174>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <USART_ApplicationEventCallback+0x168>
				USART_ReceiveDataIT(&husart2, (uint8_t *)uartRxBuff, sizeof(uartRxBuff));
 800244a:	2214      	movs	r2, #20
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <USART_ApplicationEventCallback+0x170>)
 800244e:	4808      	ldr	r0, [pc, #32]	@ (8002470 <USART_ApplicationEventCallback+0x184>)
 8002450:	f003 f90d 	bl	800566e <USART_ReceiveDataIT>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000370 	.word	0x20000370
 8002460:	20000384 	.word	0x20000384
 8002464:	080097c4 	.word	0x080097c4
 8002468:	080097c8 	.word	0x080097c8
 800246c:	080097cc 	.word	0x080097cc
 8002470:	200002a0 	.word	0x200002a0

08002474 <Command_Handling>:
 * @return		- none
 *
 * @Note		-
 */
void Command_Handling(USART_Handle_t *pUSARTHandle, char *txBuff)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
	//Command complete, reset buffer
	memset(command, '\0', sizeof(command));
 800247e:	2214      	movs	r2, #20
 8002480:	2100      	movs	r1, #0
 8002482:	4808      	ldr	r0, [pc, #32]	@ (80024a4 <Command_Handling+0x30>)
 8002484:	f004 f8a5 	bl	80065d2 <memset>

	// Send user message in interrupt mode
	UserMessages(pUSARTHandle, txBuff, DISABLE);
 8002488:	2200      	movs	r2, #0
 800248a:	6839      	ldr	r1, [r7, #0]
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f80d 	bl	80024ac <UserMessages>

	// Restart the UART receive interrupt
	USART_ReceiveDataIT(pUSARTHandle, (uint8_t *)uartRxBuff, sizeof(uartRxBuff));
 8002492:	2214      	movs	r2, #20
 8002494:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <Command_Handling+0x34>)
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f003 f8e9 	bl	800566e <USART_ReceiveDataIT>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000384 	.word	0x20000384
 80024a8:	20000370 	.word	0x20000370

080024ac <UserMessages>:
 * @return		- none
 *
 * @Note		- if the USART peripheral is currently busy transmitting, it will wait until that is completed
 */
void UserMessages(USART_Handle_t *pUSARTHandle, char *txBuff, uint8_t BlockingMode)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0aa      	sub	sp, #168	@ 0xa8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	71fb      	strb	r3, [r7, #7]
	char uartTxBuff[150];

	// Wait for any existing interrupt based transfers to complete before sending in blocking mode
	while(pUSARTHandle->TxBusyState != USART_READY);
 80024ba:	bf00      	nop
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1fa      	bne.n	80024bc <UserMessages+0x10>

	// This happens here otherwise the txbuff can be overwritten mid transmit
	//memset(uartTxBuff, 0, sizeof(uartTxBuff));
	strcpy(uartTxBuff, txBuff);
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f950 	bl	8006772 <strcpy>

	// Add \r\n to end of string for formatting in console
	strcat(uartTxBuff, "\r\n");
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fd fe4a 	bl	8000170 <strlen>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4413      	add	r3, r2
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <UserMessages+0x9c>)
 80024e8:	8811      	ldrh	r1, [r2, #0]
 80024ea:	7892      	ldrb	r2, [r2, #2]
 80024ec:	8019      	strh	r1, [r3, #0]
 80024ee:	709a      	strb	r2, [r3, #2]
	if (BlockingMode == DISABLE)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <UserMessages+0x64>
	{
		USART_SendDataIT(pUSARTHandle, (uint8_t *)uartTxBuff, strlen(uartTxBuff));
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd fe38 	bl	8000170 <strlen>
 8002500:	4602      	mov	r2, r0
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	4619      	mov	r1, r3
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f003 f883 	bl	8005614 <USART_SendDataIT>
 800250e:	e00b      	b.n	8002528 <UserMessages+0x7c>
	} else
	{
		USART_SendData(pUSARTHandle, (uint8_t *)uartTxBuff, strlen(uartTxBuff));
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd fe2b 	bl	8000170 <strlen>
 800251a:	4602      	mov	r2, r0
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4619      	mov	r1, r3
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f002 ffd0 	bl	80054c8 <USART_SendData>
	}

	// Only send via SWV if debugger is connected
	if (DEBUGGER_CONNECTED())
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <UserMessages+0xa0>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <UserMessages+0x94>
	{
		printf("%s",uartTxBuff);		// Ensure SWV debugger speed set to clock source (16MHz HSE mode or 48MHz PLL)
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	4805      	ldr	r0, [pc, #20]	@ (8002550 <UserMessages+0xa4>)
 800253c:	f003 ffd4 	bl	80064e8 <iprintf>
	}
}
 8002540:	bf00      	nop
 8002542:	37a8      	adds	r7, #168	@ 0xa8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	080097d4 	.word	0x080097d4
 800254c:	e0042000 	.word	0xe0042000
 8002550:	080097d8 	.word	0x080097d8

08002554 <SetupDevice>:
 * @return		- none
 *
 * @Note		-
 */
void SetupDevice(CAV25M01_Handle_t *pdev)
{
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b090      	sub	sp, #64	@ 0x40
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	uint8_t TimeStamp[12];
	uint8_t SerNum[3];
	char SerialNumber[SerNumSizeBytes];

	sprintf(msgTxBuff, "Enter date (DD/MM/YYYY)");
 800255c:	492a      	ldr	r1, [pc, #168]	@ (8002608 <SetupDevice+0xb4>)
 800255e:	482b      	ldr	r0, [pc, #172]	@ (800260c <SetupDevice+0xb8>)
 8002560:	f003 ffd4 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 8002564:	2201      	movs	r2, #1
 8002566:	4929      	ldr	r1, [pc, #164]	@ (800260c <SetupDevice+0xb8>)
 8002568:	4829      	ldr	r0, [pc, #164]	@ (8002610 <SetupDevice+0xbc>)
 800256a:	f7ff ff9f 	bl	80024ac <UserMessages>

	// also waits for a \r\n to be received
	USART_ReceiveData(&husart2,TimeStamp,12);
 800256e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002572:	220c      	movs	r2, #12
 8002574:	4619      	mov	r1, r3
 8002576:	4826      	ldr	r0, [pc, #152]	@ (8002610 <SetupDevice+0xbc>)
 8002578:	f002 fff4 	bl	8005564 <USART_ReceiveData>

	sprintf(msgTxBuff, "Enter serial number (single digit number)");
 800257c:	4925      	ldr	r1, [pc, #148]	@ (8002614 <SetupDevice+0xc0>)
 800257e:	4823      	ldr	r0, [pc, #140]	@ (800260c <SetupDevice+0xb8>)
 8002580:	f003 ffc4 	bl	800650c <siprintf>
	UserMessages(&husart2, msgTxBuff, ENABLE);
 8002584:	2201      	movs	r2, #1
 8002586:	4921      	ldr	r1, [pc, #132]	@ (800260c <SetupDevice+0xb8>)
 8002588:	4821      	ldr	r0, [pc, #132]	@ (8002610 <SetupDevice+0xbc>)
 800258a:	f7ff ff8f 	bl	80024ac <UserMessages>

	// also waits for a \r\n to be received
	USART_ReceiveData(&husart2,SerNum,3);
 800258e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002592:	2203      	movs	r2, #3
 8002594:	4619      	mov	r1, r3
 8002596:	481e      	ldr	r0, [pc, #120]	@ (8002610 <SetupDevice+0xbc>)
 8002598:	f002 ffe4 	bl	8005564 <USART_ReceiveData>

	// Build serial string
	strcpy(SerialNumber, "STM32_COMMS_BOARD_REV2 ");
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002618 <SetupDevice+0xc4>)
 80025a2:	461c      	mov	r4, r3
 80025a4:	4615      	mov	r5, r2
 80025a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025ae:	e884 0003 	stmia.w	r4, {r0, r1}
	strncat(SerialNumber, (char *)TimeStamp, 10);
 80025b2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	220a      	movs	r2, #10
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 f83c 	bl	800663a <strncat>
	strcat(SerialNumber, " #");
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fdd2 	bl	8000170 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	4413      	add	r3, r2
 80025d6:	4a11      	ldr	r2, [pc, #68]	@ (800261c <SetupDevice+0xc8>)
 80025d8:	8811      	ldrh	r1, [r2, #0]
 80025da:	7892      	ldrb	r2, [r2, #2]
 80025dc:	8019      	strh	r1, [r3, #0]
 80025de:	709a      	strb	r2, [r3, #2]
	strncat(SerialNumber, (char *)SerNum, 1);
 80025e0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2201      	movs	r2, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 f825 	bl	800663a <strncat>

	// Store the serial
	CAV25M01_SerNum(pdev, SerialNumber, STORE);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	2201      	movs	r2, #1
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fe5b 	bl	80032b4 <CAV25M01_SerNum>
}
 80025fe:	bf00      	nop
 8002600:	3740      	adds	r7, #64	@ 0x40
 8002602:	46bd      	mov	sp, r7
 8002604:	bdb0      	pop	{r4, r5, r7, pc}
 8002606:	bf00      	nop
 8002608:	080097dc 	.word	0x080097dc
 800260c:	200002d8 	.word	0x200002d8
 8002610:	200002a0 	.word	0x200002a0
 8002614:	080097f4 	.word	0x080097f4
 8002618:	08009820 	.word	0x08009820
 800261c:	08009838 	.word	0x08009838

08002620 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
// function to send data to ITM FIFO
void ITM_SendChar(uint8_t ch)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <ITM_SendChar+0x44>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <ITM_SendChar+0x44>)
 8002630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002634:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <ITM_SendChar+0x48>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a0b      	ldr	r2, [pc, #44]	@ (8002668 <ITM_SendChar+0x48>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002642:	bf00      	nop
 8002644:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f8      	beq.n	8002644 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002652:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	6013      	str	r3, [r2, #0]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	e000edfc 	.word	0xe000edfc
 8002668:	e0000e00 	.word	0xe0000e00

0800266c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return 1;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <_kill>:

int _kill(int pid, int sig)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002684:	f004 f848 	bl	8006718 <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	2216      	movs	r2, #22
 800268c:	601a      	str	r2, [r3, #0]
  return -1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_exit>:

void _exit (int status)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026a2:	f04f 31ff 	mov.w	r1, #4294967295
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffe7 	bl	800267a <_kill>
  while (1) {}    /* Make sure we hang here */
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <_exit+0x12>

080026b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e00a      	b.n	80026d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026c2:	f3af 8000 	nop.w
 80026c6:	4601      	mov	r1, r0
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	60ba      	str	r2, [r7, #8]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbf0      	blt.n	80026c2 <_read+0x12>
  }

  return len;
 80026e0:	687b      	ldr	r3, [r7, #4]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e009      	b.n	8002710 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	60ba      	str	r2, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff8b 	bl	8002620 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbf1      	blt.n	80026fc <_write+0x12>
  }
  return len;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_close>:

int _close(int file)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002748:	605a      	str	r2, [r3, #4]
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
	...

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	@ (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	@ (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f003 ffb0 	bl	8006718 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20005000 	.word	0x20005000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	20000398 	.word	0x20000398
 80027ec:	200004f0 	.word	0x200004f0

080027f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027f0:	480d      	ldr	r0, [pc, #52]	@ (8002828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027f8:	480c      	ldr	r0, [pc, #48]	@ (800282c <LoopForever+0x6>)
  ldr r1, =_edata
 80027fa:	490d      	ldr	r1, [pc, #52]	@ (8002830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002834 <LoopForever+0xe>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002800:	e002      	b.n	8002808 <LoopCopyDataInit>

08002802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002806:	3304      	adds	r3, #4

08002808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800280c:	d3f9      	bcc.n	8002802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002810:	4c0a      	ldr	r4, [pc, #40]	@ (800283c <LoopForever+0x16>)
  movs r3, #0
 8002812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002814:	e001      	b.n	800281a <LoopFillZerobss>

08002816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002818:	3204      	adds	r2, #4

0800281a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800281c:	d3fb      	bcc.n	8002816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800281e:	f003 ff81 	bl	8006724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002822:	f7fe fc8b 	bl	800113c <main>

08002826 <LoopForever>:

LoopForever:
  b LoopForever
 8002826:	e7fe      	b.n	8002826 <LoopForever>
  ldr   r0, =_estack
 8002828:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800282c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002830:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002834:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8002838:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800283c:	200004ec 	.word	0x200004ec

08002840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002840:	e7fe      	b.n	8002840 <ADC1_2_IRQHandler>

08002842 <ADXL343_Init>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
I2C_ERROR_CODE ADXL343_Init(ADXL343_Handle_t *dev)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af02      	add	r7, sp, #8
 8002848:	6078      	str	r0, [r7, #4]
	uint8_t RxBuffer, TxBuffer;

	/*
	 * 1. Confirm we can communicate with the ADXL343 by reading the DEVICE ID
	 */
	status = I2C_Mem_MasterReceiveData(dev->i2cHandle, &RxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_DevID, I2C_MAX_TIMEOUT_MS);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	f107 010e 	add.w	r1, r7, #14
 8002856:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800285a:	9201      	str	r2, [sp, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	f001 fee2 	bl	800462a <I2C_Mem_MasterReceiveData>
 8002866:	4603      	mov	r3, r0
 8002868:	73fb      	strb	r3, [r7, #15]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <ADXL343_Init+0x32>
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	e066      	b.n	8002942 <ADXL343_Init+0x100>
	if (RxBuffer != ADXL343_DevID) return USER_INVALID_DEVICE;
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	2be5      	cmp	r3, #229	@ 0xe5
 8002878:	d001      	beq.n	800287e <ADXL343_Init+0x3c>
 800287a:	2307      	movs	r3, #7
 800287c:	e061      	b.n	8002942 <ADXL343_Init+0x100>

	/*
	 * 2. Set the ADXL343 BW_Rate to 6.25Hz & LOW_POWER Disabled
	 */
	TxBuffer = 0x6;
 800287e:	2306      	movs	r3, #6
 8002880:	737b      	strb	r3, [r7, #13]
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_BW_RATE, I2C_MAX_TIMEOUT_MS);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	f107 010d 	add.w	r1, r7, #13
 800288e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002892:	9201      	str	r2, [sp, #4]
 8002894:	222c      	movs	r2, #44	@ 0x2c
 8002896:	9200      	str	r2, [sp, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	f001 fde5 	bl	8004468 <I2C_Mem_MasterSendData>
 800289e:	4603      	mov	r3, r0
 80028a0:	73fb      	strb	r3, [r7, #15]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <ADXL343_Init+0x6a>
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	e04a      	b.n	8002942 <ADXL343_Init+0x100>
	 * 	+/- 2g range
	 * 	right justified MSB mode with sign extension
	 * 	10 bit mode
	 * 	interrupts are active high
	 */
	TxBuffer = 0x0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	737b      	strb	r3, [r7, #13]
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_DATA_FORMAT, I2C_MAX_TIMEOUT_MS);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	791b      	ldrb	r3, [r3, #4]
 80028b8:	f107 010d 	add.w	r1, r7, #13
 80028bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	2231      	movs	r2, #49	@ 0x31
 80028c4:	9200      	str	r2, [sp, #0]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f001 fdce 	bl	8004468 <I2C_Mem_MasterSendData>
 80028cc:	4603      	mov	r3, r0
 80028ce:	73fb      	strb	r3, [r7, #15]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <ADXL343_Init+0x98>
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	e033      	b.n	8002942 <ADXL343_Init+0x100>
	/*
	 * 4. Configure the INT MAP register
	 * 	DATA READY interrupt set to INT1
	 * 	all other interrupts to INT2
	 */
	TxBuffer = 0x7F;
 80028da:	237f      	movs	r3, #127	@ 0x7f
 80028dc:	737b      	strb	r3, [r7, #13]
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_INT_MAP, I2C_MAX_TIMEOUT_MS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	791b      	ldrb	r3, [r3, #4]
 80028e6:	f107 010d 	add.w	r1, r7, #13
 80028ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	222f      	movs	r2, #47	@ 0x2f
 80028f2:	9200      	str	r2, [sp, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f001 fdb7 	bl	8004468 <I2C_Mem_MasterSendData>
 80028fa:	4603      	mov	r3, r0
 80028fc:	73fb      	strb	r3, [r7, #15]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <ADXL343_Init+0xc6>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	e01c      	b.n	8002942 <ADXL343_Init+0x100>

	/*
	 * 5. Configure the INT ENABLE register
	 * 	Disable all interrupts (so that resets occur from a known state)
	 */
	status = ADXL343_DisableInterrupts(dev);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f837 	bl	800297c <ADXL343_DisableInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <ADXL343_Init+0xda>
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	e012      	b.n	8002942 <ADXL343_Init+0x100>

	/*
	 * 6. Configure the POWER CTL register
	 * 	Set the device into measure mode
	 */
	TxBuffer = 0x8;
 800291c:	2308      	movs	r3, #8
 800291e:	737b      	strb	r3, [r7, #13]
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_POWER_CTL, I2C_MAX_TIMEOUT_MS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	f107 010d 	add.w	r1, r7, #13
 800292c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002930:	9201      	str	r2, [sp, #4]
 8002932:	222d      	movs	r2, #45	@ 0x2d
 8002934:	9200      	str	r2, [sp, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	f001 fd96 	bl	8004468 <I2C_Mem_MasterSendData>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
	return status;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <ADXL343_EnDataReadyInt>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
I2C_ERROR_CODE ADXL343_EnDataReadyInt(ADXL343_Handle_t *dev)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af02      	add	r7, sp, #8
 8002950:	6078      	str	r0, [r7, #4]
	uint8_t TxBuffer = 0x80;
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	73fb      	strb	r3, [r7, #15]
	return I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_INT_ENABLE, I2C_MAX_TIMEOUT_MS);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	791b      	ldrb	r3, [r3, #4]
 800295e:	f107 010f 	add.w	r1, r7, #15
 8002962:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002966:	9201      	str	r2, [sp, #4]
 8002968:	222e      	movs	r2, #46	@ 0x2e
 800296a:	9200      	str	r2, [sp, #0]
 800296c:	2201      	movs	r2, #1
 800296e:	f001 fd7b 	bl	8004468 <I2C_Mem_MasterSendData>
 8002972:	4603      	mov	r3, r0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <ADXL343_DisableInterrupts>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
I2C_ERROR_CODE ADXL343_DisableInterrupts(ADXL343_Handle_t *dev)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	6078      	str	r0, [r7, #4]
	uint8_t TxBuffer = 0x0;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
	return I2C_Mem_MasterSendData(dev->i2cHandle, &TxBuffer, 1, dev->SlaveAddr, ADXL343_Reg_INT_ENABLE, I2C_MAX_TIMEOUT_MS);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	f107 010f 	add.w	r1, r7, #15
 8002994:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002998:	9201      	str	r2, [sp, #4]
 800299a:	222e      	movs	r2, #46	@ 0x2e
 800299c:	9200      	str	r2, [sp, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	f001 fd62 	bl	8004468 <I2C_Mem_MasterSendData>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ADXL343_CalibrateFlat>:
 *
 * @Note		- It is important that the PCB be laying flat, facing upwards and does not tilt
 * 				  whilst calibration is taking place. Ideally this function would have a timeout.
 */
I2C_ERROR_CODE ADXL343_CalibrateFlat(ADXL343_Handle_t *dev, GPIO_Handle_t *pInt1)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	@ 0x30
 80029b2:	af02      	add	r7, sp, #8
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
	I2C_ERROR_CODE status;
	uint8_t readings = 10, index = 0, reset = 0, TIMEDOUT = 0, RawData[6],  Xoff, Yoff, Zoff;
 80029b8:	230a      	movs	r3, #10
 80029ba:	75fb      	strb	r3, [r7, #23]
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029c2:	2300      	movs	r3, #0
 80029c4:	753b      	strb	r3, [r7, #20]
 80029c6:	2300      	movs	r3, #0
 80029c8:	75bb      	strb	r3, [r7, #22]
	float   Xo=0.0f, Yo=0.0f, Zo=0.0f;
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]

	// 1. Reset offset registers to ensure valid calibration
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &reset, 1, dev->SlaveAddr, ADXL343_Reg_OFSX, I2C_MAX_TIMEOUT_MS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	791b      	ldrb	r3, [r3, #4]
 80029e4:	f107 0114 	add.w	r1, r7, #20
 80029e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	221e      	movs	r2, #30
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f001 fd38 	bl	8004468 <I2C_Mem_MasterSendData>
 80029f8:	4603      	mov	r3, r0
 80029fa:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 80029fc:	7d7b      	ldrb	r3, [r7, #21]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <ADXL343_CalibrateFlat+0x58>
 8002a02:	7d7b      	ldrb	r3, [r7, #21]
 8002a04:	e0ef      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>

	status = I2C_Mem_MasterSendData(dev->i2cHandle, &reset, 1, dev->SlaveAddr, ADXL343_Reg_OFSY, I2C_MAX_TIMEOUT_MS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	791b      	ldrb	r3, [r3, #4]
 8002a0e:	f107 0114 	add.w	r1, r7, #20
 8002a12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	221f      	movs	r2, #31
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f001 fd23 	bl	8004468 <I2C_Mem_MasterSendData>
 8002a22:	4603      	mov	r3, r0
 8002a24:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002a26:	7d7b      	ldrb	r3, [r7, #21]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <ADXL343_CalibrateFlat+0x82>
 8002a2c:	7d7b      	ldrb	r3, [r7, #21]
 8002a2e:	e0da      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>

	status = I2C_Mem_MasterSendData(dev->i2cHandle, &reset, 1, dev->SlaveAddr, ADXL343_Reg_OFSZ, I2C_MAX_TIMEOUT_MS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	f107 0114 	add.w	r1, r7, #20
 8002a3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a40:	9201      	str	r2, [sp, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f001 fd0e 	bl	8004468 <I2C_Mem_MasterSendData>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002a50:	7d7b      	ldrb	r3, [r7, #21]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d03c      	beq.n	8002ad0 <ADXL343_CalibrateFlat+0x122>
 8002a56:	7d7b      	ldrb	r3, [r7, #21]
 8002a58:	e0c5      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>
	//SYST_STARTorSTOP(ENABLE);
	while ((index < readings) && !TIMEDOUT)
	{
		//TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);

		if (dev->NewData == READY) // Check if Data ready
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7fdb      	ldrb	r3, [r3, #31]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d136      	bne.n	8002ad0 <ADXL343_CalibrateFlat+0x122>
		{
			status = ADXL343_ReadData(dev, RawData, pInt1);
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8bf 	bl	8002bee <ADXL343_ReadData>
 8002a70:	4603      	mov	r3, r0
 8002a72:	757b      	strb	r3, [r7, #21]
			if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002a74:	7d7b      	ldrb	r3, [r7, #21]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <ADXL343_CalibrateFlat+0xd0>
 8002a7a:	7d7b      	ldrb	r3, [r7, #21]
 8002a7c:	e0b3      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>
			ADXL343_CalcGForce(RawData, &dev->Xg, &dev->Yg, &dev->Zg);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0110 	add.w	r1, r3, #16
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0214 	add.w	r2, r3, #20
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3318      	adds	r3, #24
 8002a8e:	f107 000c 	add.w	r0, r7, #12
 8002a92:	f000 f8da 	bl	8002c4a <ADXL343_CalcGForce>
			Xo = Xo + dev->Xg;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6a38      	ldr	r0, [r7, #32]
 8002a9e:	f7fe f859 	bl	8000b54 <__addsf3>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	623b      	str	r3, [r7, #32]
			Yo = Yo + dev->Yg;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	69f8      	ldr	r0, [r7, #28]
 8002aae:	f7fe f851 	bl	8000b54 <__addsf3>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	61fb      	str	r3, [r7, #28]
			Zo = Zo + dev->Zg;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4619      	mov	r1, r3
 8002abc:	69b8      	ldr	r0, [r7, #24]
 8002abe:	f7fe f849 	bl	8000b54 <__addsf3>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]
			index++;
 8002ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aca:	3301      	adds	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while ((index < readings) && !TIMEDOUT)
 8002ad0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d202      	bcs.n	8002ae0 <ADXL343_CalibrateFlat+0x132>
 8002ada:	7dbb      	ldrb	r3, [r7, #22]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0bc      	beq.n	8002a5a <ADXL343_CalibrateFlat+0xac>
//		SYST_STARTorSTOP(DISABLE);
//		return I2C_TIMEOUT_ERROR;
//	}

	// 3. Average results
	Xo = Xo/readings;
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe f8ea 	bl	8000cbc <__aeabi_i2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4619      	mov	r1, r3
 8002aec:	6a38      	ldr	r0, [r7, #32]
 8002aee:	f7fe f9ed 	bl	8000ecc <__aeabi_fdiv>
 8002af2:	4603      	mov	r3, r0
 8002af4:	623b      	str	r3, [r7, #32]
	Yo = Yo/readings;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f8df 	bl	8000cbc <__aeabi_i2f>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	69f8      	ldr	r0, [r7, #28]
 8002b04:	f7fe f9e2 	bl	8000ecc <__aeabi_fdiv>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	61fb      	str	r3, [r7, #28]
	Zo = 1 - (Zo/readings);
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe f8d4 	bl	8000cbc <__aeabi_i2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4619      	mov	r1, r3
 8002b18:	69b8      	ldr	r0, [r7, #24]
 8002b1a:	f7fe f9d7 	bl	8000ecc <__aeabi_fdiv>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002b26:	f7fe f813 	bl	8000b50 <__aeabi_fsub>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	61bb      	str	r3, [r7, #24]

	// 4. Convert to uint8_t twos complement
	Xoff = -ADXL343_OffsetComplementCalc(Xo);
 8002b2e:	6a38      	ldr	r0, [r7, #32]
 8002b30:	f000 f9ca 	bl	8002ec8 <ADXL343_OffsetComplementCalc>
 8002b34:	4603      	mov	r3, r0
 8002b36:	425b      	negs	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	72fb      	strb	r3, [r7, #11]
	Yoff = -ADXL343_OffsetComplementCalc(Yo);
 8002b3c:	69f8      	ldr	r0, [r7, #28]
 8002b3e:	f000 f9c3 	bl	8002ec8 <ADXL343_OffsetComplementCalc>
 8002b42:	4603      	mov	r3, r0
 8002b44:	425b      	negs	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	72bb      	strb	r3, [r7, #10]
	Zoff = ADXL343_OffsetComplementCalc(Zo);
 8002b4a:	69b8      	ldr	r0, [r7, #24]
 8002b4c:	f000 f9bc 	bl	8002ec8 <ADXL343_OffsetComplementCalc>
 8002b50:	4603      	mov	r3, r0
 8002b52:	727b      	strb	r3, [r7, #9]

	// 5. Write offset values to the accelerometer offset registers
	status = I2C_Mem_MasterSendData(dev->i2cHandle, &Xoff, 1, dev->SlaveAddr, ADXL343_Reg_OFSX, I2C_MAX_TIMEOUT_MS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	791b      	ldrb	r3, [r3, #4]
 8002b5c:	f107 010b 	add.w	r1, r7, #11
 8002b60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	221e      	movs	r2, #30
 8002b68:	9200      	str	r2, [sp, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f001 fc7c 	bl	8004468 <I2C_Mem_MasterSendData>
 8002b70:	4603      	mov	r3, r0
 8002b72:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002b74:	7d7b      	ldrb	r3, [r7, #21]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <ADXL343_CalibrateFlat+0x1d0>
 8002b7a:	7d7b      	ldrb	r3, [r7, #21]
 8002b7c:	e033      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>

	status = I2C_Mem_MasterSendData(dev->i2cHandle, &Yoff, 1, dev->SlaveAddr, ADXL343_Reg_OFSY, I2C_MAX_TIMEOUT_MS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	791b      	ldrb	r3, [r3, #4]
 8002b86:	f107 010a 	add.w	r1, r7, #10
 8002b8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	221f      	movs	r2, #31
 8002b92:	9200      	str	r2, [sp, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f001 fc67 	bl	8004468 <I2C_Mem_MasterSendData>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002b9e:	7d7b      	ldrb	r3, [r7, #21]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <ADXL343_CalibrateFlat+0x1fa>
 8002ba4:	7d7b      	ldrb	r3, [r7, #21]
 8002ba6:	e01e      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>

	status = I2C_Mem_MasterSendData(dev->i2cHandle, &Zoff, 1, dev->SlaveAddr, ADXL343_Reg_OFSZ, I2C_MAX_TIMEOUT_MS);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	f107 0109 	add.w	r1, r7, #9
 8002bb4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	9200      	str	r2, [sp, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f001 fc52 	bl	8004468 <I2C_Mem_MasterSendData>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	757b      	strb	r3, [r7, #21]
	if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002bc8:	7d7b      	ldrb	r3, [r7, #21]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <ADXL343_CalibrateFlat+0x224>
 8002bce:	7d7b      	ldrb	r3, [r7, #21]
 8002bd0:	e009      	b.n	8002be6 <ADXL343_CalibrateFlat+0x238>

	dev->Xoff = Xoff;
 8002bd2:	7afa      	ldrb	r2, [r7, #11]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	771a      	strb	r2, [r3, #28]
	dev->Yoff = Yoff;
 8002bd8:	7aba      	ldrb	r2, [r7, #10]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	775a      	strb	r2, [r3, #29]
	dev->Zoff = Zoff;
 8002bde:	7a7a      	ldrb	r2, [r7, #9]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	779a      	strb	r2, [r3, #30]

	return status;
 8002be4:	7d7b      	ldrb	r3, [r7, #21]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3728      	adds	r7, #40	@ 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <ADXL343_ReadData>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
I2C_ERROR_CODE ADXL343_ReadData(ADXL343_Handle_t *dev, uint8_t *pRawData, GPIO_Handle_t *pInt1)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b088      	sub	sp, #32
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	I2C_ERROR_CODE status;
	dev->NewData = nREADY;	// Clear interrupt flag
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	77da      	strb	r2, [r3, #31]
	// Keep reading data until ACC_INT1 goes low
	while ( GPIO_ReadFromInputPin(pInt1->pGPIOx, pInt1->GPIO_PinConfig.GPIO_PinNumber) )
 8002c00:	e013      	b.n	8002c2a <ADXL343_ReadData+0x3c>
	{
		status = I2C_Mem_MasterReceiveData(dev->i2cHandle, pRawData, 6, dev->SlaveAddr, ADXL343_Reg_DATAX0, I2C_MAX_TIMEOUT_MS);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	791b      	ldrb	r3, [r3, #4]
 8002c0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	2232      	movs	r2, #50	@ 0x32
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	2206      	movs	r2, #6
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	f001 fd07 	bl	800462a <I2C_Mem_MasterReceiveData>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	75fb      	strb	r3, [r7, #23]
		if (status != I2C_NO_ERROR) return status; // break out of function if error
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <ADXL343_ReadData+0x3c>
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
 8002c28:	e00b      	b.n	8002c42 <ADXL343_ReadData+0x54>
	while ( GPIO_ReadFromInputPin(pInt1->pGPIOx, pInt1->GPIO_PinConfig.GPIO_PinNumber) )
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	791b      	ldrb	r3, [r3, #4]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f001 f909 	bl	8003e4c <GPIO_ReadFromInputPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e0      	bne.n	8002c02 <ADXL343_ReadData+0x14>
	}
	return status;
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <ADXL343_CalcGForce>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
void ADXL343_CalcGForce(uint8_t *pRawData, float *pXg, float *pYg, float *pZg)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
	int16_t dataX, dataY, dataZ;

	// 1. combine the RAW data MSB/LSB into 16 bit
	dataX = (((int16_t)pRawData[1] << 8) | pRawData[0]);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	82fb      	strh	r3, [r7, #22]
	dataY = (((int16_t)pRawData[3] << 8) | pRawData[2]);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3303      	adds	r3, #3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	82bb      	strh	r3, [r7, #20]
	dataZ = (((int16_t)pRawData[5] << 8) | pRawData[4]);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3305      	adds	r3, #5
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	b21a      	sxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	827b      	strh	r3, [r7, #18]

	//2. Calculate g force
	if (dataX & 0x200)	// negative x acceleration, perform twos complement
 8002c98:	8afb      	ldrh	r3, [r7, #22]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <ADXL343_CalcGForce+0x80>
	{
		*pXg = (((~dataX + 1) & 0x1FF) / ADXL343_scale_factor) * -1;
 8002ca2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ca6:	425b      	negs	r3, r3
 8002ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f805 	bl	8000cbc <__aeabi_i2f>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f907 	bl	8000ecc <__aeabi_fdiv>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e00f      	b.n	8002cea <ADXL343_CalcGForce+0xa0>
	}
	else				// positive x acceleration
	{
		*pXg = (dataX & 0x1FF) / ADXL343_scale_factor;
 8002cca:	8afb      	ldrh	r3, [r7, #22]
 8002ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fff3 	bl	8000cbc <__aeabi_i2f>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe f8f5 	bl	8000ecc <__aeabi_fdiv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	601a      	str	r2, [r3, #0]
	}

	if (dataY & 0x200)	// negative y acceleration, perform twos complement
 8002cea:	8abb      	ldrh	r3, [r7, #20]
 8002cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <ADXL343_CalcGForce+0xd2>
	{
		*pYg = (((~dataY + 1) & 0x1FF) / ADXL343_scale_factor) * -1;
 8002cf4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cf8:	425b      	negs	r3, r3
 8002cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd ffdc 	bl	8000cbc <__aeabi_i2f>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f8de 	bl	8000ecc <__aeabi_fdiv>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e00f      	b.n	8002d3c <ADXL343_CalcGForce+0xf2>
	}
	else				// positive y acceleration
	{
		*pYg = (dataY & 0x1FF) / ADXL343_scale_factor;
 8002d1c:	8abb      	ldrh	r3, [r7, #20]
 8002d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd ffca 	bl	8000cbc <__aeabi_i2f>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe f8cc 	bl	8000ecc <__aeabi_fdiv>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
	}

	if (dataZ & 0x200) // negative z acceleration, perform twos complement
 8002d3c:	8a7b      	ldrh	r3, [r7, #18]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <ADXL343_CalcGForce+0x124>
	{
		*pZg = (((~dataZ + 1) & 0x1FF) / ADXL343_scale_factor) * -1;
 8002d46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ffb3 	bl	8000cbc <__aeabi_i2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe f8b5 	bl	8000ecc <__aeabi_fdiv>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	601a      	str	r2, [r3, #0]
	else				// positive z acceleration
	{
		*pZg = (dataZ & 0x1FF) / ADXL343_scale_factor;
	}

	return;
 8002d6c:	e010      	b.n	8002d90 <ADXL343_CalcGForce+0x146>
		*pZg = (dataZ & 0x1FF) / ADXL343_scale_factor;
 8002d6e:	8a7b      	ldrh	r3, [r7, #18]
 8002d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd ffa1 	bl	8000cbc <__aeabi_i2f>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe f8a3 	bl	8000ecc <__aeabi_fdiv>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
	return;
 8002d8e:	bf00      	nop
}
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <ADXL343_PitchRollCalc>:
 * @Note		-  Pitch; front of PCB points down results in negative pitch
 * 				   Roll;  left side of PCB points down results in negative roll
 *                 if Zg is negative, all LEDs turn on
 */
void ADXL343_PitchRollCalc(ADXL343_Handle_t *dev, uint8_t rawData[6])
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
	float Xg, Yg, Zg;
	ADXL343_CalcGForce(rawData, &Xg, &Yg, &Zg);
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	f107 0210 	add.w	r2, r7, #16
 8002daa:	f107 0114 	add.w	r1, r7, #20
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f7ff ff4b 	bl	8002c4a <ADXL343_CalcGForce>
	dev->Pitch = atan(Yg/sqrt(Xg * Xg + Zg * Zg)) * 57.3; // pitch = atan((-Accx)/sqrt(Accy^2+Accz^2)), *57.3 converts from radians to degrees
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fb46 	bl	8000448 <__aeabi_f2d>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	460d      	mov	r5, r1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd ffcc 	bl	8000d64 <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461e      	mov	r6, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd ffc4 	bl	8000d64 <__aeabi_fmul>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	4630      	mov	r0, r6
 8002de2:	f7fd feb7 	bl	8000b54 <__addsf3>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb2d 	bl	8000448 <__aeabi_f2d>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f005 fd19 	bl	800882c <sqrt>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4629      	mov	r1, r5
 8002e02:	f7fd fca3 	bl	800074c <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f005 fd33 	bl	8008878 <atan>
 8002e12:	a32b      	add	r3, pc, #172	@ (adr r3, 8002ec0 <ADXL343_PitchRollCalc+0x128>)
 8002e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e18:	f7fd fb6e 	bl	80004f8 <__aeabi_dmul>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	f7fd fe40 	bl	8000aa8 <__aeabi_d2f>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]
	dev->Roll = atan(-Xg/sqrt(Yg * Yg + Zg * Zg)) * 57.3; // roll = atan(AccY/sqrt(Accx^2 + Accz^2)), *57.3 converts from radians to degrees
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb07 	bl	8000448 <__aeabi_f2d>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ff8d 	bl	8000d64 <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461e      	mov	r6, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ff85 	bl	8000d64 <__aeabi_fmul>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4630      	mov	r0, r6
 8002e60:	f7fd fe78 	bl	8000b54 <__addsf3>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd faee 	bl	8000448 <__aeabi_f2d>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f005 fcda 	bl	800882c <sqrt>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4629      	mov	r1, r5
 8002e80:	f7fd fc64 	bl	800074c <__aeabi_ddiv>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f005 fcf4 	bl	8008878 <atan>
 8002e90:	a30b      	add	r3, pc, #44	@ (adr r3, 8002ec0 <ADXL343_PitchRollCalc+0x128>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	f7fd fb2f 	bl	80004f8 <__aeabi_dmul>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f7fd fe01 	bl	8000aa8 <__aeabi_d2f>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]
	dev->Zg = Zg;
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	619a      	str	r2, [r3, #24]
	if (dev->Zg < 0)
	{

	}

	return;
 8002eb2:	bf00      	nop
}
 8002eb4:	371c      	adds	r7, #28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	66666666 	.word	0x66666666
 8002ec4:	404ca666 	.word	0x404ca666

08002ec8 <ADXL343_OffsetComplementCalc>:



// Might not be used
uint8_t ADXL343_OffsetComplementCalc(float val)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	uint8_t Offset;

	int gOff = (int)(round(val/ADXL343_OffsetReg_ScaleFactor));
 8002ed0:	4911      	ldr	r1, [pc, #68]	@ (8002f18 <ADXL343_OffsetComplementCalc+0x50>)
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fffa 	bl	8000ecc <__aeabi_fdiv>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fab4 	bl	8000448 <__aeabi_f2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f005 ff30 	bl	8008d4c <round>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fd fdb0 	bl	8000a58 <__aeabi_d2iz>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60bb      	str	r3, [r7, #8]
	/*
	uint8_t *array;
	array = (uint8_t*)(&val);
	*/

	if (gOff < 0)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da02      	bge.n	8002f08 <ADXL343_OffsetComplementCalc+0x40>
	{
		Offset = ~(uint8_t)(gOff*-1) + 1;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e001      	b.n	8002f0c <ADXL343_OffsetComplementCalc+0x44>
	}
	else
	{
		Offset = (uint8_t)gOff;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	73fb      	strb	r3, [r7, #15]
	}

	return Offset;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	3c7f9724 	.word	0x3c7f9724

08002f1c <CAV25M01_Init>:
 * @return		- 1 for success, 0 for fail
 *
 * @Note		-
 */
uint8_t CAV25M01_Init(CAV25M01_Handle_t *pdev)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

	/*
	 * 1. Enable WPEN bit to enable nWP pin
	 * 	  Enable BP bits to enable block protect
	 */
	statusReg = CAV25M01_ReadStatusReg(pdev);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f904 	bl	8003132 <CAV25M01_ReadStatusReg>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]
	statusReg |= WPENmask;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	73fb      	strb	r3, [r7, #15]
	statusReg |= BPmask;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f043 030c 	orr.w	r3, r3, #12
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	73fb      	strb	r3, [r7, #15]
	//statusReg = 0;
	CAV25M01_WriteStatusReg(pdev, &statusReg);
 8002f42:	f107 030f 	add.w	r3, r7, #15
 8002f46:	4619      	mov	r1, r3
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f927 	bl	800319c <CAV25M01_WriteStatusReg>

	//2. read data stored in @U6_TestAddr
	txData[0] = OPCODE_READ;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	763b      	strb	r3, [r7, #24]
	txData[1] = (uint8_t)(U6_TestAddr >> 16);
 8002f52:	2300      	movs	r3, #0
 8002f54:	767b      	strb	r3, [r7, #25]
	txData[2] = (uint8_t)(U6_TestAddr >> 8);
 8002f56:	2305      	movs	r3, #5
 8002f58:	76bb      	strb	r3, [r7, #26]
	txData[3] = (uint8_t)(U6_TestAddr);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	76fb      	strb	r3, [r7, #27]
	CAV25M01_SendReceive(pdev, txData, rxData, 5);
 8002f5e:	f107 0210 	add.w	r2, r7, #16
 8002f62:	f107 0118 	add.w	r1, r7, #24
 8002f66:	2305      	movs	r3, #5
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f874 	bl	8003056 <CAV25M01_SendReceive>
	origVal = rxData[4];
 8002f6e:	7d3b      	ldrb	r3, [r7, #20]
 8002f70:	77fb      	strb	r3, [r7, #31]

	//3. Send the inverse of the read data
	txData[0] = OPCODE_WRITE;
 8002f72:	2302      	movs	r3, #2
 8002f74:	763b      	strb	r3, [r7, #24]
	txData[4] = ~origVal;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	773b      	strb	r3, [r7, #28]
	CAV25M01_SendData(pdev, txData, 5);
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	2205      	movs	r2, #5
 8002f84:	4619      	mov	r1, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f817 	bl	8002fba <CAV25M01_SendData>

	//4. Read the data location again
	txData[0] = OPCODE_READ;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	763b      	strb	r3, [r7, #24]
	txData[4] = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	773b      	strb	r3, [r7, #28]
	CAV25M01_SendReceive(pdev, txData, rxData, 5);
 8002f94:	f107 0210 	add.w	r2, r7, #16
 8002f98:	f107 0118 	add.w	r1, r7, #24
 8002f9c:	2305      	movs	r3, #5
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f859 	bl	8003056 <CAV25M01_SendReceive>

	//5. Check write operation was successful
	if (rxData[4] != origVal)
 8002fa4:	7d3b      	ldrb	r3, [r7, #20]
 8002fa6:	7ffa      	ldrb	r2, [r7, #31]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <CAV25M01_Init+0x94>
	{
		// Init passed
		return 1;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <CAV25M01_Init+0x96>
	} else
	{
		// Init failed
		return 0;
 8002fb0:	2300      	movs	r3, #0
	}

}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <CAV25M01_SendData>:
 *
 * @Note		- this is blocking/polling based implementation, meaning the processor cannot execute other steps
 * 				  whilst executing it
 */
void CAV25M01_SendData(CAV25M01_Handle_t *pdev, uint8_t *txData, uint8_t bytes)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
	CAV25M01_enableWriteMode(pdev);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fa63 	bl	8003494 <CAV25M01_enableWriteMode>
	CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f88f 	bl	80030f2 <CAV25M01_DevReady>

	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable WP
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f000 ff49 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);	// Disable HOLD
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	791b      	ldrb	r3, [r3, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f000 ff3f 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);	// Enable Chip select
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	791b      	ldrb	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	4619      	mov	r1, r3
 800300c:	f000 ff35 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendData(pdev->pSPIhandle->pSPI, txData, bytes);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fe53 	bl	8004cc6 <SPI_SendData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET); 	// Disable Chip select
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	791b      	ldrb	r3, [r3, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	4619      	mov	r1, r3
 8003030:	f000 ff23 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 	// Enable WP
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	4619      	mov	r1, r3
 8003044:	f000 ff19 	bl	8003e7a <GPIO_WriteToOutputPin>

	CAV25M01_disableWriteMode(pdev);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fa88 	bl	800355e <CAV25M01_disableWriteMode>
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <CAV25M01_SendReceive>:
 *
 * @Note		- this is blocking/polling based implementation, meaning the processor cannot execute other steps
 * 				  whilst executing it
 */
void CAV25M01_SendReceive(CAV25M01_Handle_t *pdev, uint8_t *txData, uint8_t *rxData, uint8_t ClockCycles)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	70fb      	strb	r3, [r7, #3]
	CAV25M01_enableWriteMode(pdev);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fa15 	bl	8003494 <CAV25M01_enableWriteMode>
	CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f841 	bl	80030f2 <CAV25M01_DevReady>

	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable WP
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	791b      	ldrb	r3, [r3, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	4619      	mov	r1, r3
 8003080:	f000 fefb 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);	// Disable HOLD
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	4619      	mov	r1, r3
 8003094:	f000 fef1 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);	// Enable Chip select
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	791b      	ldrb	r3, [r3, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	4619      	mov	r1, r3
 80030a8:	f000 fee7 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendReceiveData(pdev->pSPIhandle->pSPI, txData, rxData, ClockCycles);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	f001 fe5d 	bl	8004d76 <SPI_SendReceiveData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET); 	// Disable Chip select
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	791b      	ldrb	r3, [r3, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4619      	mov	r1, r3
 80030cc:	f000 fed5 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 	// Enable WP
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	4619      	mov	r1, r3
 80030e0:	f000 fecb 	bl	8003e7a <GPIO_WriteToOutputPin>

	CAV25M01_disableWriteMode(pdev);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa3a 	bl	800355e <CAV25M01_disableWriteMode>
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <CAV25M01_DevReady>:
 * @return		- none
 *
 * @Note		- Currently no timeout feature so infinite loops are possible
 */
void CAV25M01_DevReady(CAV25M01_Handle_t *pdev)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	uint8_t nReady, loop = 0, maxLoops = 5;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	2305      	movs	r3, #5
 8003100:	73bb      	strb	r3, [r7, #14]
	do {
		nReady = CAV25M01_ReadStatusReg(pdev) & nRDYmask;														// Check nRDY bit in status register
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f815 	bl	8003132 <CAV25M01_ReadStatusReg>
 8003108:	4603      	mov	r3, r0
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	737b      	strb	r3, [r7, #13]
		loop++;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	3301      	adds	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
		DELAY_MS(5);
 8003116:	2005      	movs	r0, #5
 8003118:	f000 fbc0 	bl	800389c <DELAY_MS>
		//for (uint32_t i = 0; i < 100000; i++);
	} while ((nReady == nRDYmask) && (loop < maxLoops));
 800311c:	7b7b      	ldrb	r3, [r7, #13]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d103      	bne.n	800312a <CAV25M01_DevReady+0x38>
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	429a      	cmp	r2, r3
 8003128:	d3eb      	bcc.n	8003102 <CAV25M01_DevReady+0x10>

	// timeout occurred CAV25M01 is stuck in a internal write cycle, power cycle to exit this state
	if (loop == maxLoops) {
		//status = HAL_ERROR;
	}
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <CAV25M01_ReadStatusReg>:
 * @return		- contents of the status register
 *
 * @Note		-
 */
uint8_t CAV25M01_ReadStatusReg(CAV25M01_Handle_t *pdev)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
	uint8_t rxData[2] = {0,0};
 800313a:	2300      	movs	r3, #0
 800313c:	81bb      	strh	r3, [r7, #12]
	uint8_t txData[2] = {OPCODE_RDSR,0};
 800313e:	2305      	movs	r3, #5
 8003140:	813b      	strh	r3, [r7, #8]
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable HOLD
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	4619      	mov	r1, r3
 8003152:	f000 fe92 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);		// Enable Chip select
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	4619      	mov	r1, r3
 8003166:	f000 fe88 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendReceiveData(pdev->pSPIhandle->pSPI, txData, rxData, 2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	f107 020c 	add.w	r2, r7, #12
 8003174:	f107 0108 	add.w	r1, r7, #8
 8003178:	2302      	movs	r3, #2
 800317a:	f001 fdfc 	bl	8004d76 <SPI_SendReceiveData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable Chip select
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	791b      	ldrb	r3, [r3, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	4619      	mov	r1, r3
 800318e:	f000 fe74 	bl	8003e7a <GPIO_WriteToOutputPin>
	return rxData[1];
 8003192:	7b7b      	ldrb	r3, [r7, #13]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <CAV25M01_WriteStatusReg>:
 * @return		- contents of the status register
 *
 * @Note		- the IPL and LIP bits cannot be set to 1 using the same WRSR instruction (refer to CAV25M01 datasheet)
 */
void CAV25M01_WriteStatusReg(CAV25M01_Handle_t *pdev, uint8_t *data)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa3 	bl	80030f2 <CAV25M01_DevReady>
	uint8_t txData[2] = {OPCODE_WREN, 0};
 80031ac:	2306      	movs	r3, #6
 80031ae:	81bb      	strh	r3, [r7, #12]
	// Send write enable command (can't use defined function otherwise infinite loop possible)
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable WP
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	791b      	ldrb	r3, [r3, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	4619      	mov	r1, r3
 80031c0:	f000 fe5b 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);	// Disable HOLD
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	791b      	ldrb	r3, [r3, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	4619      	mov	r1, r3
 80031d4:	f000 fe51 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);	// Enable Chip select
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	791b      	ldrb	r3, [r3, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	4619      	mov	r1, r3
 80031e8:	f000 fe47 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendData(pdev->pSPIhandle->pSPI, txData, 1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f107 010c 	add.w	r1, r7, #12
 80031f6:	2201      	movs	r2, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fd64 	bl	8004cc6 <SPI_SendData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET); 	// Disable Chip select
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	791b      	ldrb	r3, [r3, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	4619      	mov	r1, r3
 800320e:	f000 fe34 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 	// Enable WP
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	4619      	mov	r1, r3
 8003222:	f000 fe2a 	bl	8003e7a <GPIO_WriteToOutputPin>

	CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff63 	bl	80030f2 <CAV25M01_DevReady>
	// Write to the status register
	txData[0] = OPCODE_WRSR;
 800322c:	2301      	movs	r3, #1
 800322e:	733b      	strb	r3, [r7, #12]
	txData[1] = *data;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	737b      	strb	r3, [r7, #13]
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);			// Disable WP
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	791b      	ldrb	r3, [r3, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	4619      	mov	r1, r3
 8003246:	f000 fe18 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable HOLD
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	4619      	mov	r1, r3
 800325a:	f000 fe0e 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);		// Enable Chip select
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	791b      	ldrb	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	4619      	mov	r1, r3
 800326e:	f000 fe04 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendData(pdev->pSPIhandle->pSPI, txData, 2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f107 010c 	add.w	r1, r7, #12
 800327c:	2202      	movs	r2, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fd21 	bl	8004cc6 <SPI_SendData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable Chip select
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	791b      	ldrb	r3, [r3, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	4619      	mov	r1, r3
 8003294:	f000 fdf1 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 		// Enable WP
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	4619      	mov	r1, r3
 80032a8:	f000 fde7 	bl	8003e7a <GPIO_WriteToOutputPin>
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <CAV25M01_SerNum>:
 * @return		-
 *
 * @Note		- serial number is of size @SerNumSizeBytes
 */
void CAV25M01_SerNum(CAV25M01_Handle_t *pdev, char *SerNum, uint8_t STOREorRECALL)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b09a      	sub	sp, #104	@ 0x68
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	71fb      	strb	r3, [r7, #7]
	uint8_t txData[SerNumSizeBytes+4];
	uint8_t rxData[SerNumSizeBytes+4];
	//memset(txData,0,(SerNumSizeBytes+4));	// Could also set size by (sizeof(txData)/sizeof(txData[0]))
	//memset(rxData,0,(SerNumSizeBytes+4));

	CAV25M01_IdentPageSwitch(pdev, DISABLE);	/* Switch from Ident page to main EEPROM */
 80032c2:	2100      	movs	r1, #0
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f9aa 	bl	800361e <CAV25M01_IdentPageSwitch>

	if (STOREorRECALL == STORE)
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d12c      	bne.n	800332a <CAV25M01_SerNum+0x76>
	{
		txData[0] = OPCODE_WRITE;
 80032d0:	2302      	movs	r3, #2
 80032d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		txData[1] = (uint8_t)(U6_SERIALADDR >> 16);
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		txData[2] = (uint8_t)(U6_SERIALADDR >> 8);
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		txData[3] = (uint8_t)(U6_SERIALADDR);
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		for (uint8_t i = 0; i < SerNumSizeBytes; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80032ee:	e010      	b.n	8003312 <CAV25M01_SerNum+0x5e>
		{
			txData[i+4] = (uint8_t)SerNum[i];
 80032f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	441a      	add	r2, r3
 80032f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032fc:	3304      	adds	r3, #4
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	3368      	adds	r3, #104	@ 0x68
 8003302:	443b      	add	r3, r7
 8003304:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (uint8_t i = 0; i < SerNumSizeBytes; i++)
 8003308:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800330c:	3301      	adds	r3, #1
 800330e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003312:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003316:	2b23      	cmp	r3, #35	@ 0x23
 8003318:	d9ea      	bls.n	80032f0 <CAV25M01_SerNum+0x3c>
		}
		CAV25M01_SendData(pdev, txData, (SerNumSizeBytes + 4));
 800331a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800331e:	2228      	movs	r2, #40	@ 0x28
 8003320:	4619      	mov	r1, r3
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe49 	bl	8002fba <CAV25M01_SendData>
		for (uint8_t i = 0; i < (SerNumSizeBytes+4); i++)
		{
			SerNum[i] = (char)rxData[i+4];
		}
	}
}
 8003328:	e02f      	b.n	800338a <CAV25M01_SerNum+0xd6>
	} else if (STOREorRECALL == RECALL)
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12c      	bne.n	800338a <CAV25M01_SerNum+0xd6>
		txData[0] = OPCODE_READ;
 8003330:	2303      	movs	r3, #3
 8003332:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		txData[1] = (uint8_t)(U6_SERIALADDR >> 16);
 8003336:	2300      	movs	r3, #0
 8003338:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		txData[2] = (uint8_t)(U6_SERIALADDR >> 8);
 800333c:	2300      	movs	r3, #0
 800333e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		txData[3] = (uint8_t)(U6_SERIALADDR);
 8003342:	2300      	movs	r3, #0
 8003344:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		CAV25M01_SendReceive(pdev, txData, rxData, (SerNumSizeBytes+4));
 8003348:	f107 0214 	add.w	r2, r7, #20
 800334c:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8003350:	2328      	movs	r3, #40	@ 0x28
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fe7f 	bl	8003056 <CAV25M01_SendReceive>
		for (uint8_t i = 0; i < (SerNumSizeBytes+4); i++)
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800335e:	e010      	b.n	8003382 <CAV25M01_SerNum+0xce>
			SerNum[i] = (char)rxData[i+4];
 8003360:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800336a:	68b9      	ldr	r1, [r7, #8]
 800336c:	440b      	add	r3, r1
 800336e:	3268      	adds	r2, #104	@ 0x68
 8003370:	443a      	add	r2, r7
 8003372:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8003376:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < (SerNumSizeBytes+4); i++)
 8003378:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800337c:	3301      	adds	r3, #1
 800337e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003382:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003386:	2b27      	cmp	r3, #39	@ 0x27
 8003388:	d9ea      	bls.n	8003360 <CAV25M01_SerNum+0xac>
}
 800338a:	bf00      	nop
 800338c:	3768      	adds	r7, #104	@ 0x68
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <CAV25M01_AccData>:
 * @return		-
 *
 * @Note		- serial number is of size @SerNumSizeBytes
 */
void CAV25M01_AccData(CAV25M01_Handle_t *pdev, uint8_t *Xoff, uint8_t *Yoff, uint8_t *Zoff, uint8_t STOREorRECALL)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
	uint8_t txData[5], rxData[5];

	CAV25M01_IdentPageSwitch(pdev, DISABLE);	/* Switch from Ident page to main EEPROM */
 80033a0:	2100      	movs	r1, #0
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f93b 	bl	800361e <CAV25M01_IdentPageSwitch>

	if (STOREorRECALL == STORE)
 80033a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d132      	bne.n	8003416 <CAV25M01_AccData+0x84>
	{
		txData[0] = OPCODE_WRITE;
 80033b0:	2302      	movs	r3, #2
 80033b2:	763b      	strb	r3, [r7, #24]
		/* Three independent writes in case addresses aren't consecutive in the future */
		/* Save X offset data to EEPROM */
		txData[1] = (uint8_t)(U6_XoffAddr >> 16);
 80033b4:	2300      	movs	r3, #0
 80033b6:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_XoffAddr >> 8);
 80033b8:	2300      	movs	r3, #0
 80033ba:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_XoffAddr);
 80033bc:	2328      	movs	r3, #40	@ 0x28
 80033be:	76fb      	strb	r3, [r7, #27]
		txData[4] = *Xoff;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	773b      	strb	r3, [r7, #28]
		CAV25M01_SendData(pdev, txData, 5);
 80033c6:	f107 0318 	add.w	r3, r7, #24
 80033ca:	2205      	movs	r2, #5
 80033cc:	4619      	mov	r1, r3
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff fdf3 	bl	8002fba <CAV25M01_SendData>

		/* Save Y offset data to EEPROM */
		txData[1] = (uint8_t)(U6_YoffAddr >> 16);
 80033d4:	2300      	movs	r3, #0
 80033d6:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_YoffAddr >> 8);
 80033d8:	2300      	movs	r3, #0
 80033da:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_YoffAddr);
 80033dc:	2329      	movs	r3, #41	@ 0x29
 80033de:	76fb      	strb	r3, [r7, #27]
		txData[4] = *Yoff;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	773b      	strb	r3, [r7, #28]
		CAV25M01_SendData(pdev, txData, 5);
 80033e6:	f107 0318 	add.w	r3, r7, #24
 80033ea:	2205      	movs	r2, #5
 80033ec:	4619      	mov	r1, r3
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fde3 	bl	8002fba <CAV25M01_SendData>

		/* Save Z offset data to EEPROM */
		txData[1] = (uint8_t)(U6_ZoffAddr >> 16);
 80033f4:	2300      	movs	r3, #0
 80033f6:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_ZoffAddr >> 8);
 80033f8:	2300      	movs	r3, #0
 80033fa:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_ZoffAddr);
 80033fc:	232a      	movs	r3, #42	@ 0x2a
 80033fe:	76fb      	strb	r3, [r7, #27]
		txData[4] = *Zoff;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	773b      	strb	r3, [r7, #28]
		CAV25M01_SendData(pdev, txData, 5);
 8003406:	f107 0318 	add.w	r3, r7, #24
 800340a:	2205      	movs	r2, #5
 800340c:	4619      	mov	r1, r3
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fdd3 	bl	8002fba <CAV25M01_SendData>
		txData[2] = (uint8_t)(U6_ZoffAddr >> 8);
		txData[3] = (uint8_t)(U6_ZoffAddr);
		CAV25M01_SendReceive(pdev, txData, rxData, 5);
		*Zoff = rxData[4];
	}
}
 8003414:	e03a      	b.n	800348c <CAV25M01_AccData+0xfa>
	} else if (STOREorRECALL == RECALL)
 8003416:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d136      	bne.n	800348c <CAV25M01_AccData+0xfa>
		txData[0] = OPCODE_READ;
 800341e:	2303      	movs	r3, #3
 8003420:	763b      	strb	r3, [r7, #24]
		txData[4] = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	773b      	strb	r3, [r7, #28]
		txData[1] = (uint8_t)(U6_XoffAddr >> 16);
 8003426:	2300      	movs	r3, #0
 8003428:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_XoffAddr >> 8);
 800342a:	2300      	movs	r3, #0
 800342c:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_XoffAddr);
 800342e:	2328      	movs	r3, #40	@ 0x28
 8003430:	76fb      	strb	r3, [r7, #27]
		CAV25M01_SendReceive(pdev, txData, rxData, 5);
 8003432:	f107 0210 	add.w	r2, r7, #16
 8003436:	f107 0118 	add.w	r1, r7, #24
 800343a:	2305      	movs	r3, #5
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff fe0a 	bl	8003056 <CAV25M01_SendReceive>
		*Xoff = rxData[4];
 8003442:	7d3a      	ldrb	r2, [r7, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	701a      	strb	r2, [r3, #0]
		txData[1] = (uint8_t)(U6_YoffAddr >> 16);
 8003448:	2300      	movs	r3, #0
 800344a:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_YoffAddr >> 8);
 800344c:	2300      	movs	r3, #0
 800344e:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_YoffAddr);
 8003450:	2329      	movs	r3, #41	@ 0x29
 8003452:	76fb      	strb	r3, [r7, #27]
		CAV25M01_SendReceive(pdev, txData, rxData, 5);
 8003454:	f107 0210 	add.w	r2, r7, #16
 8003458:	f107 0118 	add.w	r1, r7, #24
 800345c:	2305      	movs	r3, #5
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff fdf9 	bl	8003056 <CAV25M01_SendReceive>
		*Yoff = rxData[4];
 8003464:	7d3a      	ldrb	r2, [r7, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	701a      	strb	r2, [r3, #0]
		txData[1] = (uint8_t)(U6_ZoffAddr >> 16);
 800346a:	2300      	movs	r3, #0
 800346c:	767b      	strb	r3, [r7, #25]
		txData[2] = (uint8_t)(U6_ZoffAddr >> 8);
 800346e:	2300      	movs	r3, #0
 8003470:	76bb      	strb	r3, [r7, #26]
		txData[3] = (uint8_t)(U6_ZoffAddr);
 8003472:	232a      	movs	r3, #42	@ 0x2a
 8003474:	76fb      	strb	r3, [r7, #27]
		CAV25M01_SendReceive(pdev, txData, rxData, 5);
 8003476:	f107 0210 	add.w	r2, r7, #16
 800347a:	f107 0118 	add.w	r1, r7, #24
 800347e:	2305      	movs	r3, #5
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fde8 	bl	8003056 <CAV25M01_SendReceive>
		*Zoff = rxData[4];
 8003486:	7d3a      	ldrb	r2, [r7, #20]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	701a      	strb	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <CAV25M01_enableWriteMode>:
 * @return		-
 *
 * @Note		- Block protection would have to be re-enabled after the necessary write function
 */
void CAV25M01_enableWriteMode(CAV25M01_Handle_t *pdev)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	uint8_t txData = OPCODE_WREN;
 800349c:	2306      	movs	r3, #6
 800349e:	73fb      	strb	r3, [r7, #15]
	uint8_t statusReg = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	73bb      	strb	r3, [r7, #14]


	CAV25M01_DevReady(pdev);	// wait for device to be ready
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fe24 	bl	80030f2 <CAV25M01_DevReady>

	// 1. Check if any block protect is enabled
	statusReg = CAV25M01_ReadStatusReg(pdev);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fe41 	bl	8003132 <CAV25M01_ReadStatusReg>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73bb      	strb	r3, [r7, #14]
	if (statusReg && BPmask)
 80034b4:	7bbb      	ldrb	r3, [r7, #14]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <CAV25M01_enableWriteMode+0x42>
	{
		// 2. If BP bits are set, set BP bits to 0
		statusReg &= ~BPmask;
 80034ba:	7bbb      	ldrb	r3, [r7, #14]
 80034bc:	f023 030c 	bic.w	r3, r3, #12
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	73bb      	strb	r3, [r7, #14]
		CAV25M01_WriteStatusReg(pdev,&statusReg);
 80034c4:	f107 030e 	add.w	r3, r7, #14
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fe66 	bl	800319c <CAV25M01_WriteStatusReg>
		CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fe0e 	bl	80030f2 <CAV25M01_DevReady>
	}

	// 3.Send write enable command
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable WP
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	791b      	ldrb	r3, [r3, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4619      	mov	r1, r3
 80034e6:	f000 fcc8 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);	// Disable HOLD
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	4619      	mov	r1, r3
 80034fa:	f000 fcbe 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);	// Enable Chip select
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	791b      	ldrb	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	4619      	mov	r1, r3
 800350e:	f000 fcb4 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendData(pdev->pSPIhandle->pSPI, &txData, 1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f107 010f 	add.w	r1, r7, #15
 800351c:	2201      	movs	r2, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fbd1 	bl	8004cc6 <SPI_SendData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET); 	// Disable Chip select
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	791b      	ldrb	r3, [r3, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	4619      	mov	r1, r3
 8003534:	f000 fca1 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 	// Enable WP
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	4619      	mov	r1, r3
 8003548:	f000 fc97 	bl	8003e7a <GPIO_WriteToOutputPin>

	// 4.Check the WEL bit in the Status Register
	statusReg = CAV25M01_ReadStatusReg(pdev);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff fdf0 	bl	8003132 <CAV25M01_ReadStatusReg>
 8003552:	4603      	mov	r3, r0
 8003554:	73bb      	strb	r3, [r7, #14]
	// WEL bit was not set, something went wrong
	if ((statusReg & WELmask) != 0x2){
		//status = HAL_ERROR;
	}
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <CAV25M01_disableWriteMode>:
 * @return		-
 *
 * @Note		- Could add block protection setting to this in the future
 */
void CAV25M01_disableWriteMode(CAV25M01_Handle_t *pdev)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	uint8_t txData = OPCODE_WRDI;
 8003566:	2304      	movs	r3, #4
 8003568:	73fb      	strb	r3, [r7, #15]
	uint8_t statusReg;

	CAV25M01_DevReady(pdev);			 			 // wait for device to be ready
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fdc1 	bl	80030f2 <CAV25M01_DevReady>

	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);		// Disable WP
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	791b      	ldrb	r3, [r3, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	4619      	mov	r1, r3
 8003580:	f000 fc7b 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnHOLD->pGPIOx, pdev->pnHOLD->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET);	// Disable HOLD
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	791b      	ldrb	r3, [r3, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	4619      	mov	r1, r3
 8003594:	f000 fc71 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET);	// Enable Chip select
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	791b      	ldrb	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	4619      	mov	r1, r3
 80035a8:	f000 fc67 	bl	8003e7a <GPIO_WriteToOutputPin>
	SPI_SendData(pdev->pSPIhandle->pSPI, &txData, 1);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f107 010f 	add.w	r1, r7, #15
 80035b6:	2201      	movs	r2, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fb84 	bl	8004cc6 <SPI_SendData>
	GPIO_WriteToOutputPin(pdev->pnCS0->pGPIOx, pdev->pnCS0->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_SET); 	// Disable Chip select
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	4619      	mov	r1, r3
 80035ce:	f000 fc54 	bl	8003e7a <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(pdev->pnWP->pGPIOx, pdev->pnWP->GPIO_PinConfig.GPIO_PinNumber, GPIO_PIN_RESET); 	// Enable WP
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	4619      	mov	r1, r3
 80035e2:	f000 fc4a 	bl	8003e7a <GPIO_WriteToOutputPin>

	// Re-enable block protect bits
	statusReg = CAV25M01_ReadStatusReg(pdev);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fda3 	bl	8003132 <CAV25M01_ReadStatusReg>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73bb      	strb	r3, [r7, #14]
	statusReg |= BPmask;
 80035f0:	7bbb      	ldrb	r3, [r7, #14]
 80035f2:	f043 030c 	orr.w	r3, r3, #12
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	73bb      	strb	r3, [r7, #14]
	CAV25M01_WriteStatusReg(pdev, &statusReg);
 80035fa:	f107 030e 	add.w	r3, r7, #14
 80035fe:	4619      	mov	r1, r3
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fdcb 	bl	800319c <CAV25M01_WriteStatusReg>

	CAV25M01_DevReady(pdev);		// Wait for device to finish last write cycle
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fd73 	bl	80030f2 <CAV25M01_DevReady>

	// Check the WEL bit in the Status Register
	statusReg = CAV25M01_ReadStatusReg(pdev);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fd90 	bl	8003132 <CAV25M01_ReadStatusReg>
 8003612:	4603      	mov	r3, r0
 8003614:	73bb      	strb	r3, [r7, #14]
	// WEL bit still set, something went wrong
	if ((statusReg & WELmask) != 0){
		//status = HAL_ERROR;
	}
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <CAV25M01_IdentPageSwitch>:
 * @return		-
 *
 * @Note		-
 */
void CAV25M01_IdentPageSwitch(CAV25M01_Handle_t *pdev, uint8_t ENorDI)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	70fb      	strb	r3, [r7, #3]
	uint8_t statusReg;

	statusReg = CAV25M01_ReadStatusReg(pdev);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fd81 	bl	8003132 <CAV25M01_ReadStatusReg>
 8003630:	4603      	mov	r3, r0
 8003632:	73bb      	strb	r3, [r7, #14]

	uint8_t IdentActive = statusReg & IPLmask;
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	73fb      	strb	r3, [r7, #15]

	if (ENorDI == ENABLE)
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d10e      	bne.n	8003660 <CAV25M01_IdentPageSwitch+0x42>
	{
		if (!IdentActive)
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d11c      	bne.n	8003682 <CAV25M01_IdentPageSwitch+0x64>
		{
			statusReg |= IPLmask;
 8003648:	7bbb      	ldrb	r3, [r7, #14]
 800364a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800364e:	b2db      	uxtb	r3, r3
 8003650:	73bb      	strb	r3, [r7, #14]
			CAV25M01_WriteStatusReg(pdev, &statusReg);
 8003652:	f107 030e 	add.w	r3, r7, #14
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fd9f 	bl	800319c <CAV25M01_WriteStatusReg>
		{
			statusReg &= ~IPLmask;
			CAV25M01_WriteStatusReg(pdev, &statusReg);
		}
	}
}
 800365e:	e010      	b.n	8003682 <CAV25M01_IdentPageSwitch+0x64>
	} else if (ENorDI == DISABLE)
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10d      	bne.n	8003682 <CAV25M01_IdentPageSwitch+0x64>
		if (IdentActive)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <CAV25M01_IdentPageSwitch+0x64>
			statusReg &= ~IPLmask;
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003672:	b2db      	uxtb	r3, r3
 8003674:	73bb      	strb	r3, [r7, #14]
			CAV25M01_WriteStatusReg(pdev, &statusReg);
 8003676:	f107 030e 	add.w	r3, r7, #14
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fd8d 	bl	800319c <CAV25M01_WriteStatusReg>
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <LM75B_POR>:
 * @return		- I2C_ERROR_CODE
 *
 * @Note		-
 */
I2C_ERROR_CODE LM75B_POR(LM75B_Handle_t *dev)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af02      	add	r7, sp, #8
 8003690:	6078      	str	r0, [r7, #4]
	I2C_ERROR_CODE status = I2C_NO_ERROR;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]

	/*
	 * 1. Check the Configuration register is the expected value
	 * Set it to the expected value if it isn't
	 */
	TxBuffer[0] = LM75B_RegConfig;
 8003696:	2301      	movs	r3, #1
 8003698:	723b      	strb	r3, [r7, #8]
	//I2C_MasterSendData(dev->hi2c,TxBuffer,1,dev->Addr);
	//I2C_MasterReceiveData(dev->hi2c,RxBuffer,1,dev->Addr);
	status = I2C_Mem_MasterReceiveData(dev->i2cHandle, RxBuffer, 1, dev->Addr, LM75B_RegConfig, I2C_MAX_TIMEOUT_MS);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	791b      	ldrb	r3, [r3, #4]
 80036a2:	f107 010c 	add.w	r1, r7, #12
 80036a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f000 ffba 	bl	800462a <I2C_Mem_MasterReceiveData>
 80036b6:	4603      	mov	r3, r0
 80036b8:	73fb      	strb	r3, [r7, #15]
	if (RxBuffer[0] != LM75B_ConfigByte)
 80036ba:	7b3b      	ldrb	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00f      	beq.n	80036e0 <LM75B_POR+0x56>
	{
		TxBuffer[0] = LM75B_ConfigByte;
 80036c0:	2300      	movs	r3, #0
 80036c2:	723b      	strb	r3, [r7, #8]
		I2C_Mem_MasterSendData(dev->i2cHandle, TxBuffer, 1, dev->Addr, LM75B_RegConfig, I2C_MAX_TIMEOUT_MS);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	791b      	ldrb	r3, [r3, #4]
 80036cc:	f107 0108 	add.w	r1, r7, #8
 80036d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036d4:	9201      	str	r2, [sp, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	f000 fec4 	bl	8004468 <I2C_Mem_MasterSendData>

	/*
	 * 2. Check the TOS register is the expected value
	 * Set it to the expected value if it isn't
	 */
	status = I2C_Mem_MasterReceiveData(dev->i2cHandle, RxBuffer, 2, dev->Addr, LM75B_RegTOS, I2C_MAX_TIMEOUT_MS);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	791b      	ldrb	r3, [r3, #4]
 80036e8:	f107 010c 	add.w	r1, r7, #12
 80036ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036f0:	9201      	str	r2, [sp, #4]
 80036f2:	2203      	movs	r2, #3
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f000 ff97 	bl	800462a <I2C_Mem_MasterReceiveData>
 80036fc:	4603      	mov	r3, r0
 80036fe:	73fb      	strb	r3, [r7, #15]
	if ((RxBuffer[0] != LM75B_tosByteMSB) || (RxBuffer[1] != LM75B_tosByteLSB))
 8003700:	7b3b      	ldrb	r3, [r7, #12]
 8003702:	2b50      	cmp	r3, #80	@ 0x50
 8003704:	d102      	bne.n	800370c <LM75B_POR+0x82>
 8003706:	7b7b      	ldrb	r3, [r7, #13]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d011      	beq.n	8003730 <LM75B_POR+0xa6>
	{
		TxBuffer[0] = LM75B_tosByteMSB;
 800370c:	2350      	movs	r3, #80	@ 0x50
 800370e:	723b      	strb	r3, [r7, #8]
		TxBuffer[1] = LM75B_tosByteLSB;
 8003710:	2300      	movs	r3, #0
 8003712:	727b      	strb	r3, [r7, #9]
		I2C_Mem_MasterSendData(dev->i2cHandle, TxBuffer, 2, dev->Addr, LM75B_RegTOS, I2C_MAX_TIMEOUT_MS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	791b      	ldrb	r3, [r3, #4]
 800371c:	f107 0108 	add.w	r1, r7, #8
 8003720:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003724:	9201      	str	r2, [sp, #4]
 8003726:	2203      	movs	r2, #3
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	2202      	movs	r2, #2
 800372c:	f000 fe9c 	bl	8004468 <I2C_Mem_MasterSendData>

	/*
	 * 3. Check the THyst register is the expected value
	 * Set it to the expected value if it isn't
	 */
	status = I2C_Mem_MasterReceiveData(dev->i2cHandle, RxBuffer, 2, dev->Addr, LM75B_RegThyst, I2C_MAX_TIMEOUT_MS);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	f107 010c 	add.w	r1, r7, #12
 800373c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003740:	9201      	str	r2, [sp, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	2202      	movs	r2, #2
 8003748:	f000 ff6f 	bl	800462a <I2C_Mem_MasterReceiveData>
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]
	if ((RxBuffer[0] != LM75B_thystByteMSB) || (RxBuffer[1] != LM75B_thystByteLSB))
 8003750:	7b3b      	ldrb	r3, [r7, #12]
 8003752:	2b4b      	cmp	r3, #75	@ 0x4b
 8003754:	d102      	bne.n	800375c <LM75B_POR+0xd2>
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d011      	beq.n	8003780 <LM75B_POR+0xf6>
	{
		TxBuffer[0] = LM75B_thystByteMSB;
 800375c:	234b      	movs	r3, #75	@ 0x4b
 800375e:	723b      	strb	r3, [r7, #8]
		TxBuffer[1] = LM75B_thystByteLSB;
 8003760:	2300      	movs	r3, #0
 8003762:	727b      	strb	r3, [r7, #9]
		I2C_Mem_MasterSendData(dev->i2cHandle, TxBuffer, 2, dev->Addr, LM75B_RegThyst, I2C_MAX_TIMEOUT_MS);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	791b      	ldrb	r3, [r3, #4]
 800376c:	f107 0108 	add.w	r1, r7, #8
 8003770:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003774:	9201      	str	r2, [sp, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	f000 fe74 	bl	8004468 <I2C_Mem_MasterSendData>
	}

	return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <LM75B_ReadTemp>:
 * @return		- temperature in celsius
 *
 * @Note		-
 */
float LM75B_ReadTemp(LM75B_Handle_t *dev)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b088      	sub	sp, #32
 800378e:	af02      	add	r7, sp, #8
 8003790:	6078      	str	r0, [r7, #4]
	uint8_t RxBuffer[2] = {0,0};
 8003792:	2300      	movs	r3, #0
 8003794:	81bb      	strh	r3, [r7, #12]
	uint16_t TempHex;
	I2C_ERROR_CODE status;
	float TempC = 0.0f;
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	617b      	str	r3, [r7, #20]

	status = I2C_Mem_MasterReceiveData(dev->i2cHandle, RxBuffer, 2, dev->Addr, LM75B_RegTemp, I2C_MAX_TIMEOUT_MS);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	791b      	ldrb	r3, [r3, #4]
 80037a4:	f107 010c 	add.w	r1, r7, #12
 80037a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037ac:	9201      	str	r2, [sp, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	9200      	str	r2, [sp, #0]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f000 ff39 	bl	800462a <I2C_Mem_MasterReceiveData>
 80037b8:	4603      	mov	r3, r0
 80037ba:	74fb      	strb	r3, [r7, #19]
	if (status != I2C_NO_ERROR) I2C_ApplicationEventCallback(dev->i2cHandle, status);
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <LM75B_ReadTemp+0x46>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	7cfa      	ldrb	r2, [r7, #19]
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fcfc 	bl	80021c8 <I2C_ApplicationEventCallback>
	 * if D10 = 0, temperature is positive
	 * 		temperature = decimal value * 0.125 C
	 * if D10 = 1, temperature is negative
	 * 		temperature = -(two's complement of data) * 0.125 C
	 */
	TempHex = ((RxBuffer[0] << 8) + RxBuffer[1]);
 80037d0:	7b3b      	ldrb	r3, [r7, #12]
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	7b7a      	ldrb	r2, [r7, #13]
 80037d8:	4413      	add	r3, r2
 80037da:	823b      	strh	r3, [r7, #16]

	if (!(TempHex & 0x8000))// if positive temperature
 80037dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0e      	blt.n	8003802 <LM75B_ReadTemp+0x78>
	{
		TempC = (TempHex >> 5) * 0.125f;
 80037e4:	8a3b      	ldrh	r3, [r7, #16]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fa66 	bl	8000cbc <__aeabi_i2f>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fab4 	bl	8000d64 <__aeabi_fmul>
 80037fc:	4603      	mov	r3, r0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	e017      	b.n	8003832 <LM75B_ReadTemp+0xa8>
	}
	else // if negative temperature take two's complement first
	{
		TempHex--; // subtract 1
 8003802:	8a3b      	ldrh	r3, [r7, #16]
 8003804:	3b01      	subs	r3, #1
 8003806:	823b      	strh	r3, [r7, #16]
		TempHex = !TempHex; // take the complement
 8003808:	8a3b      	ldrh	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	823b      	strh	r3, [r7, #16]
		TempC = (TempHex >> 5) * -0.125f;
 8003816:	8a3b      	ldrh	r3, [r7, #16]
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b29b      	uxth	r3, r3
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd fa4d 	bl	8000cbc <__aeabi_i2f>
 8003822:	4603      	mov	r3, r0
 8003824:	f04f 413e 	mov.w	r1, #3187671040	@ 0xbe000000
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fa9b 	bl	8000d64 <__aeabi_fmul>
 800382e:	4603      	mov	r3, r0
 8003830:	617b      	str	r3, [r7, #20]
	}
	return TempC;
 8003832:	697b      	ldr	r3, [r7, #20]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <SYST_Config>:
 * @return		- none
 *
 * @Note		-
 */
void SYST_Config(uint32_t SystemClockHz)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	//1. Reset control register
	Systick->CTRL = 0x0;
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <SYST_Config+0x54>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

	//2. Set reload value
	Systick->RVR = ( (SystemClockHz / 1000) - 1)& 0xFFFFFF;	//only 24 bits
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a11      	ldr	r2, [pc, #68]	@ (8003894 <SYST_Config+0x58>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	3b01      	subs	r3, #1
 8003856:	4a0e      	ldr	r2, [pc, #56]	@ (8003890 <SYST_Config+0x54>)
 8003858:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800385c:	6053      	str	r3, [r2, #4]

	//3. Set priority systick exception
	SCB->SHP[11] = 0x10;
 800385e:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <SYST_Config+0x5c>)
 8003860:	2210      	movs	r2, #16
 8003862:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	//4. Reset Systick value
	Systick->CVR = 0;
 8003866:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <SYST_Config+0x54>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]

	//5. Enable systick
	Systick->CTRL |= (0x1 << SYST_CSR_CLKSOURCE);	//Set to internal clock source
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <SYST_Config+0x54>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a07      	ldr	r2, [pc, #28]	@ (8003890 <SYST_Config+0x54>)
 8003872:	f043 0304 	orr.w	r3, r3, #4
 8003876:	6013      	str	r3, [r2, #0]
	Systick->CTRL |= (0x1 << SYST_CSR_TICKINT);		//Enable Systick interrupt
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <SYST_Config+0x54>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <SYST_Config+0x54>)
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	6013      	str	r3, [r2, #0]
	//Systick->CTRL |= (0x1 << SYST_CSR_ENABLE);		//Enable the counter
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010
 8003894:	10624dd3 	.word	0x10624dd3
 8003898:	e000ed00 	.word	0xe000ed00

0800389c <DELAY_MS>:
 * @return		- none
 *
 * @Note		-
 */
void DELAY_MS(uint32_t ms)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	msticks = 0;
 80038a4:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <DELAY_MS+0x4c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
	uint32_t startticks = 0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
	Systick->CVR = 0;								//Reset Systick value
 80038ae:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <DELAY_MS+0x50>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
	Systick->CTRL |= (0x1 << SYST_CSR_ENABLE);		//Enable the counter
 80038b4:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <DELAY_MS+0x50>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <DELAY_MS+0x50>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6013      	str	r3, [r2, #0]
	while ( (msticks - startticks) < ms );
 80038c0:	bf00      	nop
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <DELAY_MS+0x4c>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d8f8      	bhi.n	80038c2 <DELAY_MS+0x26>
	Systick->CTRL &= ~(0x1 << SYST_CSR_ENABLE);		//Disable the counter
 80038d0:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <DELAY_MS+0x50>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <DELAY_MS+0x50>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6013      	str	r3, [r2, #0]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	2000039c 	.word	0x2000039c
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <ELAPSED_MS>:
 * @return		- milliseconds passed since Systick enabled
 *
 * @Note		-
 */
uint32_t ELAPSED_MS(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
	/*
	 * Needed to store value of msticks in separate variable before returning it.
	 * despite being "volatile" something would be misinterpreted by the compiler
	 * resulting in I2C operations timing out
	 */
	uint32_t ms = msticks;
 80038f6:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <ELAPSED_MS+0x18>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	607b      	str	r3, [r7, #4]
	return ms;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	2000039c 	.word	0x2000039c

0800390c <SYST_STARTorSTOP>:
 * @return		-
 *
 * @Note		-
 */
void SYST_STARTorSTOP(uint8_t ENorDI)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
	if (ENorDI)
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00c      	beq.n	8003936 <SYST_STARTorSTOP+0x2a>
	{
		msticks = 0;
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <SYST_STARTorSTOP+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
		Systick->CVR = 0;								//Reset Systick value
 8003922:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <SYST_STARTorSTOP+0x44>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
		Systick->CTRL |= (0x1 << SYST_CSR_ENABLE);		//Enable the counter
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <SYST_STARTorSTOP+0x44>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a08      	ldr	r2, [pc, #32]	@ (8003950 <SYST_STARTorSTOP+0x44>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6013      	str	r3, [r2, #0]
	} else
	{
		Systick->CTRL &= ~(0x1 << SYST_CSR_ENABLE);		//Disable the counter
	}
}
 8003934:	e005      	b.n	8003942 <SYST_STARTorSTOP+0x36>
		Systick->CTRL &= ~(0x1 << SYST_CSR_ENABLE);		//Disable the counter
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <SYST_STARTorSTOP+0x44>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a05      	ldr	r2, [pc, #20]	@ (8003950 <SYST_STARTorSTOP+0x44>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	2000039c 	.word	0x2000039c
 8003950:	e000e010 	.word	0xe000e010

08003954 <SysTick_Handler>:
 * @return		- none
 *
 * @Note		-
 */
void SysTick_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	//Systick is automatically cleared upon entering this handler
	//increment count of 1ms intervals
	msticks++;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <SysTick_Handler+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a03      	ldr	r2, [pc, #12]	@ (800396c <SysTick_Handler+0x18>)
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	2000039c 	.word	0x2000039c

08003970 <NVIC_IRQITConfig>:
 * @return		-
 *
 * @Note		- none
 */
void NVIC_IRQITConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	460a      	mov	r2, r1
 800397a:	71fb      	strb	r3, [r7, #7]
 800397c:	4613      	mov	r3, r2
 800397e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8003980:	79bb      	ldrb	r3, [r7, #6]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d11a      	bne.n	80039bc <NVIC_IRQITConfig+0x4c>
	{
		if (IRQNumber < 31)
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	2b1e      	cmp	r3, #30
 800398a:	d80a      	bhi.n	80039a2 <NVIC_IRQITConfig+0x32>
		{
			//Program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 800398c:	4b1b      	ldr	r3, [pc, #108]	@ (80039fc <NVIC_IRQITConfig+0x8c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	79fa      	ldrb	r2, [r7, #7]
 8003992:	2101      	movs	r1, #1
 8003994:	fa01 f202 	lsl.w	r2, r1, r2
 8003998:	4611      	mov	r1, r2
 800399a:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <NVIC_IRQITConfig+0x8c>)
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]
		{
			//Program ICER1 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		}
	}
}
 80039a0:	e026      	b.n	80039f0 <NVIC_IRQITConfig+0x80>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80039a2:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <NVIC_IRQITConfig+0x90>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	79fa      	ldrb	r2, [r7, #7]
 80039a8:	f002 021f 	and.w	r2, r2, #31
 80039ac:	2101      	movs	r1, #1
 80039ae:	fa01 f202 	lsl.w	r2, r1, r2
 80039b2:	4611      	mov	r1, r2
 80039b4:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <NVIC_IRQITConfig+0x90>)
 80039b6:	430b      	orrs	r3, r1
 80039b8:	6013      	str	r3, [r2, #0]
}
 80039ba:	e019      	b.n	80039f0 <NVIC_IRQITConfig+0x80>
		if (IRQNumber < 31)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	2b1e      	cmp	r3, #30
 80039c0:	d80a      	bhi.n	80039d8 <NVIC_IRQITConfig+0x68>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80039c2:	4b10      	ldr	r3, [pc, #64]	@ (8003a04 <NVIC_IRQITConfig+0x94>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	79fa      	ldrb	r2, [r7, #7]
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003a04 <NVIC_IRQITConfig+0x94>)
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6013      	str	r3, [r2, #0]
}
 80039d6:	e00b      	b.n	80039f0 <NVIC_IRQITConfig+0x80>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <NVIC_IRQITConfig+0x98>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	f002 021f 	and.w	r2, r2, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	4611      	mov	r1, r2
 80039ea:	4a07      	ldr	r2, [pc, #28]	@ (8003a08 <NVIC_IRQITConfig+0x98>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100
 8003a00:	e000e104 	.word	0xe000e104
 8003a04:	e000e180 	.word	0xe000e180
 8003a08:	e000e184 	.word	0xe000e184

08003a0c <NVIC_IRQPriorityConfig>:
 * @return		-
 *
 * @Note		- none
 */
void NVIC_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8003a38:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	7b7b      	ldrb	r3, [r7, #13]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	409a      	lsls	r2, r3
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8003a4c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8003a50:	430a      	orrs	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
	...

08003a60 <AFIO_PeriEn>:
 * @return		- none
 *
 * @Note		-
 */
void AFIO_PeriEn(uint8_t EnorDi)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
	/*
	 * APB2 also need to be enabled
	 * AFIO clock needs to be enabled RCC_APB2ENR
	 */
	if(EnorDi == ENABLE)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <AFIO_PeriEn+0x1e>
	{
		AFIO_PCLK_EN();
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <AFIO_PeriEn+0x34>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	4a07      	ldr	r2, [pc, #28]	@ (8003a94 <AFIO_PeriEn+0x34>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6193      	str	r3, [r2, #24]
	} else
	{
		AFIO_PCLK_DI();
	}
}
 8003a7c:	e005      	b.n	8003a8a <AFIO_PeriEn+0x2a>
		AFIO_PCLK_DI();
 8003a7e:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <AFIO_PeriEn+0x34>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <AFIO_PeriEn+0x34>)
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	6193      	str	r3, [r2, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	40021000 	.word	0x40021000

08003a98 <AFIO_REMAP>:
 * @return		- none
 *
 * @Note		- this function is purpose written for STM32_petridish board
 */
void AFIO_REMAP(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	AFIO->MAPR |= (0x2 << 24);	// Release PA15 from JTDI so it can be used as AFIO
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	6053      	str	r3, [r2, #4]
	AFIO->MAPR |= (0x3 << 8); 	// Remap TIM2 as full remap
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003aae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003ab2:	6053      	str	r3, [r2, #4]
	AFIO->MAPR |= (0x1 << 1);	// Remap I2C1 to set to PB8/PB9
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	4a03      	ldr	r2, [pc, #12]	@ (8003ac8 <AFIO_REMAP+0x30>)
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	6053      	str	r3, [r2, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40010000 	.word	0x40010000

08003acc <GPIO_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d115      	bne.n	8003b0a <GPIO_PeriClockControl+0x3e>
	{
		if (pGPIOx == GPIOA)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	@ (8003b40 <GPIO_PeriClockControl+0x74>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d106      	bne.n	8003af4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8003ae6:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	4a16      	ldr	r2, [pc, #88]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003aec:	f043 0304 	orr.w	r3, r3, #4
 8003af0:	6193      	str	r3, [r2, #24]
		} else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}
	}
}
 8003af2:	e01f      	b.n	8003b34 <GPIO_PeriClockControl+0x68>
		} else if (pGPIOx == GPIOB)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <GPIO_PeriClockControl+0x7c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d11b      	bne.n	8003b34 <GPIO_PeriClockControl+0x68>
			GPIOB_PCLK_EN();
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a10      	ldr	r2, [pc, #64]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003b02:	f043 0308 	orr.w	r3, r3, #8
 8003b06:	6193      	str	r3, [r2, #24]
}
 8003b08:	e014      	b.n	8003b34 <GPIO_PeriClockControl+0x68>
		if (pGPIOx == GPIOA)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <GPIO_PeriClockControl+0x74>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d106      	bne.n	8003b20 <GPIO_PeriClockControl+0x54>
			GPIOA_PCLK_DI();
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003b18:	f023 0304 	bic.w	r3, r3, #4
 8003b1c:	6193      	str	r3, [r2, #24]
}
 8003b1e:	e009      	b.n	8003b34 <GPIO_PeriClockControl+0x68>
		} else if (pGPIOx == GPIOB)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a09      	ldr	r2, [pc, #36]	@ (8003b48 <GPIO_PeriClockControl+0x7c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d105      	bne.n	8003b34 <GPIO_PeriClockControl+0x68>
			GPIOB_PCLK_DI();
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <GPIO_PeriClockControl+0x78>)
 8003b2e:	f023 0308 	bic.w	r3, r3, #8
 8003b32:	6193      	str	r3, [r2, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010800 	.word	0x40010800
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010c00 	.word	0x40010c00

08003b4c <GPIO_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

	/*
	 * CRreg - Determines if we are writing to CRL (0->7) or CRH (8->15)
	 * BitGroup - Determines which group of bits to write to in the register
	 */
	CRreg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	791b      	ldrb	r3, [r3, #4]
 8003b58:	08db      	lsrs	r3, r3, #3
 8003b5a:	73fb      	strb	r3, [r7, #15]
	BitGroup = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	791b      	ldrb	r3, [r3, #4]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	73bb      	strb	r3, [r7, #14]
	/*
	 * Configure the mode and speed of GPIO pin
	 * Pin 0->7 is written to register CRL
	 * Pin 8->15 is written to register CRH
	 */
	pGPIOHandle->pGPIOx->CR[CRreg] &= ~(0x3 << (4 * BitGroup)); // Clear the bits first
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	4001      	ands	r1, r0
 8003b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IT_FT)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	795b      	ldrb	r3, [r3, #5]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d90a      	bls.n	8003ba8 <GPIO_Init+0x5c>
	{
		pGPIOHandle->pGPIOx->CR[CRreg] |= (GPIO_MODE_INP << (4 * BitGroup));	// Configure interrupt pins as input mode
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	7bf8      	ldrb	r0, [r7, #15]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ba6:	e012      	b.n	8003bce <GPIO_Init+0x82>
	} else
	{
		pGPIOHandle->pGPIOx->CR[CRreg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (4 * BitGroup));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	795b      	ldrb	r3, [r3, #5]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	4301      	orrs	r1, r0
 8003bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	/*
	 * 2. Set the Pin configuration
	 * Pin 0->7 is written to register CRL
	 * Pin 8->15 is written to register CRH
	 */
	pGPIOHandle->pGPIOx->CR[CRreg] &= ~(0x3 << (2 + (4 * BitGroup))); // Clear the bits first
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	4001      	ands	r1, r0
 8003bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinCNF == GPIO_CNF_INP_PD)			// Pull down input mode
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	799b      	ldrb	r3, [r3, #6]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d120      	bne.n	8003c3e <GPIO_Init+0xf2>
	{
		// Configure the GPIO pin as input PUPD
		pGPIOHandle->pGPIOx->CR[CRreg] |= (0x2 << (2 + (4 * BitGroup)));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	4301      	orrs	r1, r0
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// Configure the PxODR register as pull down (write 0 to ODR bit)
		pGPIOHandle->pGPIOx->ODR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	791b      	ldrb	r3, [r3, #4]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	408b      	lsls	r3, r1
 8003c30:	43db      	mvns	r3, r3
 8003c32:	4619      	mov	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	400a      	ands	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	e037      	b.n	8003cae <GPIO_Init+0x162>

	} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinCNF == GPIO_CNF_INP_PU)	// Pull up input mode
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d11f      	bne.n	8003c86 <GPIO_Init+0x13a>
	{
		// Configure the GPIO pin as input PUPD
		pGPIOHandle->pGPIOx->CR[CRreg] |= (0x2 << (2 + (4 * BitGroup)));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c50:	7bbb      	ldrb	r3, [r7, #14]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3302      	adds	r3, #2
 8003c56:	2202      	movs	r2, #2
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	4301      	orrs	r1, r0
 8003c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// Configure the PxODR register as pull up (write 1 to ODR bit)
		pGPIOHandle->pGPIOx->ODR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	791b      	ldrb	r3, [r3, #4]
 8003c74:	4619      	mov	r1, r3
 8003c76:	2301      	movs	r3, #1
 8003c78:	408b      	lsls	r3, r1
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e013      	b.n	8003cae <GPIO_Init+0x162>

	} else																	// All other non interrupt modes
	{
		// Configure the GPIO pin as stated in GPIO_Pin_CNF
		pGPIOHandle->pGPIOx->CR[CRreg] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinCNF << (2 + (4 * BitGroup)));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	799b      	ldrb	r3, [r3, #6]
 8003c94:	461a      	mov	r2, r3
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	4301      	orrs	r1, r0
 8003caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// Interrupt Configuration
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode >= GPIO_MODE_IT_FT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	795b      	ldrb	r3, [r3, #5]
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	f240 80b4 	bls.w	8003e20 <GPIO_Init+0x2d4>
	{
		// 1. Configure FTSR and/or RTSR depending on interrupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)			// Falling edge trigger
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	795b      	ldrb	r3, [r3, #5]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d117      	bne.n	8003cf0 <GPIO_Init+0x1a4>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Enable the FTSR register
 8003cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	7912      	ldrb	r2, [r2, #4]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2201      	movs	r2, #1
 8003ccc:	408a      	lsls	r2, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Disable the RTSR register to ensure both aren't set
 8003cd6:	4b55      	ldr	r3, [pc, #340]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	7912      	ldrb	r2, [r2, #4]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	408a      	lsls	r2, r1
 8003ce4:	43d2      	mvns	r2, r2
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4a50      	ldr	r2, [pc, #320]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6093      	str	r3, [r2, #8]
 8003cee:	e035      	b.n	8003d5c <GPIO_Init+0x210>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)		// Rising edge trigger
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	795b      	ldrb	r3, [r3, #5]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d117      	bne.n	8003d28 <GPIO_Init+0x1dc>
		{
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Disable the FTSR register to ensure both aren't set
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	7912      	ldrb	r2, [r2, #4]
 8003d00:	4611      	mov	r1, r2
 8003d02:	2201      	movs	r2, #1
 8003d04:	408a      	lsls	r2, r1
 8003d06:	43d2      	mvns	r2, r2
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4a48      	ldr	r2, [pc, #288]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d0c:	400b      	ands	r3, r1
 8003d0e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Enable the RTSR register
 8003d10:	4b46      	ldr	r3, [pc, #280]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	7912      	ldrb	r2, [r2, #4]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	408a      	lsls	r2, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4a42      	ldr	r2, [pc, #264]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	e019      	b.n	8003d5c <GPIO_Init+0x210>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)	// Rising or Falling edge trigger
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	795b      	ldrb	r3, [r3, #5]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d115      	bne.n	8003d5c <GPIO_Init+0x210>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Enable the FTSR register
 8003d30:	4b3e      	ldr	r3, [pc, #248]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	7912      	ldrb	r2, [r2, #4]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	408a      	lsls	r2, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4a3a      	ldr	r2, [pc, #232]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Enable the RTSR register
 8003d46:	4b39      	ldr	r3, [pc, #228]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	7912      	ldrb	r2, [r2, #4]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	2201      	movs	r2, #1
 8003d52:	408a      	lsls	r2, r1
 8003d54:	4611      	mov	r1, r2
 8003d56:	4a35      	ldr	r2, [pc, #212]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO Port selection in AFIO_EXTICR
		AFIO_PCLK_EN();																// Ensure AFIO clock is enabled, so EXTICR can be set
 8003d5c:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <GPIO_Init+0x2e4>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a33      	ldr	r2, [pc, #204]	@ (8003e30 <GPIO_Init+0x2e4>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6193      	str	r3, [r2, #24]
		uint8_t EXTICRreg = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;			// Determine which EXTICR reg we need to change
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	737b      	strb	r3, [r7, #13]
		uint8_t EXTICRBitGroup = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4; 	// Determine which bit group needs changing (Px0 = bits 0:3, Px1 = bits 4:7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	733b      	strb	r3, [r7, #12]
		AFIO->EXTICR[EXTICRreg] &= ~(0xF << (4 * EXTICRBitGroup));					// Clear the bits first
 8003d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <GPIO_Init+0x2e8>)
 8003d7c:	7b7b      	ldrb	r3, [r7, #13]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003d84:	7b3b      	ldrb	r3, [r7, #12]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	210f      	movs	r1, #15
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	4928      	ldr	r1, [pc, #160]	@ (8003e34 <GPIO_Init+0x2e8>)
 8003d94:	7b7b      	ldrb	r3, [r7, #13]
 8003d96:	4002      	ands	r2, r0
 8003d98:	3302      	adds	r3, #2
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		uint8_t EXTIPortcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);			// Retrieve EXTI code for given GPIO port
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a25      	ldr	r2, [pc, #148]	@ (8003e38 <GPIO_Init+0x2ec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d01d      	beq.n	8003de4 <GPIO_Init+0x298>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <GPIO_Init+0x2f0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d016      	beq.n	8003de0 <GPIO_Init+0x294>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <GPIO_Init+0x2f4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00f      	beq.n	8003ddc <GPIO_Init+0x290>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a20      	ldr	r2, [pc, #128]	@ (8003e44 <GPIO_Init+0x2f8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d008      	beq.n	8003dd8 <GPIO_Init+0x28c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <GPIO_Init+0x2fc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <GPIO_Init+0x288>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e008      	b.n	8003de6 <GPIO_Init+0x29a>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e006      	b.n	8003de6 <GPIO_Init+0x29a>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e004      	b.n	8003de6 <GPIO_Init+0x29a>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e002      	b.n	8003de6 <GPIO_Init+0x29a>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <GPIO_Init+0x29a>
 8003de4:	2300      	movs	r3, #0
 8003de6:	72fb      	strb	r3, [r7, #11]
		AFIO->EXTICR[EXTICRreg] |= (EXTIPortcode << (4 * EXTICRBitGroup));			// Set EXTI port code
 8003de8:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <GPIO_Init+0x2e8>)
 8003dea:	7b7b      	ldrb	r3, [r7, #13]
 8003dec:	3302      	adds	r3, #2
 8003dee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003df2:	7af9      	ldrb	r1, [r7, #11]
 8003df4:	7b3b      	ldrb	r3, [r7, #12]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	490d      	ldr	r1, [pc, #52]	@ (8003e34 <GPIO_Init+0x2e8>)
 8003e00:	7b7b      	ldrb	r3, [r7, #13]
 8003e02:	4302      	orrs	r2, r0
 8003e04:	3302      	adds	r3, #2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR (interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8003e0a:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	7912      	ldrb	r2, [r2, #4]
 8003e12:	4611      	mov	r1, r2
 8003e14:	2201      	movs	r2, #1
 8003e16:	408a      	lsls	r2, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4a04      	ldr	r2, [pc, #16]	@ (8003e2c <GPIO_Init+0x2e0>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6013      	str	r3, [r2, #0]
	}
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40010800 	.word	0x40010800
 8003e3c:	40010c00 	.word	0x40010c00
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	40011800 	.word	0x40011800

08003e4c <GPIO_ReadFromInputPin>:
 * @return		- either a 0 for low, or 1 for high
 *
 * @Note		- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
	uint8_t Value = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	Value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]

	return Value;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <GPIO_WriteToOutputPin>:
 * @return		-
 *
 * @Note		- none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	70fb      	strb	r3, [r7, #3]
 8003e86:	4613      	mov	r3, r2
 8003e88:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 8003e8a:	78bb      	ldrb	r3, [r7, #2]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d109      	bne.n	8003ea4 <GPIO_WriteToOutputPin+0x2a>
	{
		pGPIOx->ODR |= (GPIO_PIN_SET << PinNumber);	// Set value 1 to output pin, leaving others the same
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	2101      	movs	r1, #1
 8003e98:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]
	{
		pGPIOx->ODR &= ~(GPIO_PIN_SET << PinNumber);	// Set value 0 to output pin, leaving others the same
	}


}
 8003ea2:	e009      	b.n	8003eb8 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(GPIO_PIN_SET << PinNumber);	// Set value 0 to output pin, leaving others the same
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb0:	43d2      	mvns	r2, r2
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60da      	str	r2, [r3, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <GPIO_ToggleOutputPin>:
 * @return		-
 *
 * @Note		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber); // XOR
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eda:	405a      	eors	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
	...

08003eec <GPIO_IRQHandling>:
 * @return		-
 *
 * @Note		- none
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
	// clear the EXTI PR Register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber))
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <GPIO_IRQHandling+0x3c>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	79fa      	ldrb	r2, [r7, #7]
 8003efc:	2101      	movs	r1, #1
 8003efe:	fa01 f202 	lsl.w	r2, r1, r2
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <GPIO_IRQHandling+0x30>
	{
		// Clear
		EXTI->PR |= (1 << PinNumber);
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <GPIO_IRQHandling+0x3c>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	79fa      	ldrb	r2, [r7, #7]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4611      	mov	r1, r2
 8003f16:	4a04      	ldr	r2, [pc, #16]	@ (8003f28 <GPIO_IRQHandling+0x3c>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6153      	str	r3, [r2, #20]
	}
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010400 	.word	0x40010400

08003f2c <I2C_GenerateSTARTCondition>:
 * @return		- none
 *
 * @Note		-
 */
static void I2C_GenerateSTARTCondition(I2C_RegDef_t *pI2Cx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <I2C_GenerateSTOPCondition>:
 * @return		- none
 *
 * @Note		-
 */
void I2C_GenerateSTOPCondition(I2C_RegDef_t *pI2Cx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <I2C_ExecuteAddressPhase>:
 * @return		- none
 *
 * @Note		-
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t READorWRITE)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
 8003f74:	4613      	mov	r3, r2
 8003f76:	70bb      	strb	r3, [r7, #2]
	SlaveAddr = SlaveAddr << 1;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	70fb      	strb	r3, [r7, #3]

	if (READorWRITE == READ)
 8003f7e:	78bb      	ldrb	r3, [r7, #2]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d104      	bne.n	8003f8e <I2C_ExecuteAddressPhase+0x26>
	{
		SlaveAddr |= 1;			// Slave address + the R bit
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	e003      	b.n	8003f96 <I2C_ExecuteAddressPhase+0x2e>
	} else
	{
		SlaveAddr &= ~(1);		// Slave address + the W bit
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	70fb      	strb	r3, [r7, #3]
	}

	pI2Cx->DR = SlaveAddr;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	611a      	str	r2, [r3, #16]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <I2C_ClearADDRFlag>:
 * @return		- none
 *
 * @Note		-
 */
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR[0];
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR[1];
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	60fb      	str	r3, [r7, #12]

	// Noticed that it sometimes isn't cleared on the first attempt, so read it again
	if ( I2C_GetFlagStatus(pI2Cx, I2C_FLAG_ADDR) )
 8003fba:	2102      	movs	r1, #2
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fc5b 	bl	8004878 <I2C_GetFlagStatus>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <I2C_ClearADDRFlag+0x2e>
	{
		dummyRead = pI2Cx->SR[0];
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2Cx->SR[1];
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]
	}

	(void) dummyRead;	// Suppress compiler warning message
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d115      	bne.n	800401a <I2C_PeriClockControl+0x3e>
	{
		if (pI2Cx == I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <I2C_PeriClockControl+0x74>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d106      	bne.n	8004004 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8003ff6:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <I2C_PeriClockControl+0x78>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	@ (8004054 <I2C_PeriClockControl+0x78>)
 8003ffc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004000:	61d3      	str	r3, [r2, #28]
		}else if (pI2Cx == I2C2)
		{
			I2C2_PCLK_DI();
		}
	}
}
 8004002:	e01f      	b.n	8004044 <I2C_PeriClockControl+0x68>
		}else if (pI2Cx == I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <I2C_PeriClockControl+0x7c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d11b      	bne.n	8004044 <I2C_PeriClockControl+0x68>
			I2C2_PCLK_EN();
 800400c:	4b11      	ldr	r3, [pc, #68]	@ (8004054 <I2C_PeriClockControl+0x78>)
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	4a10      	ldr	r2, [pc, #64]	@ (8004054 <I2C_PeriClockControl+0x78>)
 8004012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004016:	61d3      	str	r3, [r2, #28]
}
 8004018:	e014      	b.n	8004044 <I2C_PeriClockControl+0x68>
		if (pI2Cx == I2C1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <I2C_PeriClockControl+0x74>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d106      	bne.n	8004030 <I2C_PeriClockControl+0x54>
			I2C1_PCLK_DI();
 8004022:	4b0c      	ldr	r3, [pc, #48]	@ (8004054 <I2C_PeriClockControl+0x78>)
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4a0b      	ldr	r2, [pc, #44]	@ (8004054 <I2C_PeriClockControl+0x78>)
 8004028:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800402c:	61d3      	str	r3, [r2, #28]
}
 800402e:	e009      	b.n	8004044 <I2C_PeriClockControl+0x68>
		}else if (pI2Cx == I2C2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a09      	ldr	r2, [pc, #36]	@ (8004058 <I2C_PeriClockControl+0x7c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d105      	bne.n	8004044 <I2C_PeriClockControl+0x68>
			I2C2_PCLK_DI();
 8004038:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <I2C_PeriClockControl+0x78>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4a05      	ldr	r2, [pc, #20]	@ (8004054 <I2C_PeriClockControl+0x78>)
 800403e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004042:	61d3      	str	r3, [r2, #28]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40005400 	.word	0x40005400
 8004054:	40021000 	.word	0x40021000
 8004058:	40005800 	.word	0x40005800

0800405c <I2C_EnorDI>:
 * @return		- none
 *
 * @Note		- none
 */
void I2C_EnorDI(I2C_RegDef_t *pI2Cx, uint8_t EnorDI)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
	if (EnorDI)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <I2C_EnorDI+0x20>
	{
		pI2Cx->CR1 |= (0x1 << I2C_CR1_PE);	/* Enables the I2C peripheral (PE) */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
		 * the peripheral automatically at the end of communication
		 */
		pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);	/* Disable the I2C peripheral (PE) */
	}

}
 800407a:	e005      	b.n	8004088 <I2C_EnorDI+0x2c>
		pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);	/* Disable the I2C peripheral (PE) */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 0201 	bic.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
	...

08004094 <I2C_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void I2C_Init(I2C_Handle_t *pI2CxHandle)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	uint32_t CCR = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
	uint8_t trise;

	// Enable the I2C clock source
	I2C_PeriClockControl(pI2CxHandle->pI2Cx, ENABLE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff ff98 	bl	8003fdc <I2C_PeriClockControl>

	// Disable the I2C Peripheral so that all registers can be altered
	I2C_EnorDI(pI2CxHandle->pI2Cx, DISABLE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ffd2 	bl	800405c <I2C_EnorDI>

	// Calculate value of PCLK1
	uint32_t PCLK1 = RCC_GetPCLK1_Value();
 80040b8:	f000 f912 	bl	80042e0 <RCC_GetPCLK1_Value>
 80040bc:	60f8      	str	r0, [r7, #12]

	// 1.Configure the mode to fast or standard
	if (pI2CxHandle->I2C_Config.I2C_SCLSpeed > I2C_SCL_SPEED_SM1K)	// Check if configuring for standard or fast mode
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4a84      	ldr	r2, [pc, #528]	@ (80042d4 <I2C_Init+0x240>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d931      	bls.n	800412c <I2C_Init+0x98>
	{
		//Configure the mode to fast
		pI2CxHandle->pI2Cx->CCR |= (0x1 << I2C_CCR_FS);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040d6:	61da      	str	r2, [r3, #28]

		// Set the duty cycle (not needed in standard mode)
		if (pI2CxHandle->I2C_Config.I2C_DutyCycle == I2C_FM_DUTY_2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7a1b      	ldrb	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d111      	bne.n	8004104 <I2C_Init+0x70>
		{
			pI2CxHandle->pI2Cx->CCR &= ~(0x1 << I2C_CCR_DUTY);	// Duty cycle = /2
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040ee:	61da      	str	r2, [r3, #28]
			 * Th + Tl = 3*CCR*Tpclk1
			 * Th + Tl = 3*CCR/APB1freq
			 * CCR = (Th+Tl)APB1freq/3
			 * CCR = APB1freq/(3*SCLfreq)
			 */
			CCR = PCLK1 / (3 * pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e022      	b.n	800414a <I2C_Init+0xb6>
		} else
		{
			pI2CxHandle->pI2Cx->CCR |= (0x1 << I2C_CCR_DUTY);	// Duty cycle = 16/9
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004112:	61da      	str	r2, [r3, #28]
			 * Th + Tl = 25*CCR*Tpclk1
			 * (1/SCLfreq) = 25*CCR/APB1freq
			 * SCLfreq = APB1freq/25*CCR
			 * CCR = APB1freq/(25*SCLfreq)
			 */
			CCR = PCLK1 / (25 * pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e00e      	b.n	800414a <I2C_Init+0xb6>
		}
	} else
	{
		//Configure the mode to standard
		pI2CxHandle->pI2Cx->CCR &= ~(0x1 << I2C_CCR_FS);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413a:	61da      	str	r2, [r3, #28]

		// CCR = APB1freq/(2*SCLfreq)
		CCR = PCLK1 / (2 * pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	617b      	str	r3, [r7, #20]

	}
	// Configure the Clock Control register CCR value from previously calculated value
	CCR &= 0xFFF; // ensure only 12 bits are used
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	617b      	str	r3, [r7, #20]
	pI2CxHandle->pI2Cx->CCR |= (CCR << I2C_CCR_CCR);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69d9      	ldr	r1, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]


	// 2.Configure the speed of SCL
	pI2CxHandle->pI2Cx->CR2 &= ~(0x3F << I2C_CR2_FREQ);			 	// Reset CR2 FREQ[5:0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004170:	605a      	str	r2, [r3, #4]
	pI2CxHandle->pI2Cx->CR2 |= ((PCLK1 / 1000000U) & 0x3F) << I2C_CR2_FREQ;	// Set CR2 FREQ[5:0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a57      	ldr	r2, [pc, #348]	@ (80042d8 <I2C_Init+0x244>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	0c9b      	lsrs	r3, r3, #18
 8004182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	605a      	str	r2, [r3, #4]

	//3.Configure device address (only used when slave)
	pI2CxHandle->pI2Cx->OAR[0] &= ~(0x3FF << I2C_OAR1_ADDR10BIT);	// Reset Own Address 1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800419c:	f023 0303 	bic.w	r3, r3, #3
 80041a0:	6093      	str	r3, [r2, #8]

	if (pI2CxHandle->I2C_Config.I2C_AddrMode == I2C_10BIT_SLAVE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7a9b      	ldrb	r3, [r3, #10]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d112      	bne.n	80041d0 <I2C_Init+0x13c>
	{
		pI2CxHandle->pI2Cx->OAR[0] |= (0x1 << I2C_OAR1_ADDMODE); 									// Set to 10 bit address mode
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b8:	609a      	str	r2, [r3, #8]
		pI2CxHandle->pI2Cx->OAR[0] |= (pI2CxHandle->I2C_Config.I2C_OwnAddr1 << I2C_OAR1_ADDR10BIT);	// Set the 10 bit address
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	899b      	ldrh	r3, [r3, #12]
 80041c4:	4619      	mov	r1, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	e038      	b.n	8004242 <I2C_Init+0x1ae>
	} else
	{
		pI2CxHandle->pI2Cx->OAR[0] &= ~(0x1 << I2C_OAR1_ADDMODE); 									// Set to 7 bit address mode
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041de:	609a      	str	r2, [r3, #8]
		pI2CxHandle->pI2Cx->OAR[0] |= (pI2CxHandle->I2C_Config.I2C_OwnAddr1 << I2C_OAR1_ADDR7BIT);	// Set the 7 bit address
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6899      	ldr	r1, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	899b      	ldrh	r3, [r3, #12]
 80041ea:	005a      	lsls	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]

		// Configure the second device address
		if (pI2CxHandle->I2C_Config.I2C_DualAddrEn == I2C_DUAL_ADDRESS_EN)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7adb      	ldrb	r3, [r3, #11]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d11a      	bne.n	8004232 <I2C_Init+0x19e>
		{
			pI2CxHandle->pI2Cx->OAR[1] |= (0x1 << I2C_OAR2_ENDUAL);		// enable dual 7 bit addressing
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	60da      	str	r2, [r3, #12]
			pI2CxHandle->pI2Cx->OAR[1] &= ~(0x7F << I2C_OAR2_ADDR2);	// Reset Own Address 2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 02fe 	bic.w	r2, r2, #254	@ 0xfe
 800421a:	60da      	str	r2, [r3, #12]
			pI2CxHandle->pI2Cx->OAR[1] |= (pI2CxHandle->I2C_Config.I2C_OwnAddr2 << I2C_OAR2_ADDR2); // Set the second 7 bit address
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	89db      	ldrh	r3, [r3, #14]
 8004226:	005a      	lsls	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	e007      	b.n	8004242 <I2C_Init+0x1ae>
		} else
		{
			pI2CxHandle->pI2Cx->OAR[1] &= ~(0x1 << I2C_OAR2_ENDUAL);	// disable dual 7 bit addressing
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	60da      	str	r2, [r3, #12]
	 * TRISE = FPCLK1 *
	 * Sm Trise(max) = 1000ns
	 * Fm Trise(max) = 300ns
	 */

	if (pI2CxHandle->I2C_Config.I2C_SCLSpeed > I2C_SCL_SPEED_SM1K)	// Check if configuring for standard or fast mode
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4a23      	ldr	r2, [pc, #140]	@ (80042d4 <I2C_Init+0x240>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d90d      	bls.n	8004268 <I2C_Init+0x1d4>
	{
		// Fast mode
		trise = ((PCLK1 * 30U) / 100000000U) + 1;
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	461a      	mov	r2, r3
 8004258:	4b20      	ldr	r3, [pc, #128]	@ (80042dc <I2C_Init+0x248>)
 800425a:	fba3 2302 	umull	r2, r3, r3, r2
 800425e:	0e5b      	lsrs	r3, r3, #25
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	74fb      	strb	r3, [r7, #19]
 8004266:	e007      	b.n	8004278 <I2C_Init+0x1e4>
	} else
	{
		// Standard mode
		trise = (PCLK1 / 1000000U) + 1;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <I2C_Init+0x244>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	0c9b      	lsrs	r3, r3, #18
 8004272:	b2db      	uxtb	r3, r3
 8004274:	3301      	adds	r3, #1
 8004276:	74fb      	strb	r3, [r7, #19]
	}
	pI2CxHandle->pI2Cx->TRISE = (trise & 0x3F);	// only 5 bits
 8004278:	7cfa      	ldrb	r2, [r7, #19]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004282:	621a      	str	r2, [r3, #32]


	//5. Enable the peripheral
	I2C_EnorDI(pI2CxHandle->pI2Cx, ENABLE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fee6 	bl	800405c <I2C_EnorDI>

	//6. Configure the Acking mode (can only be done once peripheral enabled)
	if (pI2CxHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLED)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7a5b      	ldrb	r3, [r3, #9]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <I2C_Init+0x216>
	{
		pI2CxHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_ACK);	// Enable Ack
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e007      	b.n	80042ba <I2C_Init+0x226>
	} else
	{
		pI2CxHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);	// Disable Ack
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b8:	601a      	str	r2, [r3, #0]
	}

	//6. Enable Error interrupts
	pI2CxHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042c8:	605a      	str	r2, [r3, #4]
}
 80042ca:	bf00      	nop
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	000186a0 	.word	0x000186a0
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	55e63b89 	.word	0x55e63b89

080042e0 <RCC_GetPCLK1_Value>:
 * @return		- APB1/PCLK1 clock frequency in Hz
 *
 * @Note		- none
 */
uint32_t RCC_GetPCLK1_Value(void)
{
 80042e0:	b4b0      	push	{r4, r5, r7}
 80042e2:	b097      	sub	sp, #92	@ 0x5c
 80042e4:	af00      	add	r7, sp, #0
	uint32_t pclk1, sysclk, hclk, clksrc, pllsrc, prediv1, pllmul,
	ahbpre, apb1pre;

	uint32_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
 80042e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004450 <RCC_GetPCLK1_Value+0x170>)
 80042e8:	f107 0414 	add.w	r4, r7, #20
 80042ec:	461d      	mov	r5, r3
 80042ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t APB1_PreScaler[4] = {2,4,8,16};
 80042fa:	4b56      	ldr	r3, [pc, #344]	@ (8004454 <RCC_GetPCLK1_Value+0x174>)
 80042fc:	1d3c      	adds	r4, r7, #4
 80042fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//1. Determine SYSCLK source
	clksrc = (RCC->CFGR & RCC_CFGR_SWS_MASK) >> RCC_CFGR_SWS;
 8004304:	4b54      	ldr	r3, [pc, #336]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (clksrc == 0) 	// HSI used as system clock
 8004310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <RCC_GetPCLK1_Value+0x3c>
	{
		sysclk = HSI_CLK_FREQ; //8 MHz
 8004316:	4b51      	ldr	r3, [pc, #324]	@ (800445c <RCC_GetPCLK1_Value+0x17c>)
 8004318:	653b      	str	r3, [r7, #80]	@ 0x50
 800431a:	e065      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
	} else if (clksrc == 1) // HSE used as system clock
 800431c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <RCC_GetPCLK1_Value+0x48>
	{
		sysclk = HSE_OSC_FREQ; //defined in main.h
 8004322:	4b4f      	ldr	r3, [pc, #316]	@ (8004460 <RCC_GetPCLK1_Value+0x180>)
 8004324:	653b      	str	r3, [r7, #80]	@ 0x50
 8004326:	e05f      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
	} else	//PLL used as system clock
	{
		//Determine PLL source
		pllsrc = (RCC->CFGR >> RCC_CFGR_PLLSRC) & 0x1;
 8004328:	4b4b      	ldr	r3, [pc, #300]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	647b      	str	r3, [r7, #68]	@ 0x44
		if (pllsrc == 0) //HSI/2 used as PLL clock
 8004334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <RCC_GetPCLK1_Value+0x60>
		{
			sysclk = HSI_CLK_FREQ / 2;
 800433a:	4b4a      	ldr	r3, [pc, #296]	@ (8004464 <RCC_GetPCLK1_Value+0x184>)
 800433c:	653b      	str	r3, [r7, #80]	@ 0x50
 800433e:	e053      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
		} else	// Clock from PREDIV1 selected as PLL clock
		{
			// this is HSE divided by either 1 or 2
			prediv1 = (RCC->CFGR >> RCC_CFGR_PLLXTPRE) & 0x1;
 8004340:	4b45      	ldr	r3, [pc, #276]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c5b      	lsrs	r3, r3, #17
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (prediv1 == 0)
 800434c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <RCC_GetPCLK1_Value+0x78>
			{
				// PREDIV1 does not divide HSE clock
				sysclk = HSE_OSC_FREQ;
 8004352:	4b43      	ldr	r3, [pc, #268]	@ (8004460 <RCC_GetPCLK1_Value+0x180>)
 8004354:	653b      	str	r3, [r7, #80]	@ 0x50
 8004356:	e001      	b.n	800435c <RCC_GetPCLK1_Value+0x7c>
			} else
			{
				// PREDIV1 divides HSE clock by 2
				sysclk = HSE_OSC_FREQ / 2;
 8004358:	4b40      	ldr	r3, [pc, #256]	@ (800445c <RCC_GetPCLK1_Value+0x17c>)
 800435a:	653b      	str	r3, [r7, #80]	@ 0x50
			}

			// Take PLLMUL into account
			pllmul = (RCC->CFGR & RCC_CFGR_PLLMUL_MASK) >> RCC_CFGR_PLLMUL;
 800435c:	4b3e      	ldr	r3, [pc, #248]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	0c9b      	lsrs	r3, r3, #18
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (pllmul == 2)
 8004368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800436a:	2b02      	cmp	r3, #2
 800436c:	d103      	bne.n	8004376 <RCC_GetPCLK1_Value+0x96>
			{
				sysclk = sysclk * 4;	//PLL input clock x4
 800436e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	653b      	str	r3, [r7, #80]	@ 0x50
 8004374:	e038      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 3)
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	2b03      	cmp	r3, #3
 800437a:	d105      	bne.n	8004388 <RCC_GetPCLK1_Value+0xa8>
			{
				sysclk = sysclk * 5;	//PLL input clock x5
 800437c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
 8004386:	e02f      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 4)
 8004388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438a:	2b04      	cmp	r3, #4
 800438c:	d106      	bne.n	800439c <RCC_GetPCLK1_Value+0xbc>
			{
				sysclk = sysclk * 6;	//PLL input clock x6
 800438e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	653b      	str	r3, [r7, #80]	@ 0x50
 800439a:	e025      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 5)
 800439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d105      	bne.n	80043ae <RCC_GetPCLK1_Value+0xce>
			{
				sysclk = sysclk * 7;	//PLL input clock x7
 80043a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ac:	e01c      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 6)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d103      	bne.n	80043bc <RCC_GetPCLK1_Value+0xdc>
			{
				sysclk = sysclk * 8;	//PLL input clock x8
 80043b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ba:	e015      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 7)
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	2b07      	cmp	r3, #7
 80043c0:	d105      	bne.n	80043ce <RCC_GetPCLK1_Value+0xee>
			{
				sysclk = sysclk * 9;	//PLL input clock x9
 80043c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80043cc:	e00c      	b.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			} else if (pllmul == 13)
 80043ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d0:	2b0d      	cmp	r3, #13
 80043d2:	d109      	bne.n	80043e8 <RCC_GetPCLK1_Value+0x108>
			{
				sysclk = (sysclk * 6) + (sysclk / 2);	//PLL input clock x6.5
 80043d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	461a      	mov	r2, r3
 80043e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	653b      	str	r3, [r7, #80]	@ 0x50
			}
		}
	}

	//2. Take AHB Prescaler into account
	ahbpre = (RCC->CFGR & RCC_CFGR_HPRE_MASK) >> RCC_CFGR_HPRE;
 80043e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (ahbpre < 8)
 80043f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f6:	2b07      	cmp	r3, #7
 80043f8:	d802      	bhi.n	8004400 <RCC_GetPCLK1_Value+0x120>
	{
		hclk = sysclk;
 80043fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fe:	e00a      	b.n	8004416 <RCC_GetPCLK1_Value+0x136>
	} else
	{
		hclk = sysclk / AHB_PreScaler[ahbpre - 8];
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	3b08      	subs	r3, #8
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	3358      	adds	r3, #88	@ 0x58
 8004408:	443b      	add	r3, r7
 800440a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800440e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	//3. Take APB1 Prescaler into account
	apb1pre = (RCC->CFGR & RCC_CFGR_PPRE1_MASK) >> RCC_CFGR_PPRE1;
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <RCC_GetPCLK1_Value+0x178>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
	if (apb1pre < 4)
 8004422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004424:	2b03      	cmp	r3, #3
 8004426:	d802      	bhi.n	800442e <RCC_GetPCLK1_Value+0x14e>
	{
		pclk1 = hclk;
 8004428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800442a:	657b      	str	r3, [r7, #84]	@ 0x54
 800442c:	e00a      	b.n	8004444 <RCC_GetPCLK1_Value+0x164>
	} else
	{
		pclk1 = hclk / APB1_PreScaler[apb1pre - 4];
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	3b04      	subs	r3, #4
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3358      	adds	r3, #88	@ 0x58
 8004436:	443b      	add	r3, r7
 8004438:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800443c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	657b      	str	r3, [r7, #84]	@ 0x54
	}

	return pclk1;
 8004444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8004446:	4618      	mov	r0, r3
 8004448:	375c      	adds	r7, #92	@ 0x5c
 800444a:	46bd      	mov	sp, r7
 800444c:	bcb0      	pop	{r4, r5, r7}
 800444e:	4770      	bx	lr
 8004450:	0800983c 	.word	0x0800983c
 8004454:	0800985c 	.word	0x0800985c
 8004458:	40021000 	.word	0x40021000
 800445c:	007a1200 	.word	0x007a1200
 8004460:	00f42400 	.word	0x00f42400
 8004464:	003d0900 	.word	0x003d0900

08004468 <I2C_Mem_MasterSendData>:
 * @return		- I2C error code
 *
 * @Note		-
 */
I2C_ERROR_CODE  I2C_Mem_MasterSendData(I2C_Handle_t *pI2CxHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t SlaveRegister, uint32_t TIMEOUT_MS)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	70fb      	strb	r3, [r7, #3]
	uint32_t TIMEDOUT = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
	SYST_STARTorSTOP(ENABLE);
 800447a:	2001      	movs	r0, #1
 800447c:	f7ff fa46 	bl	800390c <SYST_STARTorSTOP>

	//1. Generate the START condition
	I2C_GenerateSTARTCondition(pI2CxHandle->pI2Cx);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fd51 	bl	8003f2c <I2C_GenerateSTARTCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled low)
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 800448a:	e009      	b.n	80044a0 <I2C_Mem_MasterSendData+0x38>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 800448c:	f7ff fa30 	bl	80038f0 <ELAPSED_MS>
 8004490:	4602      	mov	r2, r0
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	4293      	cmp	r3, r2
 8004496:	bf34      	ite	cc
 8004498:	2301      	movcc	r3, #1
 800449a:	2300      	movcs	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f9e6 	bl	8004878 <I2C_GetFlagStatus>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <I2C_Mem_MasterSendData+0x50>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0e9      	beq.n	800448c <I2C_Mem_MasterSendData+0x24>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <I2C_Mem_MasterSendData+0x5a>
 80044be:	2306      	movs	r3, #6
 80044c0:	e0af      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

	//3. Send the address of the slave with R/W bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CxHandle->pI2Cx, SlaveAddr, WRITE);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	78f9      	ldrb	r1, [r7, #3]
 80044c8:	2200      	movs	r2, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fd4c 	bl	8003f68 <I2C_ExecuteAddressPhase>

	//4. Confirm that address phase is completed by checking the ADDR flag in SR1 register
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 80044d0:	e009      	b.n	80044e6 <I2C_Mem_MasterSendData+0x7e>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 80044d2:	f7ff fa0d 	bl	80038f0 <ELAPSED_MS>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	4293      	cmp	r3, r2
 80044dc:	bf34      	ite	cc
 80044de:	2301      	movcc	r3, #1
 80044e0:	2300      	movcs	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2102      	movs	r1, #2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f9c3 	bl	8004878 <I2C_GetFlagStatus>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <I2C_Mem_MasterSendData+0x96>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0e9      	beq.n	80044d2 <I2C_Mem_MasterSendData+0x6a>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_Mem_MasterSendData+0xa0>
 8004504:	2306      	movs	r3, #6
 8004506:	e08c      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled low)
	I2C_ClearADDRFlag(pI2CxHandle->pI2Cx);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fd4a 	bl	8003fa6 <I2C_ClearADDRFlag>

	//6. Send the Slave devices register address to which data shall be written to
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) )	// wait until TXE is set
 8004512:	e009      	b.n	8004528 <I2C_Mem_MasterSendData+0xc0>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 8004514:	f7ff f9ec 	bl	80038f0 <ELAPSED_MS>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	4293      	cmp	r3, r2
 800451e:	bf34      	ite	cc
 8004520:	2301      	movcc	r3, #1
 8004522:	2300      	movcs	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) )	// wait until TXE is set
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f9a2 	bl	8004878 <I2C_GetFlagStatus>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ec      	beq.n	8004514 <I2C_Mem_MasterSendData+0xac>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <I2C_Mem_MasterSendData+0xdc>
 8004540:	2306      	movs	r3, #6
 8004542:	e06e      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

	pI2CxHandle->pI2Cx->DR = SlaveRegister;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f897 2020 	ldrb.w	r2, [r7, #32]
 800454c:	611a      	str	r2, [r3, #16]

	//7. Send the data until Len becomes 0
	while (Len > 0)
 800454e:	e025      	b.n	800459c <I2C_Mem_MasterSendData+0x134>
	{
		while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )	// wait until TXE is set
		{
			TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 8004550:	f7ff f9ce 	bl	80038f0 <ELAPSED_MS>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	4293      	cmp	r3, r2
 800455a:	bf34      	ite	cc
 800455c:	2301      	movcc	r3, #1
 800455e:	2300      	movcs	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	617b      	str	r3, [r7, #20]
		while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )	// wait until TXE is set
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2180      	movs	r1, #128	@ 0x80
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f984 	bl	8004878 <I2C_GetFlagStatus>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <I2C_Mem_MasterSendData+0x114>
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0e9      	beq.n	8004550 <I2C_Mem_MasterSendData+0xe8>
		}
		if ( TIMEDOUT )	return USER_TIMEOUT;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_Mem_MasterSendData+0x11e>
 8004582:	2306      	movs	r3, #6
 8004584:	e04d      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

		pI2CxHandle->pI2Cx->DR = *pTxBuffer;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	3301      	adds	r3, #1
 8004594:	60bb      	str	r3, [r7, #8]
		Len--;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3b01      	subs	r3, #1
 800459a:	607b      	str	r3, [r7, #4]
	while (Len > 0)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e0      	bne.n	8004564 <I2C_Mem_MasterSendData+0xfc>
	}

	//8. When Len becomes zero wait for TXE=1 & BTF=1 before generating the STOP condition
	//	 Note: TXE=1, BTF=1, means that both SR and DR are empty and next transmission should begin
	//		  when BTF=1 SCL will be stretched (pulled low)
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )
 80045a2:	e009      	b.n	80045b8 <I2C_Mem_MasterSendData+0x150>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 80045a4:	f7ff f9a4 	bl	80038f0 <ELAPSED_MS>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf34      	ite	cc
 80045b0:	2301      	movcc	r3, #1
 80045b2:	2300      	movcs	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2180      	movs	r1, #128	@ 0x80
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f95a 	bl	8004878 <I2C_GetFlagStatus>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <I2C_Mem_MasterSendData+0x168>
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0e9      	beq.n	80045a4 <I2C_Mem_MasterSendData+0x13c>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <I2C_Mem_MasterSendData+0x186>
 80045d6:	2306      	movs	r3, #6
 80045d8:	e023      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_BTF)) && (!TIMEDOUT) )
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 80045da:	f7ff f989 	bl	80038f0 <ELAPSED_MS>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bf34      	ite	cc
 80045e6:	2301      	movcc	r3, #1
 80045e8:	2300      	movcs	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_BTF)) && (!TIMEDOUT) )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2104      	movs	r1, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f93f 	bl	8004878 <I2C_GetFlagStatus>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <I2C_Mem_MasterSendData+0x19e>
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0e9      	beq.n	80045da <I2C_Mem_MasterSendData+0x172>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <I2C_Mem_MasterSendData+0x1a8>
 800460c:	2306      	movs	r3, #6
 800460e:	e008      	b.n	8004622 <I2C_Mem_MasterSendData+0x1ba>

	//9. Generate STOP condition and master need not to wait for the completion of STOP condition.
	//   Note: generating STOP, automatically clears the BTF
	I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fc98 	bl	8003f4a <I2C_GenerateSTOPCondition>

	SYST_STARTorSTOP(DISABLE);
 800461a:	2000      	movs	r0, #0
 800461c:	f7ff f976 	bl	800390c <SYST_STARTorSTOP>

	return I2C_NO_ERROR;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <I2C_Mem_MasterReceiveData>:
 * @return		- I2C error code
 *
 * @Note		-
 */
I2C_ERROR_CODE I2C_Mem_MasterReceiveData(I2C_Handle_t *pI2CxHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t SlaveRegister, uint32_t TIMEOUT_MS)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	70fb      	strb	r3, [r7, #3]
	uint32_t TIMEDOUT = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
	SYST_STARTorSTOP(ENABLE);
 800463c:	2001      	movs	r0, #1
 800463e:	f7ff f965 	bl	800390c <SYST_STARTorSTOP>

	// This line somehow makes it work every time?
	//uint32_t temp = ELAPSED_MS();

	//1. Generate the START condition
	I2C_GenerateSTARTCondition(pI2CxHandle->pI2Cx);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fc70 	bl	8003f2c <I2C_GenerateSTARTCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled low)
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 800464c:	e009      	b.n	8004662 <I2C_Mem_MasterReceiveData+0x38>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 800464e:	f7ff f94f 	bl	80038f0 <ELAPSED_MS>
 8004652:	4602      	mov	r2, r0
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	4293      	cmp	r3, r2
 8004658:	bf34      	ite	cc
 800465a:	2301      	movcc	r3, #1
 800465c:	2300      	movcs	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f905 	bl	8004878 <I2C_GetFlagStatus>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d102      	bne.n	800467a <I2C_Mem_MasterReceiveData+0x50>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0e9      	beq.n	800464e <I2C_Mem_MasterReceiveData+0x24>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_Mem_MasterReceiveData+0x5a>
 8004680:	2306      	movs	r3, #6
 8004682:	e0f5      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

	//3. Send the address of the slave with R/W bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CxHandle->pI2Cx, SlaveAddr, WRITE);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	78f9      	ldrb	r1, [r7, #3]
 800468a:	2200      	movs	r2, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fc6b 	bl	8003f68 <I2C_ExecuteAddressPhase>

	//4. Confirm that address phase is completed by checking the ADDR flag 	while( ! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR) );
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 8004692:	e009      	b.n	80046a8 <I2C_Mem_MasterReceiveData+0x7e>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 8004694:	f7ff f92c 	bl	80038f0 <ELAPSED_MS>
 8004698:	4602      	mov	r2, r0
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	4293      	cmp	r3, r2
 800469e:	bf34      	ite	cc
 80046a0:	2301      	movcc	r3, #1
 80046a2:	2300      	movcs	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f8e2 	bl	8004878 <I2C_GetFlagStatus>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <I2C_Mem_MasterReceiveData+0x96>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0e9      	beq.n	8004694 <I2C_Mem_MasterReceiveData+0x6a>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_Mem_MasterReceiveData+0xa0>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e0d2      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled low)
	I2C_ClearADDRFlag(pI2CxHandle->pI2Cx);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fc69 	bl	8003fa6 <I2C_ClearADDRFlag>

	//6. Send the Slave devices register address to which data shall be written to
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )	// wait until TXE is set
 80046d4:	e009      	b.n	80046ea <I2C_Mem_MasterReceiveData+0xc0>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 80046d6:	f7ff f90b 	bl	80038f0 <ELAPSED_MS>
 80046da:	4602      	mov	r2, r0
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	4293      	cmp	r3, r2
 80046e0:	bf34      	ite	cc
 80046e2:	2301      	movcc	r3, #1
 80046e4:	2300      	movcs	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_TXE)) && (!TIMEDOUT) )	// wait until TXE is set
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2180      	movs	r1, #128	@ 0x80
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f8c1 	bl	8004878 <I2C_GetFlagStatus>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d102      	bne.n	8004702 <I2C_Mem_MasterReceiveData+0xd8>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0e9      	beq.n	80046d6 <I2C_Mem_MasterReceiveData+0xac>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <I2C_Mem_MasterReceiveData+0xe2>
 8004708:	2306      	movs	r3, #6
 800470a:	e0b1      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

	pI2CxHandle->pI2Cx->DR = SlaveRegister;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004714:	611a      	str	r2, [r3, #16]

	//7. Generate the RE-START condition
	I2C_GenerateSTARTCondition(pI2CxHandle->pI2Cx);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fc06 	bl	8003f2c <I2C_GenerateSTARTCondition>

	//8. Confirm that RE-START generation is completed by checking the SB flag in the SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled low)
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 8004720:	e009      	b.n	8004736 <I2C_Mem_MasterReceiveData+0x10c>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 8004722:	f7ff f8e5 	bl	80038f0 <ELAPSED_MS>
 8004726:	4602      	mov	r2, r0
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	4293      	cmp	r3, r2
 800472c:	bf34      	ite	cc
 800472e:	2301      	movcc	r3, #1
 8004730:	2300      	movcs	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_SB)) && (!TIMEDOUT) )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f89b 	bl	8004878 <I2C_GetFlagStatus>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <I2C_Mem_MasterReceiveData+0x124>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0e9      	beq.n	8004722 <I2C_Mem_MasterReceiveData+0xf8>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <I2C_Mem_MasterReceiveData+0x12e>
 8004754:	2306      	movs	r3, #6
 8004756:	e08b      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

	//9. Send the address of the slave with R/W bit set to r(1) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CxHandle->pI2Cx, SlaveAddr, READ);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	78f9      	ldrb	r1, [r7, #3]
 800475e:	2201      	movs	r2, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fc01 	bl	8003f68 <I2C_ExecuteAddressPhase>

	//10. Confirm that address phase is completed by checking the ADDR flag in SR1 register
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 8004766:	e009      	b.n	800477c <I2C_Mem_MasterReceiveData+0x152>
	{
		TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 8004768:	f7ff f8c2 	bl	80038f0 <ELAPSED_MS>
 800476c:	4602      	mov	r2, r0
 800476e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004770:	4293      	cmp	r3, r2
 8004772:	bf34      	ite	cc
 8004774:	2301      	movcc	r3, #1
 8004776:	2300      	movcs	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	617b      	str	r3, [r7, #20]
	while( (! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_ADDR)) && (!TIMEDOUT) )
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2102      	movs	r1, #2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f878 	bl	8004878 <I2C_GetFlagStatus>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <I2C_Mem_MasterReceiveData+0x16a>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0e9      	beq.n	8004768 <I2C_Mem_MasterReceiveData+0x13e>
	}
	if ( TIMEDOUT )	return USER_TIMEOUT;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <I2C_Mem_MasterReceiveData+0x174>
 800479a:	2306      	movs	r3, #6
 800479c:	e068      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

	//11. Clear the ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CxHandle->pI2Cx);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fbff 	bl	8003fa6 <I2C_ClearADDRFlag>

	//12. For single byte reception disable ACK and issue STOP byte
	if (Len == 1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10d      	bne.n	80047ca <I2C_Mem_MasterReceiveData+0x1a0>
	{
		pI2CxHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);		// Disable ACK
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047bc:	601a      	str	r2, [r3, #0]
		I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);		// Generate STOP condition
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fbc1 	bl	8003f4a <I2C_GenerateSTOPCondition>
 80047c8:	e03f      	b.n	800484a <I2C_Mem_MasterReceiveData+0x220>
	} else
	{
		pI2CxHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);		// Enable ACK
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d8:	601a      	str	r2, [r3, #0]
	}

	//13. Read the data until Len becomes 0
	//   when the second last byte is in the DR, Disable ACK & issue STOP
	//   so it automatically happens after final byte transfer
	while (Len > 0)
 80047da:	e036      	b.n	800484a <I2C_Mem_MasterReceiveData+0x220>
	{
		while( ! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_RXNE) && (!TIMEDOUT) )	// wait until RXNE is set
		{
			TIMEDOUT = (ELAPSED_MS() > TIMEOUT_MS);
 80047dc:	f7ff f888 	bl	80038f0 <ELAPSED_MS>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf34      	ite	cc
 80047e8:	2301      	movcc	r3, #1
 80047ea:	2300      	movcs	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	617b      	str	r3, [r7, #20]
		while( ! I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_FLAG_RXNE) && (!TIMEDOUT) )	// wait until RXNE is set
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2140      	movs	r1, #64	@ 0x40
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f83e 	bl	8004878 <I2C_GetFlagStatus>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <I2C_Mem_MasterReceiveData+0x1de>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0e9      	beq.n	80047dc <I2C_Mem_MasterReceiveData+0x1b2>
		}
		if ( TIMEDOUT )	return USER_TIMEOUT;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <I2C_Mem_MasterReceiveData+0x1e8>
 800480e:	2306      	movs	r3, #6
 8004810:	e02e      	b.n	8004870 <I2C_Mem_MasterReceiveData+0x246>

		if (Len == 2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d10c      	bne.n	8004832 <I2C_Mem_MasterReceiveData+0x208>
		{
			pI2CxHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);	// Disable ACK
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004826:	601a      	str	r2, [r3, #0]
			I2C_GenerateSTOPCondition(pI2CxHandle->pI2Cx);	// Generate STOP condition
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fb8c 	bl	8003f4a <I2C_GenerateSTOPCondition>
		}

		*pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	701a      	strb	r2, [r3, #0]
		pRxBuffer++;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	3301      	adds	r3, #1
 8004842:	60bb      	str	r3, [r7, #8]
		Len--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
	while (Len > 0)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1cf      	bne.n	80047f0 <I2C_Mem_MasterReceiveData+0x1c6>
	}

	//14. Re-enable ACKing if it was enabled in Init
	if (pI2CxHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLED)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	7a5b      	ldrb	r3, [r3, #9]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <I2C_Mem_MasterReceiveData+0x23e>
	{
		pI2CxHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004866:	601a      	str	r2, [r3, #0]
	}

	SYST_STARTorSTOP(DISABLE);
 8004868:	2000      	movs	r0, #0
 800486a:	f7ff f84f 	bl	800390c <SYST_STARTorSTOP>
	return I2C_NO_ERROR;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_GetFlagStatus>:
 * @return		- whether flag is set or not
 *
 * @Note		- Doesn't check flags in SR2
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR[0] & FlagName)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <I2C_GetFlagStatus+0x1c>
	} else
	{
		return FLAG_RESET;
 8004892:	2300      	movs	r3, #0
	}
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <I2C_ER_IRQHandling>:
 * @return		-
 *
 * @Note		-
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CxHandle)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CxHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR[0]) & ( 1<< I2C_SR1_BERR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048bc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00e      	beq.n	80048e2 <I2C_ER_IRQHandling+0x44>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the bus error flag
		pI2CxHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_BERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048d8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CxHandle,I2C_BUS_ERROR);
 80048da:	2101      	movs	r1, #1
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fd fc73 	bl	80021c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR[0]) & ( 1 << I2C_SR1_ARLO );
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ec:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <I2C_ER_IRQHandling+0x74>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CxHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_ARLO);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004908:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ARLO_ERROR);
 800490a:	2103      	movs	r1, #3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fd fc5b 	bl	80021c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR[0]) & ( 1 << I2C_SR1_AF);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00e      	beq.n	8004942 <I2C_ER_IRQHandling+0xa4>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CxHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_AF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004938:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ACK_ERROR);
 800493a:	2102      	movs	r1, #2
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7fd fc43 	bl	80021c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR[0]) & ( 1 << I2C_SR1_OVR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <I2C_ER_IRQHandling+0xd4>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CxHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_OVR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004968:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_OVR);
 800496a:	2105      	movs	r1, #5
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fd fc2b 	bl	80021c8 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR[0]) & ( 1 << I2C_SR1_TIMEOUT);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <I2C_ER_IRQHandling+0x104>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CxHandle->pI2Cx->SR[0] &= ~( 1 << I2C_SR1_TIMEOUT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004998:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_TIMEOUT_ERROR);
 800499a:	2104      	movs	r1, #4
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fd fc13 	bl	80021c8 <I2C_ApplicationEventCallback>
	}
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <RCC_Init_SysClk>:
 * @return		- none
 *
 * @Note		- max system clock speed = 48/72MHz
 */
void RCC_Init_SysClk(RCC_SysConfig_t *pSysConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	uint8_t PllRdy = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
	if (pSysConfig->SysClkSrc == RCC_SW_HSI)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10c      	bne.n	80049da <RCC_Init_SysClk+0x2e>
	{

		RCC->CR |= 0x1 << 0; 		// Set HSI to ON
 80049c0:	4b40      	ldr	r3, [pc, #256]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	6013      	str	r3, [r2, #0]
		RCC->CFGR &= ~(0x3 << 0); 	// Set HSI to system clock
 80049cc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	6053      	str	r3, [r2, #4]
			PllRdy = (uint8_t) ((RCC->CR >> 25) & 0x1);
		} while (PllRdy == 0);

		RCC->CFGR |= (RCC_SW_PLL << 0);	// Set PLL as the system clock
	}
}
 80049d8:	e06f      	b.n	8004aba <RCC_Init_SysClk+0x10e>
	} else if (pSysConfig->SysClkSrc == RCC_SW_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d112      	bne.n	8004a08 <RCC_Init_SysClk+0x5c>
		RCC->CR |= 0x1 << 16; 		// Set HSE to ON
 80049e2:	4b38      	ldr	r3, [pc, #224]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a37      	ldr	r2, [pc, #220]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
		RCC->CFGR &= ~(0x3 << 0);	// Reset system clock mux
 80049ee:	4b35      	ldr	r3, [pc, #212]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4a34      	ldr	r2, [pc, #208]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049f4:	f023 0303 	bic.w	r3, r3, #3
 80049f8:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_SWS_HSE; 	// Set HSE to system clock
 80049fa:	4b32      	ldr	r3, [pc, #200]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6053      	str	r3, [r2, #4]
}
 8004a06:	e058      	b.n	8004aba <RCC_Init_SysClk+0x10e>
	} else if (pSysConfig->SysClkSrc == RCC_SW_PLL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d154      	bne.n	8004aba <RCC_Init_SysClk+0x10e>
		RCC->CFGR &= ~(0x3 << 0);	// Set HSI to system clock so that PLL settings can be configured
 8004a10:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	6053      	str	r3, [r2, #4]
		RCC->CR &= ~(0x1 << 24);	// Turn off PLL Clock so that PLL settings can be configured
 8004a1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a28      	ldr	r2, [pc, #160]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	6013      	str	r3, [r2, #0]
		if (pSysConfig->PllConfig.PLLsrc == RCC_PLL_SRC_HSI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <RCC_Init_SysClk+0x92>
			RCC->CFGR &= ~(0x1 << 16); // Set PLL source to HSI
 8004a30:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e019      	b.n	8004a72 <RCC_Init_SysClk+0xc6>
			RCC->CR |= 0x1 << 16; 							// Enable HSE Clock
 8004a3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a20      	ldr	r2, [pc, #128]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (0x1 << 16); 						// Set PLL source to HSE
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a54:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(0x1 << 17); 						// Reset value in PLLXTPRE
 8004a56:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a60:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (pSysConfig->PllConfig.PLLHSEDiv << 17);	// Set PLL HSE source division factor (PREDIV1/PLLXTPRE)
 8004a62:	4b18      	ldr	r3, [pc, #96]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	789b      	ldrb	r3, [r3, #2]
 8004a6a:	045b      	lsls	r3, r3, #17
 8004a6c:	4915      	ldr	r1, [pc, #84]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
		RCC->CFGR &= ~(0xF << 18);							//Reset the PLL Multiplier to default value
 8004a72:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a78:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8004a7c:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= pSysConfig->PllConfig.PLLMul << 18;	//Set the PLL Multiplier
 8004a7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	78db      	ldrb	r3, [r3, #3]
 8004a86:	049b      	lsls	r3, r3, #18
 8004a88:	490e      	ldr	r1, [pc, #56]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
		RCC->CR |= (0x1 << 24);	// Enable the PLL Clock
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a98:	6013      	str	r3, [r2, #0]
			PllRdy = (uint8_t) ((RCC->CR >> 25) & 0x1);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	0e5b      	lsrs	r3, r3, #25
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
		} while (PllRdy == 0);
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f5      	beq.n	8004a9a <RCC_Init_SysClk+0xee>
		RCC->CFGR |= (RCC_SW_PLL << 0);	// Set PLL as the system clock
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <RCC_Init_SysClk+0x118>)
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	6053      	str	r3, [r2, #4]
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <RCC_Init_AHBClk>:
 * @return		- none
 *
 * @Note		- Max AHB clock speed = 48/72MHz
 */
void RCC_Init_AHBClk(RCC_Prescalers_t *RccPrescalers)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	RCC->CFGR &= ~(0xF << 4); 							// Reset the AHB prescaler
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <RCC_Init_AHBClk+0x30>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	@ (8004af8 <RCC_Init_AHBClk+0x30>)
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ada:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RccPrescalers->AHBprescaler << 4);	// Set the AHB prescaler
 8004adc:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <RCC_Init_AHBClk+0x30>)
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	4904      	ldr	r1, [pc, #16]	@ (8004af8 <RCC_Init_AHBClk+0x30>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40021000 	.word	0x40021000

08004afc <RCC_Init_PCLK1>:
 * @return		- none
 *
 * @Note		- Maximum frequency for APB1 = 36MHz
 */
void RCC_Init_PCLK1(RCC_Prescalers_t *RccPrescalers)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	RCC->CFGR &= ~(0x7 << 8); 							// Reset the APB1 prescaler
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <RCC_Init_PCLK1+0x30>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <RCC_Init_PCLK1+0x30>)
 8004b0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b0e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RccPrescalers->APB1prescaler << 8);	// Set the APB1 prescaler
 8004b10:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <RCC_Init_PCLK1+0x30>)
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	4904      	ldr	r1, [pc, #16]	@ (8004b2c <RCC_Init_PCLK1+0x30>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bc80      	pop	{r7}
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000

08004b30 <RCC_Init_PCLK2>:
 * @return		- none
 *
 * @Note		- Maximum frequency for APB2 = 48/72MHz
 */
void RCC_Init_PCLK2(RCC_Prescalers_t *RccPrescalers)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	RCC->CFGR &= ~(0x7 << 11); 							// Reset the APB2 prescaler
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <RCC_Init_PCLK2+0x30>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	@ (8004b60 <RCC_Init_PCLK2+0x30>)
 8004b3e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004b42:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RccPrescalers->APB2prescaler << 11);	// Set the APB2 prescaler
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <RCC_Init_PCLK2+0x30>)
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	789b      	ldrb	r3, [r3, #2]
 8004b4c:	02db      	lsls	r3, r3, #11
 8004b4e:	4904      	ldr	r1, [pc, #16]	@ (8004b60 <RCC_Init_PCLK2+0x30>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000

08004b64 <RCC_Init_ADCCLK>:
 * @return		- none
 *
 * @Note		-
 */
void RCC_Init_ADCCLK(RCC_Prescalers_t *RccPrescalers)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	RCC->CFGR &= ~(0x3 << 14); 							// Reset the ADC prescaler
 8004b6c:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <RCC_Init_ADCCLK+0x30>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a08      	ldr	r2, [pc, #32]	@ (8004b94 <RCC_Init_ADCCLK+0x30>)
 8004b72:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004b76:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RccPrescalers->ADCprescaler << 14);	// Set the ADC prescaler
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <RCC_Init_ADCCLK+0x30>)
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	039b      	lsls	r3, r3, #14
 8004b82:	4904      	ldr	r1, [pc, #16]	@ (8004b94 <RCC_Init_ADCCLK+0x30>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000

08004b98 <SPI_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d115      	bne.n	8004bd6 <SPI_PeriClockControl+0x3e>
	{
		if (pSPIx == SPI1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <SPI_PeriClockControl+0x74>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d106      	bne.n	8004bc0 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8004bb2:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4a16      	ldr	r2, [pc, #88]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bbc:	6193      	str	r3, [r2, #24]
		}else if (pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
	}
}
 8004bbe:	e01f      	b.n	8004c00 <SPI_PeriClockControl+0x68>
		}else if (pSPIx == SPI2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <SPI_PeriClockControl+0x7c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d11b      	bne.n	8004c00 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_EN();
 8004bc8:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4a10      	ldr	r2, [pc, #64]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bd2:	61d3      	str	r3, [r2, #28]
}
 8004bd4:	e014      	b.n	8004c00 <SPI_PeriClockControl+0x68>
		if (pSPIx == SPI1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004c0c <SPI_PeriClockControl+0x74>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d106      	bne.n	8004bec <SPI_PeriClockControl+0x54>
			SPI1_PCLK_DI();
 8004bde:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4a0b      	ldr	r2, [pc, #44]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004be4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be8:	6193      	str	r3, [r2, #24]
}
 8004bea:	e009      	b.n	8004c00 <SPI_PeriClockControl+0x68>
		}else if (pSPIx == SPI2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a09      	ldr	r2, [pc, #36]	@ (8004c14 <SPI_PeriClockControl+0x7c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d105      	bne.n	8004c00 <SPI_PeriClockControl+0x68>
			SPI2_PCLK_DI();
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <SPI_PeriClockControl+0x78>)
 8004bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bfe:	61d3      	str	r3, [r2, #28]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40013000 	.word	0x40013000
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40003800 	.word	0x40003800

08004c18 <SPI_Init>:
 * @return		- none
 *
 * @Note		- none
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	uint16_t tempreg = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	81fb      	strh	r3, [r7, #14]

	// Enable the SPI clock source
	SPI_PeriClockControl(pSPIxHandle->pSPI, ENABLE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ffb4 	bl	8004b98 <SPI_PeriClockControl>

	/* Procedure for configuring in SPI master mode */
	if (pSPIxHandle->SPIConfig.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d13e      	bne.n	8004cb6 <SPI_Init+0x9e>
	{
		// 1. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register).
		tempreg |= (pSPIxHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	7a9b      	ldrb	r3, [r3, #10]
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	b21a      	sxth	r2, r3
 8004c40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	81fb      	strh	r3, [r7, #14]

		/*
		 * 2. Select the CPOL and CPHA bits to define one of the four relationships between the
		 * data transfer and the serial clock (see Figure 240).
		 */
		tempreg |= (pSPIxHandle->SPIConfig.SPI_ClockPhase << SPI_CR1_CPHA);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	79db      	ldrb	r3, [r3, #7]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	81fb      	strh	r3, [r7, #14]
		tempreg |= (pSPIxHandle->SPIConfig.SPI_ClockPolarity << SPI_CR1_CPOL);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7a1b      	ldrb	r3, [r3, #8]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	81fb      	strh	r3, [r7, #14]

		// 3. Set the DFF bit to define 8- or 16-bit data frame format
		tempreg |= (pSPIxHandle->SPIConfig.SPI_BusConfig.DataWidth << SPI_CR1_DFF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	799b      	ldrb	r3, [r3, #6]
 8004c6c:	02db      	lsls	r3, r3, #11
 8004c6e:	b21a      	sxth	r2, r3
 8004c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	81fb      	strh	r3, [r7, #14]

		// 4. Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
		tempreg |= (pSPIxHandle->SPIConfig.SPI_BusConfig.LSBFirst << SPI_CR1_LSBFIRST);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	795b      	ldrb	r3, [r3, #5]
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	b21a      	sxth	r2, r3
 8004c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	81fb      	strh	r3, [r7, #14]

		/*
		 * For master mode
		 */
		tempreg |= (pSPIxHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7a5b      	ldrb	r3, [r3, #9]
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b21a      	sxth	r2, r3
 8004c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	b21b      	sxth	r3, r3
 8004c9c:	81fb      	strh	r3, [r7, #14]
		if (pSPIxHandle->SPIConfig.SPI_SSM == SPI_SSM_EN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	7a5b      	ldrb	r3, [r3, #9]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d103      	bne.n	8004cae <SPI_Init+0x96>
			 * When SSM is enabled in master mode, you need to set a 1 to the SSI bit
			 * if the SPE is enabled whilst SSI is 0 a MODF error occurs.
			 * Because the device recognised another source driving the NSS line resulting
			 * in it being reconfigured as a slave
			 */
			tempreg |= (0x1 << SPI_CR1_SSI);
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cac:	81fb      	strh	r3, [r7, #14]

		/*
		 * 6. The MSTR and SPE bits must be set (they remain set only if the NSS pin is connected
		 * to a high-level signal).
		 */
		tempreg |= (0x1 << SPI_CR1_MSTR);	/* Set the MTSR (master selection) */
 8004cae:	89fb      	ldrh	r3, [r7, #14]
 8004cb0:	f043 0304 	orr.w	r3, r3, #4
 8004cb4:	81fb      	strh	r3, [r7, #14]
	} else if (pSPIxHandle->SPIConfig.SPI_DeviceMode == SPI_DEVICE_MODE_SLAVE)
	{
		// Not written as the PetriDish board doesn't support this functionality
	}

	pSPIxHandle->pSPI->CR[0] = tempreg;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	89fa      	ldrh	r2, [r7, #14]
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <SPI_SendData>:
 *
 * @Note		- this is blocking/polling based implementation, meaning the processor cannot execute other steps
 * 				  whilst executing it
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
	if (Len != 0)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04a      	beq.n	8004d6e <SPI_SendData+0xa8>
	{
		SPI_EnorDI(pSPIx, ENABLE);
 8004cd8:	2101      	movs	r1, #1
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f8bf 	bl	8004e5e <SPI_EnorDI>
		while (Len > 0)
 8004ce0:	e03e      	b.n	8004d60 <SPI_SendData+0x9a>
		{
			//1. Check Tx buffer is empty from the SPI_SR TXE bit
			while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8004ce2:	bf00      	nop
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f8a6 	bl	8004e38 <SPI_GetFlagStatus>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f8      	beq.n	8004ce4 <SPI_SendData+0x1e>

			//2. Check the DFF bit in CR1 to determine data format
			if ((pSPIx->CR[0] & (1 << SPI_CR1_DFF)))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00e      	beq.n	8004d1c <SPI_SendData+0x56>
			{
				// 16-bit mode
				pSPIx->DR = *((uint16_t*)pTxBuffer);	// Convert to uint16_t pointer, then deference the pointer
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	60da      	str	r2, [r3, #12]
				Len--;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
				Len--;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxBuffer++;		// increment the pointer by 2 bytes
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	e00a      	b.n	8004d32 <SPI_SendData+0x6c>
			} else
			{
				// 8-bit mode
				pSPIx->DR = *pTxBuffer;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	60da      	str	r2, [r3, #12]
				Len--;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	607b      	str	r3, [r7, #4]
				pTxBuffer++;				// increment the pointer by 1 bytes
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
			}

			// Wait for TX transmit to complete
			while(SPI_GetFlagStatus(pSPIx, SPI_BUSY_FLAG) == FLAG_SET);
 8004d32:	bf00      	nop
 8004d34:	2180      	movs	r1, #128	@ 0x80
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f87e 	bl	8004e38 <SPI_GetFlagStatus>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d0f8      	beq.n	8004d34 <SPI_SendData+0x6e>

			/*
			 * Couldn't find any explanation as to why the below is required
			 * Without it, later SPI read data arrives in the wrong order
			 */
			if (SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_SET)
 8004d42:	2101      	movs	r1, #1
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f877 	bl	8004e38 <SPI_GetFlagStatus>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <SPI_SendData+0x9a>
			{
				pSPIx->DR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
				pSPIx->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68db      	ldr	r3, [r3, #12]
				pSPIx->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68db      	ldr	r3, [r3, #12]
				pSPIx->DR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
		while (Len > 0)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1bd      	bne.n	8004ce2 <SPI_SendData+0x1c>
			}

		}
		SPI_EnorDI(pSPIx, DISABLE);
 8004d66:	2100      	movs	r1, #0
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f878 	bl	8004e5e <SPI_EnorDI>
	}
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <SPI_SendReceiveData>:
 *
 * @Note		- this is blocking/polling based implementation, meaning the processor cannot execute other steps
 * 				  whilst executing it
 */
void SPI_SendReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint8_t *pRxBuffer, uint32_t Len)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
	if (Len != 0)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d052      	beq.n	8004e30 <SPI_SendReceiveData+0xba>
	{
		SPI_EnorDI(pSPIx, ENABLE);
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f866 	bl	8004e5e <SPI_EnorDI>
		while (Len > 0)
 8004d92:	e046      	b.n	8004e22 <SPI_SendReceiveData+0xac>
		{
			//1. Check Tx buffer is empty from the SPI_SR TXE bit
			while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8004d94:	bf00      	nop
 8004d96:	2102      	movs	r1, #2
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f84d 	bl	8004e38 <SPI_GetFlagStatus>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f8      	beq.n	8004d96 <SPI_SendReceiveData+0x20>

			//2. Check the DFF bit in CR1 to determine data format
			if ((pSPIx->CR[0] & (1 << SPI_CR1_DFF)))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <SPI_SendReceiveData+0x4c>
			{
				// 16-bit mode
				pSPIx->DR = *((uint16_t*)pTxBuffer);	// Convert to uint16_t pointer, then deference the pointer
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	60da      	str	r2, [r3, #12]
				(uint16_t*)pTxBuffer++;		// increment the pointer by 2 bytes
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	e007      	b.n	8004dd2 <SPI_SendReceiveData+0x5c>
			} else
			{
				// 8-bit mode
				pSPIx->DR = *pTxBuffer;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	60da      	str	r2, [r3, #12]
				pTxBuffer++;				// increment the pointer by 1 bytes
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60bb      	str	r3, [r7, #8]
			}

			//3. Check Rx buffer is not empty from the SPI_SR RXNE bit
			while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8004dd2:	bf00      	nop
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f82e 	bl	8004e38 <SPI_GetFlagStatus>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f8      	beq.n	8004dd4 <SPI_SendReceiveData+0x5e>

			//4. Check the DFF bit in CR1 to determine data format
			if ((pSPIx->CR[0] & (1 << SPI_CR1_DFF)))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00e      	beq.n	8004e0c <SPI_SendReceiveData+0x96>
			{
				// 16-bit mode
				// Load the data from DR into Rx buffer address
				*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	801a      	strh	r2, [r3, #0]
				Len--;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	603b      	str	r3, [r7, #0]
				Len--;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	603b      	str	r3, [r7, #0]
				(uint16_t*)pRxBuffer++;		// increment the pointer by 2 bytes
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3301      	adds	r3, #1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	e00a      	b.n	8004e22 <SPI_SendReceiveData+0xac>
			} else
			{
				// 8-bit mode
				// Load the data from DR into Rx buffer address
				*pRxBuffer = pSPIx->DR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	701a      	strb	r2, [r3, #0]
				Len--;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	603b      	str	r3, [r7, #0]
				pRxBuffer++;				// increment the pointer by 1 bytes
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
		while (Len > 0)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1b5      	bne.n	8004d94 <SPI_SendReceiveData+0x1e>
			}
		}
		SPI_EnorDI(pSPIx, DISABLE);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 f817 	bl	8004e5e <SPI_EnorDI>
	}
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <SPI_GetFlagStatus>:
 * @return		- 1 for flag set, 0 for flag not set
 *
 * @Note		-
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & FlagName)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <SPI_GetFlagStatus+0x1c>
	} else
	{
		return FLAG_RESET;
 8004e52:	2300      	movs	r3, #0
	}
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <SPI_EnorDI>:
 * @return		-
 *
 * @Note		-
 */
void SPI_EnorDI(SPI_RegDef_t *pSPIx, uint8_t EnorDI)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	460b      	mov	r3, r1
 8004e68:	70fb      	strb	r3, [r7, #3]
	if (EnorDI)
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <SPI_EnorDI+0x20>
	{
		pSPIx->CR[0] |= (0x1 << SPI_CR1_SPE);	/* Enables the SPI peripheral (SPE) */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
		//2. Wait for SPI Peripheral to not be busy
		while(SPI_GetFlagStatus(pSPIx, SPI_BUSY_FLAG) == FLAG_SET);
		pSPIx->CR[0] &= ~(0x1 << SPI_CR1_SPE);	/* Disable the SPI peripheral (SPE) */
	}

}
 8004e7c:	e015      	b.n	8004eaa <SPI_EnorDI+0x4c>
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8004e7e:	bf00      	nop
 8004e80:	2102      	movs	r1, #2
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7ff ffd8 	bl	8004e38 <SPI_GetFlagStatus>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f8      	beq.n	8004e80 <SPI_EnorDI+0x22>
		while(SPI_GetFlagStatus(pSPIx, SPI_BUSY_FLAG) == FLAG_SET);
 8004e8e:	bf00      	nop
 8004e90:	2180      	movs	r1, #128	@ 0x80
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ffd0 	bl	8004e38 <SPI_GetFlagStatus>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d0f8      	beq.n	8004e90 <SPI_EnorDI+0x32>
		pSPIx->CR[0] &= ~(0x1 << SPI_CR1_SPE);	/* Disable the SPI peripheral (SPE) */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
	...

08004eb4 <TIM_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void TIM_PeriClockControl(TIM_RegDef_t *pTIMx, uint8_t EnorDi)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d12b      	bne.n	8004f1e <TIM_PeriClockControl+0x6a>
	{
		if (pTIMx == TIM1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8004f80 <TIM_PeriClockControl+0xcc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d106      	bne.n	8004edc <TIM_PeriClockControl+0x28>
		{
			TIM1_PCLK_EN();
 8004ece:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004ed4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ed8:	6193      	str	r3, [r2, #24]
		}else if (pTIMx == TIM4)
		{
			TIM4_PCLK_DI();
		}
	}
}
 8004eda:	e04b      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d106      	bne.n	8004ef2 <TIM_PeriClockControl+0x3e>
			TIM2_PCLK_EN();
 8004ee4:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	4a26      	ldr	r2, [pc, #152]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004eea:	f043 0301 	orr.w	r3, r3, #1
 8004eee:	61d3      	str	r3, [r2, #28]
}
 8004ef0:	e040      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM3)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	@ (8004f88 <TIM_PeriClockControl+0xd4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d106      	bne.n	8004f08 <TIM_PeriClockControl+0x54>
			TIM3_PCLK_EN();
 8004efa:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f00:	f043 0302 	orr.w	r3, r3, #2
 8004f04:	61d3      	str	r3, [r2, #28]
}
 8004f06:	e035      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM4)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a20      	ldr	r2, [pc, #128]	@ (8004f8c <TIM_PeriClockControl+0xd8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d131      	bne.n	8004f74 <TIM_PeriClockControl+0xc0>
			TIM4_PCLK_EN();
 8004f10:	4b1c      	ldr	r3, [pc, #112]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	61d3      	str	r3, [r2, #28]
}
 8004f1c:	e02a      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		if (pTIMx == TIM1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <TIM_PeriClockControl+0xcc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d106      	bne.n	8004f34 <TIM_PeriClockControl+0x80>
			TIM1_PCLK_DI();
 8004f26:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f30:	6193      	str	r3, [r2, #24]
}
 8004f32:	e01f      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3a:	d106      	bne.n	8004f4a <TIM_PeriClockControl+0x96>
			TIM2_PCLK_DI();
 8004f3c:	4b11      	ldr	r3, [pc, #68]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	4a10      	ldr	r2, [pc, #64]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	61d3      	str	r3, [r2, #28]
}
 8004f48:	e014      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM3)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004f88 <TIM_PeriClockControl+0xd4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d106      	bne.n	8004f60 <TIM_PeriClockControl+0xac>
			TIM3_PCLK_DI();
 8004f52:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4a0b      	ldr	r2, [pc, #44]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	61d3      	str	r3, [r2, #28]
}
 8004f5e:	e009      	b.n	8004f74 <TIM_PeriClockControl+0xc0>
		}else if (pTIMx == TIM4)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0a      	ldr	r2, [pc, #40]	@ (8004f8c <TIM_PeriClockControl+0xd8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d105      	bne.n	8004f74 <TIM_PeriClockControl+0xc0>
			TIM4_PCLK_DI();
 8004f68:	4b06      	ldr	r3, [pc, #24]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	4a05      	ldr	r2, [pc, #20]	@ (8004f84 <TIM_PeriClockControl+0xd0>)
 8004f6e:	f023 0304 	bic.w	r3, r3, #4
 8004f72:	61d3      	str	r3, [r2, #28]
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800

08004f90 <TIM_init>:
 * @return		- none
 *
 * @Note		- This function has been purpose writen for initialising the STM32_Petridish board
 */
void TIM_init(TIM_Handle_t *pTIMHandle)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	// Enable the peripheral so settings can be configured
	TIM_PeriClockControl(pTIMHandle->pTIMx, ENABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff ff88 	bl	8004eb4 <TIM_PeriClockControl>

	// Configure the prescaler so that the counter clock frequency is 1MHz
	// Note that this has been hard coded for a 48MHz PLL clock, if alternative clock is used this needs updating
	pTIMHandle->pTIMx->PSC = 47;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	222f      	movs	r2, #47	@ 0x2f
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28

	pTIMHandle->pTIMx->CR[0] |= (TIM_CLOCKDIVISION_DIV1 << 8); 			// Set the clock division
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	601a      	str	r2, [r3, #0]
	pTIMHandle->pTIMx->CR[0] |= (TIM_AUTORELOAD_PRELOAD_ENABLE << 7);	// Set the auto reload preload setting
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fc6:	601a      	str	r2, [r3, #0]
	pTIMHandle->pTIMx->CR[0] |= (TIM_COUNTERMODE_UP << 4);				// set the counter direction
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	601a      	str	r2, [r3, #0]

	pTIMHandle->pTIMx->ARR = pTIMHandle->init.Period;	// Maximum value the counter counts to
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
 8004fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

	if (pTIMHandle->init.EnableCH1 == ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	791b      	ldrb	r3, [r3, #4]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d127      	bne.n	8005036 <TIM_init+0xa6>
	{
		pTIMHandle->pTIMx->CCMR[0] &= ~(0x3);		// Configure TIM1_CH1 as an output
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0203 	bic.w	r2, r2, #3
 8004ff4:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR[0] |= (0x6 << 4);	// Configure TIM1_CH1 to PWM Mode 1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699a      	ldr	r2, [r3, #24]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8005004:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR[0] |= (0x1 << 3);	// Enable preload TIM1_CH1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0208 	orr.w	r2, r2, #8
 8005014:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCER &= ~(0x1 << 1);		// Configure output polarity as active high
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0202 	bic.w	r2, r2, #2
 8005024:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= 0x1;				// Enable the capture/compare
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	621a      	str	r2, [r3, #32]
	}

	if (pTIMHandle->init.EnableCH2 == ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	795b      	ldrb	r3, [r3, #5]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d127      	bne.n	800508e <TIM_init+0xfe>
	{
		pTIMHandle->pTIMx->CCMR[0] &= ~(0x3 << 8);	// Configure TIM1_CH2 as an output
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699a      	ldr	r2, [r3, #24]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800504c:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR[0] |= (0x6 << 12);	// Configure TIM1_CH2 to PWM Mode 1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800505c:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCMR[0] |= (0x1 << 11);	// Enable preload TIM1_CH2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800506c:	619a      	str	r2, [r3, #24]
		pTIMHandle->pTIMx->CCER &= ~(0x1 << 5);		// Configure output polarity as active high
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0220 	bic.w	r2, r2, #32
 800507c:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (0x1 << 4);				// Enable the capture/compare
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0210 	orr.w	r2, r2, #16
 800508c:	621a      	str	r2, [r3, #32]
	}

	if (pTIMHandle->init.EnableCH3 == ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	799b      	ldrb	r3, [r3, #6]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d127      	bne.n	80050e6 <TIM_init+0x156>
	{
		pTIMHandle->pTIMx->CCMR[1] &= ~(0x3);		// Configure TIM1_CH3 as an output
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0203 	bic.w	r2, r2, #3
 80050a4:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR[1] |= (0x6 << 4);	// Configure TIM1_CH3 to PWM Mode 1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80050b4:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR[1] |= (0x1 << 3);	// Enable preload TIM1_CH3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCER &= ~(0x1 << 9);		// Configure output polarity as active high
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050d4:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (0x1 << 8);		// Enable the capture/compare
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e4:	621a      	str	r2, [r3, #32]
	}

	if (pTIMHandle->init.EnableCH4 == ENABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	79db      	ldrb	r3, [r3, #7]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d127      	bne.n	800513e <TIM_init+0x1ae>
	{
		pTIMHandle->pTIMx->CCMR[1] &= ~(0x3 << 8);	// Configure TIM1_CH2 as an output
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050fc:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR[1] |= (0x6 << 12);	// Configure TIM1_CH2 to PWM Mode 1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800510c:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCMR[1] |= (0x1 << 11);	// Enable preload TIM1_CH2
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800511c:	61da      	str	r2, [r3, #28]
		pTIMHandle->pTIMx->CCER &= ~(0x1 << 13);	// Configure output polarity as active high
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800512c:	621a      	str	r2, [r3, #32]
		pTIMHandle->pTIMx->CCER |= (0x1 << 12);		// Enable the capture/compare
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800513c:	621a      	str	r2, [r3, #32]
	}

	pTIMHandle->pTIMx->BDTR |= (0x1 << 14); // Enable the Automatic Output Enable, which will trigger the Master Output Enable when an event generation occurs
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44

	pTIMHandle->pTIMx->CR[0] |= 0x1;	// Enable the counter
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <USART_PeriClockControl>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d120      	bne.n	80051bc <USART_PeriClockControl+0x54>
	{
		if (pUSARTx == USART1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a22      	ldr	r2, [pc, #136]	@ (8005208 <USART_PeriClockControl+0xa0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d106      	bne.n	8005190 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8005182:	4b22      	ldr	r3, [pc, #136]	@ (800520c <USART_PeriClockControl+0xa4>)
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	4a21      	ldr	r2, [pc, #132]	@ (800520c <USART_PeriClockControl+0xa4>)
 8005188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800518c:	6193      	str	r3, [r2, #24]
		}else if (pUSARTx == USART3)
		{
			USART3_PCLK_DI();
		}
	}
}
 800518e:	e035      	b.n	80051fc <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <USART_PeriClockControl+0xa8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d106      	bne.n	80051a6 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8005198:	4b1c      	ldr	r3, [pc, #112]	@ (800520c <USART_PeriClockControl+0xa4>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4a1b      	ldr	r2, [pc, #108]	@ (800520c <USART_PeriClockControl+0xa4>)
 800519e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051a2:	61d3      	str	r3, [r2, #28]
}
 80051a4:	e02a      	b.n	80051fc <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005214 <USART_PeriClockControl+0xac>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d126      	bne.n	80051fc <USART_PeriClockControl+0x94>
			USART3_PCLK_EN();
 80051ae:	4b17      	ldr	r3, [pc, #92]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4a16      	ldr	r2, [pc, #88]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051b8:	61d3      	str	r3, [r2, #28]
}
 80051ba:	e01f      	b.n	80051fc <USART_PeriClockControl+0x94>
		if (pUSARTx == USART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <USART_PeriClockControl+0xa0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d106      	bne.n	80051d2 <USART_PeriClockControl+0x6a>
			USART1_PCLK_DI();
 80051c4:	4b11      	ldr	r3, [pc, #68]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	4a10      	ldr	r2, [pc, #64]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ce:	6193      	str	r3, [r2, #24]
}
 80051d0:	e014      	b.n	80051fc <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART2)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <USART_PeriClockControl+0xa8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d106      	bne.n	80051e8 <USART_PeriClockControl+0x80>
			USART2_PCLK_DI();
 80051da:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4a0b      	ldr	r2, [pc, #44]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80051e4:	61d3      	str	r3, [r2, #28]
}
 80051e6:	e009      	b.n	80051fc <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART3)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005214 <USART_PeriClockControl+0xac>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d105      	bne.n	80051fc <USART_PeriClockControl+0x94>
			USART3_PCLK_DI();
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4a05      	ldr	r2, [pc, #20]	@ (800520c <USART_PeriClockControl+0xa4>)
 80051f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051fa:	61d3      	str	r3, [r2, #28]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40013800 	.word	0x40013800
 800520c:	40021000 	.word	0x40021000
 8005210:	40004400 	.word	0x40004400
 8005214:	40004800 	.word	0x40004800

08005218 <USART_ENorDI>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_ENorDI(USART_RegDef_t *pUSARTx, uint8_t EnorDI)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	70fb      	strb	r3, [r7, #3]
	if (EnorDI)
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <USART_ENorDI+0x20>
	{
		pUSARTx->CR1 |= (0x1 << USART_CR1_POS_UE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]
	} else
	{
		pUSARTx->CR1 &= ~(0x1 << USART_CR1_POS_UE);
	}
}
 8005236:	e005      	b.n	8005244 <USART_ENorDI+0x2c>
		pUSARTx->CR1 &= ~(0x1 << USART_CR1_POS_UE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <USART_GetFlagStatus>:
 * @return		- whether flag is set or not
 *
 * @Note		-
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
	if (pUSARTx->SR & FlagName)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <USART_GetFlagStatus+0x1c>
	} else
	{
		return FLAG_RESET;
 8005268:	2300      	movs	r3, #0
	}
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <USART_ClearFlag>:
 * @return		- none
 *
 * @Note		- none
 */
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint16_t StatusFlagName)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
	uint32_t tempReg;
	if (StatusFlagName == USART_FLAG_CTS)
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005286:	d106      	bne.n	8005296 <USART_ClearFlag+0x22>
	{
		pUSARTx->SR &= ~(1 << USART_SR_POS_CTS);	// CTS Cleared by writing 0 to flag
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
		tempReg = pUSARTx->SR;						// PE Cleared by reading SR then reading DR
		tempReg = pUSARTx->DR;

	}
	(void) tempReg;
}
 8005294:	e056      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_LBD)
 8005296:	887b      	ldrh	r3, [r7, #2]
 8005298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800529c:	d106      	bne.n	80052ac <USART_ClearFlag+0x38>
		pUSARTx->SR &= ~(1 << USART_SR_POS_LBD);	// LBD Cleared by writing 0 to flag
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	e04b      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_TC)
 80052ac:	887b      	ldrh	r3, [r7, #2]
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d106      	bne.n	80052c0 <USART_ClearFlag+0x4c>
		pUSARTx->SR &= ~(1 << USART_SR_POS_TC);		// TC Cleared by writing 0 to flag
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
}
 80052be:	e041      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_RXNE)
 80052c0:	887b      	ldrh	r3, [r7, #2]
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d106      	bne.n	80052d4 <USART_ClearFlag+0x60>
		pUSARTx->SR &= ~(1 << USART_SR_POS_RXNE);	// RXNE Cleared by writing 0 to flag
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 0220 	bic.w	r2, r3, #32
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	e037      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_TXE)
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d103      	bne.n	80052e2 <USART_ClearFlag+0x6e>
		pUSARTx->DR = 0x0;							// TXE Cleared by writing to the DR
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
}
 80052e0:	e030      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_IDLE)
 80052e2:	887b      	ldrh	r3, [r7, #2]
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d106      	bne.n	80052f6 <USART_ClearFlag+0x82>
		tempReg = pUSARTx->SR;						// IDLE Cleared by reading SR then reading DR
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]
		tempReg = pUSARTx->DR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
}
 80052f4:	e026      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_ORE)
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d106      	bne.n	800530a <USART_ClearFlag+0x96>
		tempReg = pUSARTx->SR;						// ORE Cleared by reading SR then reading DR
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
		tempReg = pUSARTx->DR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]
}
 8005308:	e01c      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_NE)
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d106      	bne.n	800531e <USART_ClearFlag+0xaa>
		tempReg = pUSARTx->SR;						// NE Cleared by reading SR then reading DR
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
		tempReg = pUSARTx->DR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]
}
 800531c:	e012      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_FE)
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d106      	bne.n	8005332 <USART_ClearFlag+0xbe>
		tempReg = pUSARTx->SR;						// FE Cleared by reading SR then reading DR
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
		tempReg = pUSARTx->DR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
}
 8005330:	e008      	b.n	8005344 <USART_ClearFlag+0xd0>
	} else if (StatusFlagName == USART_FLAG_PE)
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d105      	bne.n	8005344 <USART_ClearFlag+0xd0>
		tempReg = pUSARTx->SR;						// PE Cleared by reading SR then reading DR
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]
		tempReg = pUSARTx->DR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <USART_Init>:
 * @return		-
 *
 * @Note		-
 */
void USART_Init(USART_Handle_t *pUSARTxHandle)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

	//Enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTxHandle->pUSARTx, ENABLE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff01 	bl	8005168 <USART_PeriClockControl>

	/******************************** Configuration of CR1******************************************/
	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTxHandle->USART_Config.Mode == USART_MODE_ONLY_RX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d104      	bne.n	8005378 <USART_Init+0x2a>
	{
		//Enable the Receiver bit field
		tempreg |= (1 << USART_CR1_POS_RE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e010      	b.n	800539a <USART_Init+0x4c>
	}else if (pUSARTxHandle->USART_Config.Mode == USART_MODE_ONLY_TX)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	791b      	ldrb	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <USART_Init+0x3c>
	{
		//Enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_POS_TE );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0308 	orr.w	r3, r3, #8
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	e007      	b.n	800539a <USART_Init+0x4c>

	}else if (pUSARTxHandle->USART_Config.Mode == USART_MODE_TXRX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	791b      	ldrb	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d103      	bne.n	800539a <USART_Init+0x4c>
	{
		//Enable both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_POS_TE) | ( 1 << USART_CR1_POS_RE) );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f043 030c 	orr.w	r3, r3, #12
 8005398:	60fb      	str	r3, [r7, #12]
	}

	//Configure the Word length configuration item
	tempreg |= ( pUSARTxHandle->USART_Config.WordLength << USART_CR1_POS_M );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7c5b      	ldrb	r3, [r3, #17]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]


	//Configuration of parity control bit fields
	if ( pUSARTxHandle->USART_Config.ParityControl == USART_PARITY_EVEN)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7c9b      	ldrb	r3, [r3, #18]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d104      	bne.n	80053b8 <USART_Init+0x6a>
	{
		//Enable the parity control
		tempreg |= ( 1 << USART_CR1_POS_PCE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	e00b      	b.n	80053d0 <USART_Init+0x82>

		//Even parity is selected by default

	}else if (pUSARTxHandle->USART_Config.ParityControl == USART_PARITY_ODD )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7c9b      	ldrb	r3, [r3, #18]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d107      	bne.n	80053d0 <USART_Init+0x82>
	{
		//Enable the parity control
		tempreg |= ( 1 << USART_CR1_POS_PCE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053c6:	60fb      	str	r3, [r7, #12]

		//Enable ODD parity
		tempreg |= ( 1 << USART_CR1_POS_PS);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ce:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTxHandle->pUSARTx->CR1 = tempreg;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

	//Configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTxHandle->USART_Config.NumStopBits << USART_CR2_POS_STOP;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7c1b      	ldrb	r3, [r3, #16]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTxHandle->pUSARTx->CR2 = tempreg;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTxHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	7cdb      	ldrb	r3, [r3, #19]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d104      	bne.n	8005406 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_POS_CTSE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e010      	b.n	8005428 <USART_Init+0xda>


	}else if (pUSARTxHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7cdb      	ldrb	r3, [r3, #19]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d104      	bne.n	8005418 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_POS_RTSE);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e007      	b.n	8005428 <USART_Init+0xda>

	}else if (pUSARTxHandle->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7cdb      	ldrb	r3, [r3, #19]
 800541c:	2b03      	cmp	r3, #3
 800541e:	d103      	bne.n	8005428 <USART_Init+0xda>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( (1 << USART_CR3_POS_CTSE) | (1 << USART_CR3_POS_RTSE) );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005426:	60fb      	str	r3, [r7, #12]
	}


	pUSARTxHandle->pUSARTx->CR3 = tempreg;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Set the BRR register
	USART_SetBaudRate(pUSARTxHandle);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f80b 	bl	800544c <USART_SetBaudRate>

	// Enable the USART peripheral
	USART_ENorDI(pUSARTxHandle->pUSARTx, ENABLE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff feeb 	bl	8005218 <USART_ENorDI>
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_Handle_t *pUSARTxHandle)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]

	usartdiv = ( 25 * pUSARTxHandle->USART_Config.APBClock / (4 * pUSARTxHandle->USART_Config.BaudRate) );
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	613b      	str	r3, [r7, #16]

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4a13      	ldr	r2, [pc, #76]	@ (80054c4 <USART_SetBaudRate+0x78>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << USART_BRR_POS_DIVMantissa;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2264      	movs	r2, #100	@ 0x64
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	60bb      	str	r3, [r7, #8]

	//Calculate the final fractional
	F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	@ 0x32
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <USART_SetBaudRate+0x78>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	60bb      	str	r3, [r7, #8]

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part << USART_BRR_POS_DIVfraction;
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

	//copy the value of tempreg in to BRR register
	pUSARTxHandle->pUSARTx->BRR = tempreg;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	609a      	str	r2, [r3, #8]
}
 80054ba:	bf00      	nop
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	51eb851f 	.word	0x51eb851f

080054c8 <USART_SendData>:
 *
 * @Note              - This function sends the data in blocking mode

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e031      	b.n	800553e <USART_SendData+0x76>
	{
		//Wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80054da:	bf00      	nop
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2180      	movs	r1, #128	@ 0x80
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff feb3 	bl	800524e <USART_GetFlagStatus>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f6      	beq.n	80054dc <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.WordLength == USART_WORDLEN_9BITS)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	7c5b      	ldrb	r3, [r3, #17]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d118      	bne.n	8005528 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005508:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	7c9b      	ldrb	r3, [r3, #18]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	3301      	adds	r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	3301      	adds	r3, #1
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	e00b      	b.n	8005538 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	3301      	adds	r3, #1
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	e007      	b.n	8005538 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]

			//Increment the buffer address
			pTxBuffer++;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	3301      	adds	r3, #1
 8005536:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	3301      	adds	r3, #1
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d3c9      	bcc.n	80054da <USART_SendData+0x12>
		}
	}

	//Wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8005546:	bf00      	nop
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2140      	movs	r1, #64	@ 0x40
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fe7d 	bl	800524e <USART_GetFlagStatus>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f6      	beq.n	8005548 <USART_SendData+0x80>
}
 800555a:	bf00      	nop
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USART_ReceiveData>:
 *
 * @Note              - This function reads the data in blocking mode

 */
void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e045      	b.n	8005602 <USART_ReceiveData+0x9e>
	{
		//Wait until RXNE flag is set in the SR
		while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8005576:	bf00      	nop
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2120      	movs	r1, #32
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fe65 	bl	800524e <USART_GetFlagStatus>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f6      	beq.n	8005578 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.WordLength == USART_WORDLEN_9BITS)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	7c5b      	ldrb	r3, [r3, #17]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d11d      	bne.n	80055ce <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	7c9b      	ldrb	r3, [r3, #18]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <USART_ReceiveData+0x56>
			{
				//No parity is used. so, all 9bits will be of user data

				//read only first 9 bits. so, mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	e020      	b.n	80055fc <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				*pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	701a      	strb	r2, [r3, #0]

				//Increment the pRxBuffer
				pRxBuffer++;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	e016      	b.n	80055fc <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	7c9b      	ldrb	r3, [r3, #18]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				*pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e008      	b.n	80055f6 <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				*pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	701a      	strb	r2, [r3, #0]

			}

			//increment the pRxBuffer
			pRxBuffer++;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3301      	adds	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d3b5      	bcc.n	8005576 <USART_ReceiveData+0x12>
		}
	}

}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USART_SendDataIT>:
 *
 * @Note              - This function sends the data in interrupt mode

 */
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
	uint8_t txstate = pUSARTHandle->TxBusyState;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005626:	75fb      	strb	r3, [r7, #23]

	if(txstate != USART_BUSY_IN_TX)
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	2b02      	cmp	r3, #2
 800562c:	d019      	beq.n	8005662 <USART_SendDataIT+0x4e>
	{
		pUSARTHandle->TxLen = Len;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pTxBuffer = pTxBuffer;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	615a      	str	r2, [r3, #20]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_POS_TXEIE);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005650:	60da      	str	r2, [r3, #12]


		//Enable interrupt for TC
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_POS_TCIE);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005660:	60da      	str	r2, [r3, #12]


	}

	return txstate;
 8005662:	7dfb      	ldrb	r3, [r7, #23]

}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <USART_ReceiveDataIT>:
 *
 * @Note              - Resolve all the TODOs

 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 800566e:	b480      	push	{r7}
 8005670:	b087      	sub	sp, #28
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005680:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d01c      	beq.n	80056c2 <USART_ReceiveDataIT+0x54>
	{
		pUSARTHandle->RxLen = Len;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	621a      	str	r2, [r3, #32]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	619a      	str	r2, [r3, #24]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		pUSARTHandle->RxLFRcvd = NOT_RECEIVED;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		pUSARTHandle->RxCRRcvd = NOT_RECEIVED;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(void)pUSARTHandle->pUSARTx->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]

		//Enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_POS_RXNEIE);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0220 	orr.w	r2, r2, #32
 80056c0:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]

}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <USART_IRQHandling>:
 *
 * @Note              -

 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

	/*************************Check for TC flag ********************************************/

	//Check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_POS_TC);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e0:	617b      	str	r3, [r7, #20]

	//Check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_POS_TCIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d029      	beq.n	8005748 <USART_IRQHandling+0x7a>
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d026      	beq.n	8005748 <USART_IRQHandling+0x7a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005700:	2b02      	cmp	r3, #2
 8005702:	d121      	bne.n	8005748 <USART_IRQHandling+0x7a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11d      	bne.n	8005748 <USART_IRQHandling+0x7a>
			{
				//Clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_POS_TC);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800571a:	601a      	str	r2, [r3, #0]

				//Clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_POS_TCIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800572a:	60da      	str	r2, [r3, #12]

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	615a      	str	r2, [r3, #20]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	61da      	str	r2, [r3, #28]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fc fdd2 	bl	80022ec <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_POS_TXE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	617b      	str	r3, [r7, #20]

	//Check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_POS_TXEIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d055      	beq.n	8005812 <USART_IRQHandling+0x144>
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d052      	beq.n	8005812 <USART_IRQHandling+0x144>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005772:	2b02      	cmp	r3, #2
 8005774:	d14d      	bne.n	8005812 <USART_IRQHandling+0x144>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d03d      	beq.n	80057fa <USART_IRQHandling+0x12c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.WordLength == USART_WORDLEN_9BITS)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7c5b      	ldrb	r3, [r3, #17]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d129      	bne.n	80057da <USART_IRQHandling+0x10c>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579a:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7c9b      	ldrb	r3, [r3, #18]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10f      	bne.n	80057c4 <USART_IRQHandling+0xf6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pTxBuffer++;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	615a      	str	r2, [r3, #20]
						pUSARTHandle->TxLen-=2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	1e9a      	subs	r2, r3, #2
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	61da      	str	r2, [r3, #28]
 80057c2:	e01a      	b.n	80057fa <USART_IRQHandling+0x12c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	615a      	str	r2, [r3, #20]
						pUSARTHandle->TxLen-=1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	61da      	str	r2, [r3, #28]
 80057d8:	e00f      	b.n	80057fa <USART_IRQHandling+0x12c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	605a      	str	r2, [r3, #4]

					//Increment the buffer address
					pUSARTHandle->pTxBuffer++;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	615a      	str	r2, [r3, #20]
					pUSARTHandle->TxLen-=1;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	61da      	str	r2, [r3, #28]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d107      	bne.n	8005812 <USART_IRQHandling+0x144>
			{
				//TxLen is zero
				//Clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_POS_TXEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005810:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_POS_RXNE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_POS_RXNEIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80b5 	beq.w	800599c <USART_IRQHandling+0x2ce>
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80b1 	beq.w	800599c <USART_IRQHandling+0x2ce>
	{
		//this interrupt is because of RXNE
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 80ab 	bne.w	800599c <USART_IRQHandling+0x2ce>
		{
			if(pUSARTHandle->RxLen > 0)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 808d 	beq.w	800596a <USART_IRQHandling+0x29c>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.WordLength == USART_WORDLEN_9BITS)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7c5b      	ldrb	r3, [r3, #17]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d155      	bne.n	8005904 <USART_IRQHandling+0x236>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7c9b      	ldrb	r3, [r3, #18]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d12c      	bne.n	80058ba <USART_IRQHandling+0x1ec>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005870:	b292      	uxth	r2, r2
 8005872:	801a      	strh	r2, [r3, #0]

						// Check if new line character received (\r = 13, \n = 10)
						if (*pUSARTHandle->pRxBuffer == 13)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b0d      	cmp	r3, #13
 800587c:	d104      	bne.n	8005888 <USART_IRQHandling+0x1ba>
						{
							pUSARTHandle->RxCRRcvd = RECEIVED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8005886:	e008      	b.n	800589a <USART_IRQHandling+0x1cc>
						} else if (*pUSARTHandle->pRxBuffer == 10)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d103      	bne.n	800589a <USART_IRQHandling+0x1cc>
						{
							pUSARTHandle->RxLFRcvd = RECEIVED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
						}


						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
						pUSARTHandle->pRxBuffer++;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	619a      	str	r2, [r3, #24]
						pUSARTHandle->RxLen-=2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	1e9a      	subs	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	621a      	str	r2, [r3, #32]
 80058b8:	e057      	b.n	800596a <USART_IRQHandling+0x29c>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						*pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]
						// Check if new line character received (\r = 13, \n = 10)
						// Check if new line character received (\r = 13, \n = 10)
						if (*pUSARTHandle->pRxBuffer == 13)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b0d      	cmp	r3, #13
 80058d0:	d104      	bne.n	80058dc <USART_IRQHandling+0x20e>
						{
							pUSARTHandle->RxCRRcvd = RECEIVED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80058da:	e008      	b.n	80058ee <USART_IRQHandling+0x220>
						} else if (*pUSARTHandle->pRxBuffer == 10)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b0a      	cmp	r3, #10
 80058e4:	d103      	bne.n	80058ee <USART_IRQHandling+0x220>
						{
							pUSARTHandle->RxLFRcvd = RECEIVED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
						}
						pUSARTHandle->pRxBuffer++;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
						pUSARTHandle->RxLen-=1;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	1e5a      	subs	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]
 8005902:	e032      	b.n	800596a <USART_IRQHandling+0x29c>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.ParityControl == USART_PARITY_NONE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c9b      	ldrb	r3, [r3, #18]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d107      	bne.n	800591c <USART_IRQHandling+0x24e>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e009      	b.n	8005930 <USART_IRQHandling+0x262>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]

					}

					// Check if new line character received (\r = 13, \n = 10)
					// Check if new line character received (\r = 13, \n = 10)
					if (*pUSARTHandle->pRxBuffer == 13)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b0d      	cmp	r3, #13
 8005938:	d104      	bne.n	8005944 <USART_IRQHandling+0x276>
					{
						pUSARTHandle->RxCRRcvd = RECEIVED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8005942:	e008      	b.n	8005956 <USART_IRQHandling+0x288>
					} else if (*pUSARTHandle->pRxBuffer == 10)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b0a      	cmp	r3, #10
 800594c:	d103      	bne.n	8005956 <USART_IRQHandling+0x288>
					{
						pUSARTHandle->RxLFRcvd = RECEIVED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	619a      	str	r2, [r3, #24]
					pUSARTHandle->RxLen-=1;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]
				}


			}
			// if RxBuffer is full set rx state to complete & disable RXNE interrupt
			if(! pUSARTHandle->RxLen)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d110      	bne.n	8005994 <USART_IRQHandling+0x2c6>
			{
				//disable the RXNE
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_POS_RXNEIE );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0220 	bic.w	r2, r2, #32
 8005980:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 800598a:	2101      	movs	r1, #1
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fc fcad 	bl	80022ec <USART_ApplicationEventCallback>
 8005992:	e003      	b.n	800599c <USART_IRQHandling+0x2ce>
			} else
			{
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_RCVD);
 8005994:	2108      	movs	r1, #8
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fca8 	bl	80022ec <USART_ApplicationEventCallback>


	/*************************Check for CTS flag ********************************************/

	//Check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_POS_CTS);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059a6:	617b      	str	r3, [r7, #20]

	//Check the state of CTSE bit in CR3
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_POS_CTSE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b2:	613b      	str	r3, [r7, #16]

	//Check the state of CTSIE bit in CR3
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_POS_CTSIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059be:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2  && temp3)
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <USART_IRQHandling+0x31c>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00e      	beq.n	80059ea <USART_IRQHandling+0x31c>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <USART_IRQHandling+0x31c>
	{
		//Clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_POS_CTS);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059e0:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 80059e2:	2103      	movs	r1, #3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fc fc81 	bl	80022ec <USART_ApplicationEventCallback>
	}

	/*************************Check for IDLE detection flag ********************************************/

	//Check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_POS_IDLE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	617b      	str	r3, [r7, #20]

	//Check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_POS_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00f      	beq.n	8005a28 <USART_IRQHandling+0x35a>
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <USART_IRQHandling+0x35a>
	{
		//Clear the IDLE flag.
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_POS_IDLE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8005a20:	2102      	movs	r1, #2
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc fc62 	bl	80022ec <USART_ApplicationEventCallback>
	}

	/*************************Check for Overrun detection flag ********************************************/

	//Check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_POS_ORE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	617b      	str	r3, [r7, #20]

	//Check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_POS_RXNEIE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0305 	and.w	r3, r3, #5
 8005a3e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d006      	beq.n	8005a54 <USART_IRQHandling+0x386>
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <USART_IRQHandling+0x386>
	{
		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8005a4c:	2107      	movs	r1, #7
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc fc4c 	bl	80022ec <USART_ApplicationEventCallback>


	/*************************Check for Error Flag ********************************************/

	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_POS_EIE) ;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01e      	beq.n	8005aa4 <USART_IRQHandling+0x3d6>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_POS_FE))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <USART_IRQHandling+0x3b2>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8005a78:	2105      	movs	r1, #5
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fc fc36 	bl	80022ec <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_POS_NE) )
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <USART_IRQHandling+0x3c4>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8005a8a:	2106      	movs	r1, #6
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7fc fc2d 	bl	80022ec <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_POS_ORE) )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <USART_IRQHandling+0x3d6>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8005a9c:	2107      	movs	r1, #7
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fc24 	bl	80022ec <USART_ApplicationEventCallback>
		}
	}


}
 8005aa4:	bf00      	nop
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <__cvt>:
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab2:	461d      	mov	r5, r3
 8005ab4:	bfbb      	ittet	lt
 8005ab6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005aba:	461d      	movlt	r5, r3
 8005abc:	2300      	movge	r3, #0
 8005abe:	232d      	movlt	r3, #45	@ 0x2d
 8005ac0:	b088      	sub	sp, #32
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	bfb8      	it	lt
 8005ac6:	4614      	movlt	r4, r2
 8005ac8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005aca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005acc:	7013      	strb	r3, [r2, #0]
 8005ace:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ad0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005ad4:	f023 0820 	bic.w	r8, r3, #32
 8005ad8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005adc:	d005      	beq.n	8005aea <__cvt+0x3e>
 8005ade:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ae2:	d100      	bne.n	8005ae6 <__cvt+0x3a>
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e000      	b.n	8005aec <__cvt+0x40>
 8005aea:	2303      	movs	r3, #3
 8005aec:	aa07      	add	r2, sp, #28
 8005aee:	9204      	str	r2, [sp, #16]
 8005af0:	aa06      	add	r2, sp, #24
 8005af2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005af6:	e9cd 3600 	strd	r3, r6, [sp]
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	f000 fee7 	bl	80068d0 <_dtoa_r>
 8005b02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b06:	4607      	mov	r7, r0
 8005b08:	d119      	bne.n	8005b3e <__cvt+0x92>
 8005b0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b0c:	07db      	lsls	r3, r3, #31
 8005b0e:	d50e      	bpl.n	8005b2e <__cvt+0x82>
 8005b10:	eb00 0906 	add.w	r9, r0, r6
 8005b14:	2200      	movs	r2, #0
 8005b16:	2300      	movs	r3, #0
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	f7fa ff54 	bl	80009c8 <__aeabi_dcmpeq>
 8005b20:	b108      	cbz	r0, 8005b26 <__cvt+0x7a>
 8005b22:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b26:	2230      	movs	r2, #48	@ 0x30
 8005b28:	9b07      	ldr	r3, [sp, #28]
 8005b2a:	454b      	cmp	r3, r9
 8005b2c:	d31e      	bcc.n	8005b6c <__cvt+0xc0>
 8005b2e:	4638      	mov	r0, r7
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b34:	1bdb      	subs	r3, r3, r7
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	b008      	add	sp, #32
 8005b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b42:	eb00 0906 	add.w	r9, r0, r6
 8005b46:	d1e5      	bne.n	8005b14 <__cvt+0x68>
 8005b48:	7803      	ldrb	r3, [r0, #0]
 8005b4a:	2b30      	cmp	r3, #48	@ 0x30
 8005b4c:	d10a      	bne.n	8005b64 <__cvt+0xb8>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4620      	mov	r0, r4
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7fa ff37 	bl	80009c8 <__aeabi_dcmpeq>
 8005b5a:	b918      	cbnz	r0, 8005b64 <__cvt+0xb8>
 8005b5c:	f1c6 0601 	rsb	r6, r6, #1
 8005b60:	f8ca 6000 	str.w	r6, [sl]
 8005b64:	f8da 3000 	ldr.w	r3, [sl]
 8005b68:	4499      	add	r9, r3
 8005b6a:	e7d3      	b.n	8005b14 <__cvt+0x68>
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	9107      	str	r1, [sp, #28]
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e7d9      	b.n	8005b28 <__cvt+0x7c>

08005b74 <__exponent>:
 8005b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b76:	2900      	cmp	r1, #0
 8005b78:	bfb6      	itet	lt
 8005b7a:	232d      	movlt	r3, #45	@ 0x2d
 8005b7c:	232b      	movge	r3, #43	@ 0x2b
 8005b7e:	4249      	neglt	r1, r1
 8005b80:	2909      	cmp	r1, #9
 8005b82:	7002      	strb	r2, [r0, #0]
 8005b84:	7043      	strb	r3, [r0, #1]
 8005b86:	dd29      	ble.n	8005bdc <__exponent+0x68>
 8005b88:	f10d 0307 	add.w	r3, sp, #7
 8005b8c:	461d      	mov	r5, r3
 8005b8e:	270a      	movs	r7, #10
 8005b90:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b94:	461a      	mov	r2, r3
 8005b96:	fb07 1416 	mls	r4, r7, r6, r1
 8005b9a:	3430      	adds	r4, #48	@ 0x30
 8005b9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	2c63      	cmp	r4, #99	@ 0x63
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005baa:	dcf1      	bgt.n	8005b90 <__exponent+0x1c>
 8005bac:	3130      	adds	r1, #48	@ 0x30
 8005bae:	1e94      	subs	r4, r2, #2
 8005bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	1c41      	adds	r1, r0, #1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	d30a      	bcc.n	8005bd2 <__exponent+0x5e>
 8005bbc:	f10d 0309 	add.w	r3, sp, #9
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	42ac      	cmp	r4, r5
 8005bc4:	bf88      	it	hi
 8005bc6:	2300      	movhi	r3, #0
 8005bc8:	3302      	adds	r3, #2
 8005bca:	4403      	add	r3, r0
 8005bcc:	1a18      	subs	r0, r3, r0
 8005bce:	b003      	add	sp, #12
 8005bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005bd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bda:	e7ed      	b.n	8005bb8 <__exponent+0x44>
 8005bdc:	2330      	movs	r3, #48	@ 0x30
 8005bde:	3130      	adds	r1, #48	@ 0x30
 8005be0:	7083      	strb	r3, [r0, #2]
 8005be2:	70c1      	strb	r1, [r0, #3]
 8005be4:	1d03      	adds	r3, r0, #4
 8005be6:	e7f1      	b.n	8005bcc <__exponent+0x58>

08005be8 <_printf_float>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	b091      	sub	sp, #68	@ 0x44
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f000 fd43 	bl	8006684 <_localeconv_r>
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	9308      	str	r3, [sp, #32]
 8005c04:	f7fa fab4 	bl	8000170 <strlen>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c10:	9009      	str	r0, [sp, #36]	@ 0x24
 8005c12:	3307      	adds	r3, #7
 8005c14:	f023 0307 	bic.w	r3, r3, #7
 8005c18:	f103 0208 	add.w	r2, r3, #8
 8005c1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c20:	f8d4 b000 	ldr.w	fp, [r4]
 8005c24:	f8c8 2000 	str.w	r2, [r8]
 8005c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c32:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c42:	4b9c      	ldr	r3, [pc, #624]	@ (8005eb4 <_printf_float+0x2cc>)
 8005c44:	f7fa fef2 	bl	8000a2c <__aeabi_dcmpun>
 8005c48:	bb70      	cbnz	r0, 8005ca8 <_printf_float+0xc0>
 8005c4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	4b98      	ldr	r3, [pc, #608]	@ (8005eb4 <_printf_float+0x2cc>)
 8005c54:	f7fa fecc 	bl	80009f0 <__aeabi_dcmple>
 8005c58:	bb30      	cbnz	r0, 8005ca8 <_printf_float+0xc0>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	f7fa febb 	bl	80009dc <__aeabi_dcmplt>
 8005c66:	b110      	cbz	r0, 8005c6e <_printf_float+0x86>
 8005c68:	232d      	movs	r3, #45	@ 0x2d
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c6e:	4a92      	ldr	r2, [pc, #584]	@ (8005eb8 <_printf_float+0x2d0>)
 8005c70:	4b92      	ldr	r3, [pc, #584]	@ (8005ebc <_printf_float+0x2d4>)
 8005c72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c76:	bf94      	ite	ls
 8005c78:	4690      	movls	r8, r2
 8005c7a:	4698      	movhi	r8, r3
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	f04f 0900 	mov.w	r9, #0
 8005c82:	6123      	str	r3, [r4, #16]
 8005c84:	f02b 0304 	bic.w	r3, fp, #4
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	4633      	mov	r3, r6
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	9700      	str	r7, [sp, #0]
 8005c92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c94:	f000 f9d4 	bl	8006040 <_printf_common>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f040 8090 	bne.w	8005dbe <_printf_float+0x1d6>
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca2:	b011      	add	sp, #68	@ 0x44
 8005ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	4649      	mov	r1, r9
 8005cb0:	f7fa febc 	bl	8000a2c <__aeabi_dcmpun>
 8005cb4:	b148      	cbz	r0, 8005cca <_printf_float+0xe2>
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bfb8      	it	lt
 8005cbc:	232d      	movlt	r3, #45	@ 0x2d
 8005cbe:	4a80      	ldr	r2, [pc, #512]	@ (8005ec0 <_printf_float+0x2d8>)
 8005cc0:	bfb8      	it	lt
 8005cc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cc6:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec4 <_printf_float+0x2dc>)
 8005cc8:	e7d3      	b.n	8005c72 <_printf_float+0x8a>
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	d13f      	bne.n	8005d54 <_printf_float+0x16c>
 8005cd4:	2306      	movs	r3, #6
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	9206      	str	r2, [sp, #24]
 8005ce2:	aa0e      	add	r2, sp, #56	@ 0x38
 8005ce4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ce8:	aa0d      	add	r2, sp, #52	@ 0x34
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005cf0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cf4:	6863      	ldr	r3, [r4, #4]
 8005cf6:	4642      	mov	r2, r8
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	910a      	str	r1, [sp, #40]	@ 0x28
 8005d00:	f7ff fed4 	bl	8005aac <__cvt>
 8005d04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005d06:	4680      	mov	r8, r0
 8005d08:	2947      	cmp	r1, #71	@ 0x47
 8005d0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005d0c:	d128      	bne.n	8005d60 <_printf_float+0x178>
 8005d0e:	1cc8      	adds	r0, r1, #3
 8005d10:	db02      	blt.n	8005d18 <_printf_float+0x130>
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	4299      	cmp	r1, r3
 8005d16:	dd40      	ble.n	8005d9a <_printf_float+0x1b2>
 8005d18:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d1c:	fa5f fa8a 	uxtb.w	sl, sl
 8005d20:	4652      	mov	r2, sl
 8005d22:	3901      	subs	r1, #1
 8005d24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d28:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d2a:	f7ff ff23 	bl	8005b74 <__exponent>
 8005d2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d30:	4681      	mov	r9, r0
 8005d32:	1813      	adds	r3, r2, r0
 8005d34:	2a01      	cmp	r2, #1
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	dc02      	bgt.n	8005d40 <_printf_float+0x158>
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	07d2      	lsls	r2, r2, #31
 8005d3e:	d501      	bpl.n	8005d44 <_printf_float+0x15c>
 8005d40:	3301      	adds	r3, #1
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d09e      	beq.n	8005c8a <_printf_float+0xa2>
 8005d4c:	232d      	movs	r3, #45	@ 0x2d
 8005d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d52:	e79a      	b.n	8005c8a <_printf_float+0xa2>
 8005d54:	2947      	cmp	r1, #71	@ 0x47
 8005d56:	d1bf      	bne.n	8005cd8 <_printf_float+0xf0>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1bd      	bne.n	8005cd8 <_printf_float+0xf0>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e7ba      	b.n	8005cd6 <_printf_float+0xee>
 8005d60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d64:	d9dc      	bls.n	8005d20 <_printf_float+0x138>
 8005d66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d6a:	d118      	bne.n	8005d9e <_printf_float+0x1b6>
 8005d6c:	2900      	cmp	r1, #0
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	dd0b      	ble.n	8005d8a <_printf_float+0x1a2>
 8005d72:	6121      	str	r1, [r4, #16]
 8005d74:	b913      	cbnz	r3, 8005d7c <_printf_float+0x194>
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	07d0      	lsls	r0, r2, #31
 8005d7a:	d502      	bpl.n	8005d82 <_printf_float+0x19a>
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	440b      	add	r3, r1
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	f04f 0900 	mov.w	r9, #0
 8005d86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d88:	e7dc      	b.n	8005d44 <_printf_float+0x15c>
 8005d8a:	b913      	cbnz	r3, 8005d92 <_printf_float+0x1aa>
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	07d2      	lsls	r2, r2, #31
 8005d90:	d501      	bpl.n	8005d96 <_printf_float+0x1ae>
 8005d92:	3302      	adds	r3, #2
 8005d94:	e7f4      	b.n	8005d80 <_printf_float+0x198>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e7f2      	b.n	8005d80 <_printf_float+0x198>
 8005d9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005da0:	4299      	cmp	r1, r3
 8005da2:	db05      	blt.n	8005db0 <_printf_float+0x1c8>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	6121      	str	r1, [r4, #16]
 8005da8:	07d8      	lsls	r0, r3, #31
 8005daa:	d5ea      	bpl.n	8005d82 <_printf_float+0x19a>
 8005dac:	1c4b      	adds	r3, r1, #1
 8005dae:	e7e7      	b.n	8005d80 <_printf_float+0x198>
 8005db0:	2900      	cmp	r1, #0
 8005db2:	bfcc      	ite	gt
 8005db4:	2201      	movgt	r2, #1
 8005db6:	f1c1 0202 	rsble	r2, r1, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	e7e0      	b.n	8005d80 <_printf_float+0x198>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	055a      	lsls	r2, r3, #21
 8005dc2:	d407      	bmi.n	8005dd4 <_printf_float+0x1ec>
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	4642      	mov	r2, r8
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d12b      	bne.n	8005e2a <_printf_float+0x242>
 8005dd2:	e764      	b.n	8005c9e <_printf_float+0xb6>
 8005dd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dd8:	f240 80dc 	bls.w	8005f94 <_printf_float+0x3ac>
 8005ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fa fdf0 	bl	80009c8 <__aeabi_dcmpeq>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d033      	beq.n	8005e54 <_printf_float+0x26c>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4631      	mov	r1, r6
 8005df0:	4628      	mov	r0, r5
 8005df2:	4a35      	ldr	r2, [pc, #212]	@ (8005ec8 <_printf_float+0x2e0>)
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	f43f af51 	beq.w	8005c9e <_printf_float+0xb6>
 8005dfc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005e00:	4543      	cmp	r3, r8
 8005e02:	db02      	blt.n	8005e0a <_printf_float+0x222>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	07d8      	lsls	r0, r3, #31
 8005e08:	d50f      	bpl.n	8005e2a <_printf_float+0x242>
 8005e0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e0e:	4631      	mov	r1, r6
 8005e10:	4628      	mov	r0, r5
 8005e12:	47b8      	blx	r7
 8005e14:	3001      	adds	r0, #1
 8005e16:	f43f af42 	beq.w	8005c9e <_printf_float+0xb6>
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e22:	f104 0a1a 	add.w	sl, r4, #26
 8005e26:	45c8      	cmp	r8, r9
 8005e28:	dc09      	bgt.n	8005e3e <_printf_float+0x256>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	079b      	lsls	r3, r3, #30
 8005e2e:	f100 8102 	bmi.w	8006036 <_printf_float+0x44e>
 8005e32:	68e0      	ldr	r0, [r4, #12]
 8005e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e36:	4298      	cmp	r0, r3
 8005e38:	bfb8      	it	lt
 8005e3a:	4618      	movlt	r0, r3
 8005e3c:	e731      	b.n	8005ca2 <_printf_float+0xba>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4652      	mov	r2, sl
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f af28 	beq.w	8005c9e <_printf_float+0xb6>
 8005e4e:	f109 0901 	add.w	r9, r9, #1
 8005e52:	e7e8      	b.n	8005e26 <_printf_float+0x23e>
 8005e54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dc38      	bgt.n	8005ecc <_printf_float+0x2e4>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4628      	mov	r0, r5
 8005e60:	4a19      	ldr	r2, [pc, #100]	@ (8005ec8 <_printf_float+0x2e0>)
 8005e62:	47b8      	blx	r7
 8005e64:	3001      	adds	r0, #1
 8005e66:	f43f af1a 	beq.w	8005c9e <_printf_float+0xb6>
 8005e6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e6e:	ea59 0303 	orrs.w	r3, r9, r3
 8005e72:	d102      	bne.n	8005e7a <_printf_float+0x292>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d5d7      	bpl.n	8005e2a <_printf_float+0x242>
 8005e7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af0a 	beq.w	8005c9e <_printf_float+0xb6>
 8005e8a:	f04f 0a00 	mov.w	sl, #0
 8005e8e:	f104 0b1a 	add.w	fp, r4, #26
 8005e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e94:	425b      	negs	r3, r3
 8005e96:	4553      	cmp	r3, sl
 8005e98:	dc01      	bgt.n	8005e9e <_printf_float+0x2b6>
 8005e9a:	464b      	mov	r3, r9
 8005e9c:	e793      	b.n	8005dc6 <_printf_float+0x1de>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	465a      	mov	r2, fp
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f aef8 	beq.w	8005c9e <_printf_float+0xb6>
 8005eae:	f10a 0a01 	add.w	sl, sl, #1
 8005eb2:	e7ee      	b.n	8005e92 <_printf_float+0x2aa>
 8005eb4:	7fefffff 	.word	0x7fefffff
 8005eb8:	0800986c 	.word	0x0800986c
 8005ebc:	08009870 	.word	0x08009870
 8005ec0:	08009874 	.word	0x08009874
 8005ec4:	08009878 	.word	0x08009878
 8005ec8:	0800987c 	.word	0x0800987c
 8005ecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ece:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ed2:	4553      	cmp	r3, sl
 8005ed4:	bfa8      	it	ge
 8005ed6:	4653      	movge	r3, sl
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	4699      	mov	r9, r3
 8005edc:	dc36      	bgt.n	8005f4c <_printf_float+0x364>
 8005ede:	f04f 0b00 	mov.w	fp, #0
 8005ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee6:	f104 021a 	add.w	r2, r4, #26
 8005eea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eec:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eee:	eba3 0309 	sub.w	r3, r3, r9
 8005ef2:	455b      	cmp	r3, fp
 8005ef4:	dc31      	bgt.n	8005f5a <_printf_float+0x372>
 8005ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef8:	459a      	cmp	sl, r3
 8005efa:	dc3a      	bgt.n	8005f72 <_printf_float+0x38a>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	d437      	bmi.n	8005f72 <_printf_float+0x38a>
 8005f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f04:	ebaa 0903 	sub.w	r9, sl, r3
 8005f08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f0a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f0e:	4599      	cmp	r9, r3
 8005f10:	bfa8      	it	ge
 8005f12:	4699      	movge	r9, r3
 8005f14:	f1b9 0f00 	cmp.w	r9, #0
 8005f18:	dc33      	bgt.n	8005f82 <_printf_float+0x39a>
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f22:	f104 0b1a 	add.w	fp, r4, #26
 8005f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f28:	ebaa 0303 	sub.w	r3, sl, r3
 8005f2c:	eba3 0309 	sub.w	r3, r3, r9
 8005f30:	4543      	cmp	r3, r8
 8005f32:	f77f af7a 	ble.w	8005e2a <_printf_float+0x242>
 8005f36:	2301      	movs	r3, #1
 8005f38:	465a      	mov	r2, fp
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b8      	blx	r7
 8005f40:	3001      	adds	r0, #1
 8005f42:	f43f aeac 	beq.w	8005c9e <_printf_float+0xb6>
 8005f46:	f108 0801 	add.w	r8, r8, #1
 8005f4a:	e7ec      	b.n	8005f26 <_printf_float+0x33e>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	d1c2      	bne.n	8005ede <_printf_float+0x2f6>
 8005f58:	e6a1      	b.n	8005c9e <_printf_float+0xb6>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	4628      	mov	r0, r5
 8005f60:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	f43f ae9a 	beq.w	8005c9e <_printf_float+0xb6>
 8005f6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f6c:	f10b 0b01 	add.w	fp, fp, #1
 8005f70:	e7bb      	b.n	8005eea <_printf_float+0x302>
 8005f72:	4631      	mov	r1, r6
 8005f74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d1c0      	bne.n	8005f02 <_printf_float+0x31a>
 8005f80:	e68d      	b.n	8005c9e <_printf_float+0xb6>
 8005f82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f84:	464b      	mov	r3, r9
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	4442      	add	r2, r8
 8005f8c:	47b8      	blx	r7
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d1c3      	bne.n	8005f1a <_printf_float+0x332>
 8005f92:	e684      	b.n	8005c9e <_printf_float+0xb6>
 8005f94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f98:	f1ba 0f01 	cmp.w	sl, #1
 8005f9c:	dc01      	bgt.n	8005fa2 <_printf_float+0x3ba>
 8005f9e:	07db      	lsls	r3, r3, #31
 8005fa0:	d536      	bpl.n	8006010 <_printf_float+0x428>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b8      	blx	r7
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f ae76 	beq.w	8005c9e <_printf_float+0xb6>
 8005fb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f ae6e 	beq.w	8005c9e <_printf_float+0xb6>
 8005fc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fce:	f7fa fcfb 	bl	80009c8 <__aeabi_dcmpeq>
 8005fd2:	b9c0      	cbnz	r0, 8006006 <_printf_float+0x41e>
 8005fd4:	4653      	mov	r3, sl
 8005fd6:	f108 0201 	add.w	r2, r8, #1
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d10c      	bne.n	8005ffe <_printf_float+0x416>
 8005fe4:	e65b      	b.n	8005c9e <_printf_float+0xb6>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	465a      	mov	r2, fp
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	f43f ae54 	beq.w	8005c9e <_printf_float+0xb6>
 8005ff6:	f108 0801 	add.w	r8, r8, #1
 8005ffa:	45d0      	cmp	r8, sl
 8005ffc:	dbf3      	blt.n	8005fe6 <_printf_float+0x3fe>
 8005ffe:	464b      	mov	r3, r9
 8006000:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006004:	e6e0      	b.n	8005dc8 <_printf_float+0x1e0>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	f104 0b1a 	add.w	fp, r4, #26
 800600e:	e7f4      	b.n	8005ffa <_printf_float+0x412>
 8006010:	2301      	movs	r3, #1
 8006012:	4642      	mov	r2, r8
 8006014:	e7e1      	b.n	8005fda <_printf_float+0x3f2>
 8006016:	2301      	movs	r3, #1
 8006018:	464a      	mov	r2, r9
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	f43f ae3c 	beq.w	8005c9e <_printf_float+0xb6>
 8006026:	f108 0801 	add.w	r8, r8, #1
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800602e:	1a5b      	subs	r3, r3, r1
 8006030:	4543      	cmp	r3, r8
 8006032:	dcf0      	bgt.n	8006016 <_printf_float+0x42e>
 8006034:	e6fd      	b.n	8005e32 <_printf_float+0x24a>
 8006036:	f04f 0800 	mov.w	r8, #0
 800603a:	f104 0919 	add.w	r9, r4, #25
 800603e:	e7f4      	b.n	800602a <_printf_float+0x442>

08006040 <_printf_common>:
 8006040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006044:	4616      	mov	r6, r2
 8006046:	4698      	mov	r8, r3
 8006048:	688a      	ldr	r2, [r1, #8]
 800604a:	690b      	ldr	r3, [r1, #16]
 800604c:	4607      	mov	r7, r0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfb8      	it	lt
 8006052:	4613      	movlt	r3, r2
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800605a:	460c      	mov	r4, r1
 800605c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006060:	b10a      	cbz	r2, 8006066 <_printf_common+0x26>
 8006062:	3301      	adds	r3, #1
 8006064:	6033      	str	r3, [r6, #0]
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	0699      	lsls	r1, r3, #26
 800606a:	bf42      	ittt	mi
 800606c:	6833      	ldrmi	r3, [r6, #0]
 800606e:	3302      	addmi	r3, #2
 8006070:	6033      	strmi	r3, [r6, #0]
 8006072:	6825      	ldr	r5, [r4, #0]
 8006074:	f015 0506 	ands.w	r5, r5, #6
 8006078:	d106      	bne.n	8006088 <_printf_common+0x48>
 800607a:	f104 0a19 	add.w	sl, r4, #25
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	6832      	ldr	r2, [r6, #0]
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	42ab      	cmp	r3, r5
 8006086:	dc2b      	bgt.n	80060e0 <_printf_common+0xa0>
 8006088:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	3b00      	subs	r3, #0
 8006090:	bf18      	it	ne
 8006092:	2301      	movne	r3, #1
 8006094:	0692      	lsls	r2, r2, #26
 8006096:	d430      	bmi.n	80060fa <_printf_common+0xba>
 8006098:	4641      	mov	r1, r8
 800609a:	4638      	mov	r0, r7
 800609c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060a0:	47c8      	blx	r9
 80060a2:	3001      	adds	r0, #1
 80060a4:	d023      	beq.n	80060ee <_printf_common+0xae>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	f003 0306 	and.w	r3, r3, #6
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	bf14      	ite	ne
 80060b2:	2500      	movne	r5, #0
 80060b4:	6833      	ldreq	r3, [r6, #0]
 80060b6:	f04f 0600 	mov.w	r6, #0
 80060ba:	bf08      	it	eq
 80060bc:	68e5      	ldreq	r5, [r4, #12]
 80060be:	f104 041a 	add.w	r4, r4, #26
 80060c2:	bf08      	it	eq
 80060c4:	1aed      	subeq	r5, r5, r3
 80060c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060ca:	bf08      	it	eq
 80060cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bfc4      	itt	gt
 80060d4:	1a9b      	subgt	r3, r3, r2
 80060d6:	18ed      	addgt	r5, r5, r3
 80060d8:	42b5      	cmp	r5, r6
 80060da:	d11a      	bne.n	8006112 <_printf_common+0xd2>
 80060dc:	2000      	movs	r0, #0
 80060de:	e008      	b.n	80060f2 <_printf_common+0xb2>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4641      	mov	r1, r8
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c8      	blx	r9
 80060ea:	3001      	adds	r0, #1
 80060ec:	d103      	bne.n	80060f6 <_printf_common+0xb6>
 80060ee:	f04f 30ff 	mov.w	r0, #4294967295
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f6:	3501      	adds	r5, #1
 80060f8:	e7c1      	b.n	800607e <_printf_common+0x3e>
 80060fa:	2030      	movs	r0, #48	@ 0x30
 80060fc:	18e1      	adds	r1, r4, r3
 80060fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006108:	4422      	add	r2, r4
 800610a:	3302      	adds	r3, #2
 800610c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006110:	e7c2      	b.n	8006098 <_printf_common+0x58>
 8006112:	2301      	movs	r3, #1
 8006114:	4622      	mov	r2, r4
 8006116:	4641      	mov	r1, r8
 8006118:	4638      	mov	r0, r7
 800611a:	47c8      	blx	r9
 800611c:	3001      	adds	r0, #1
 800611e:	d0e6      	beq.n	80060ee <_printf_common+0xae>
 8006120:	3601      	adds	r6, #1
 8006122:	e7d9      	b.n	80060d8 <_printf_common+0x98>

08006124 <_printf_i>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	7e0f      	ldrb	r7, [r1, #24]
 800612a:	4691      	mov	r9, r2
 800612c:	2f78      	cmp	r7, #120	@ 0x78
 800612e:	4680      	mov	r8, r0
 8006130:	460c      	mov	r4, r1
 8006132:	469a      	mov	sl, r3
 8006134:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800613a:	d807      	bhi.n	800614c <_printf_i+0x28>
 800613c:	2f62      	cmp	r7, #98	@ 0x62
 800613e:	d80a      	bhi.n	8006156 <_printf_i+0x32>
 8006140:	2f00      	cmp	r7, #0
 8006142:	f000 80d3 	beq.w	80062ec <_printf_i+0x1c8>
 8006146:	2f58      	cmp	r7, #88	@ 0x58
 8006148:	f000 80ba 	beq.w	80062c0 <_printf_i+0x19c>
 800614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006154:	e03a      	b.n	80061cc <_printf_i+0xa8>
 8006156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800615a:	2b15      	cmp	r3, #21
 800615c:	d8f6      	bhi.n	800614c <_printf_i+0x28>
 800615e:	a101      	add	r1, pc, #4	@ (adr r1, 8006164 <_printf_i+0x40>)
 8006160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061d1 	.word	0x080061d1
 800616c:	0800614d 	.word	0x0800614d
 8006170:	0800614d 	.word	0x0800614d
 8006174:	0800614d 	.word	0x0800614d
 8006178:	0800614d 	.word	0x0800614d
 800617c:	080061d1 	.word	0x080061d1
 8006180:	0800614d 	.word	0x0800614d
 8006184:	0800614d 	.word	0x0800614d
 8006188:	0800614d 	.word	0x0800614d
 800618c:	0800614d 	.word	0x0800614d
 8006190:	080062d3 	.word	0x080062d3
 8006194:	080061fb 	.word	0x080061fb
 8006198:	0800628d 	.word	0x0800628d
 800619c:	0800614d 	.word	0x0800614d
 80061a0:	0800614d 	.word	0x0800614d
 80061a4:	080062f5 	.word	0x080062f5
 80061a8:	0800614d 	.word	0x0800614d
 80061ac:	080061fb 	.word	0x080061fb
 80061b0:	0800614d 	.word	0x0800614d
 80061b4:	0800614d 	.word	0x0800614d
 80061b8:	08006295 	.word	0x08006295
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6032      	str	r2, [r6, #0]
 80061c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061cc:	2301      	movs	r3, #1
 80061ce:	e09e      	b.n	800630e <_printf_i+0x1ea>
 80061d0:	6833      	ldr	r3, [r6, #0]
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	1d19      	adds	r1, r3, #4
 80061d6:	6031      	str	r1, [r6, #0]
 80061d8:	0606      	lsls	r6, r0, #24
 80061da:	d501      	bpl.n	80061e0 <_printf_i+0xbc>
 80061dc:	681d      	ldr	r5, [r3, #0]
 80061de:	e003      	b.n	80061e8 <_printf_i+0xc4>
 80061e0:	0645      	lsls	r5, r0, #25
 80061e2:	d5fb      	bpl.n	80061dc <_printf_i+0xb8>
 80061e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	da03      	bge.n	80061f4 <_printf_i+0xd0>
 80061ec:	232d      	movs	r3, #45	@ 0x2d
 80061ee:	426d      	negs	r5, r5
 80061f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061f4:	230a      	movs	r3, #10
 80061f6:	4859      	ldr	r0, [pc, #356]	@ (800635c <_printf_i+0x238>)
 80061f8:	e011      	b.n	800621e <_printf_i+0xfa>
 80061fa:	6821      	ldr	r1, [r4, #0]
 80061fc:	6833      	ldr	r3, [r6, #0]
 80061fe:	0608      	lsls	r0, r1, #24
 8006200:	f853 5b04 	ldr.w	r5, [r3], #4
 8006204:	d402      	bmi.n	800620c <_printf_i+0xe8>
 8006206:	0649      	lsls	r1, r1, #25
 8006208:	bf48      	it	mi
 800620a:	b2ad      	uxthmi	r5, r5
 800620c:	2f6f      	cmp	r7, #111	@ 0x6f
 800620e:	6033      	str	r3, [r6, #0]
 8006210:	bf14      	ite	ne
 8006212:	230a      	movne	r3, #10
 8006214:	2308      	moveq	r3, #8
 8006216:	4851      	ldr	r0, [pc, #324]	@ (800635c <_printf_i+0x238>)
 8006218:	2100      	movs	r1, #0
 800621a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800621e:	6866      	ldr	r6, [r4, #4]
 8006220:	2e00      	cmp	r6, #0
 8006222:	bfa8      	it	ge
 8006224:	6821      	ldrge	r1, [r4, #0]
 8006226:	60a6      	str	r6, [r4, #8]
 8006228:	bfa4      	itt	ge
 800622a:	f021 0104 	bicge.w	r1, r1, #4
 800622e:	6021      	strge	r1, [r4, #0]
 8006230:	b90d      	cbnz	r5, 8006236 <_printf_i+0x112>
 8006232:	2e00      	cmp	r6, #0
 8006234:	d04b      	beq.n	80062ce <_printf_i+0x1aa>
 8006236:	4616      	mov	r6, r2
 8006238:	fbb5 f1f3 	udiv	r1, r5, r3
 800623c:	fb03 5711 	mls	r7, r3, r1, r5
 8006240:	5dc7      	ldrb	r7, [r0, r7]
 8006242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006246:	462f      	mov	r7, r5
 8006248:	42bb      	cmp	r3, r7
 800624a:	460d      	mov	r5, r1
 800624c:	d9f4      	bls.n	8006238 <_printf_i+0x114>
 800624e:	2b08      	cmp	r3, #8
 8006250:	d10b      	bne.n	800626a <_printf_i+0x146>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	07df      	lsls	r7, r3, #31
 8006256:	d508      	bpl.n	800626a <_printf_i+0x146>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	6861      	ldr	r1, [r4, #4]
 800625c:	4299      	cmp	r1, r3
 800625e:	bfde      	ittt	le
 8006260:	2330      	movle	r3, #48	@ 0x30
 8006262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800626a:	1b92      	subs	r2, r2, r6
 800626c:	6122      	str	r2, [r4, #16]
 800626e:	464b      	mov	r3, r9
 8006270:	4621      	mov	r1, r4
 8006272:	4640      	mov	r0, r8
 8006274:	f8cd a000 	str.w	sl, [sp]
 8006278:	aa03      	add	r2, sp, #12
 800627a:	f7ff fee1 	bl	8006040 <_printf_common>
 800627e:	3001      	adds	r0, #1
 8006280:	d14a      	bne.n	8006318 <_printf_i+0x1f4>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	b004      	add	sp, #16
 8006288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	f043 0320 	orr.w	r3, r3, #32
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	2778      	movs	r7, #120	@ 0x78
 8006296:	4832      	ldr	r0, [pc, #200]	@ (8006360 <_printf_i+0x23c>)
 8006298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	6831      	ldr	r1, [r6, #0]
 80062a0:	061f      	lsls	r7, r3, #24
 80062a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80062a6:	d402      	bmi.n	80062ae <_printf_i+0x18a>
 80062a8:	065f      	lsls	r7, r3, #25
 80062aa:	bf48      	it	mi
 80062ac:	b2ad      	uxthmi	r5, r5
 80062ae:	6031      	str	r1, [r6, #0]
 80062b0:	07d9      	lsls	r1, r3, #31
 80062b2:	bf44      	itt	mi
 80062b4:	f043 0320 	orrmi.w	r3, r3, #32
 80062b8:	6023      	strmi	r3, [r4, #0]
 80062ba:	b11d      	cbz	r5, 80062c4 <_printf_i+0x1a0>
 80062bc:	2310      	movs	r3, #16
 80062be:	e7ab      	b.n	8006218 <_printf_i+0xf4>
 80062c0:	4826      	ldr	r0, [pc, #152]	@ (800635c <_printf_i+0x238>)
 80062c2:	e7e9      	b.n	8006298 <_printf_i+0x174>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f023 0320 	bic.w	r3, r3, #32
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	e7f6      	b.n	80062bc <_printf_i+0x198>
 80062ce:	4616      	mov	r6, r2
 80062d0:	e7bd      	b.n	800624e <_printf_i+0x12a>
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1d18      	adds	r0, r3, #4
 80062d8:	6961      	ldr	r1, [r4, #20]
 80062da:	6030      	str	r0, [r6, #0]
 80062dc:	062e      	lsls	r6, r5, #24
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	d501      	bpl.n	80062e6 <_printf_i+0x1c2>
 80062e2:	6019      	str	r1, [r3, #0]
 80062e4:	e002      	b.n	80062ec <_printf_i+0x1c8>
 80062e6:	0668      	lsls	r0, r5, #25
 80062e8:	d5fb      	bpl.n	80062e2 <_printf_i+0x1be>
 80062ea:	8019      	strh	r1, [r3, #0]
 80062ec:	2300      	movs	r3, #0
 80062ee:	4616      	mov	r6, r2
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	e7bc      	b.n	800626e <_printf_i+0x14a>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	2100      	movs	r1, #0
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	6032      	str	r2, [r6, #0]
 80062fc:	681e      	ldr	r6, [r3, #0]
 80062fe:	6862      	ldr	r2, [r4, #4]
 8006300:	4630      	mov	r0, r6
 8006302:	f000 fa3e 	bl	8006782 <memchr>
 8006306:	b108      	cbz	r0, 800630c <_printf_i+0x1e8>
 8006308:	1b80      	subs	r0, r0, r6
 800630a:	6060      	str	r0, [r4, #4]
 800630c:	6863      	ldr	r3, [r4, #4]
 800630e:	6123      	str	r3, [r4, #16]
 8006310:	2300      	movs	r3, #0
 8006312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006316:	e7aa      	b.n	800626e <_printf_i+0x14a>
 8006318:	4632      	mov	r2, r6
 800631a:	4649      	mov	r1, r9
 800631c:	4640      	mov	r0, r8
 800631e:	6923      	ldr	r3, [r4, #16]
 8006320:	47d0      	blx	sl
 8006322:	3001      	adds	r0, #1
 8006324:	d0ad      	beq.n	8006282 <_printf_i+0x15e>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	079b      	lsls	r3, r3, #30
 800632a:	d413      	bmi.n	8006354 <_printf_i+0x230>
 800632c:	68e0      	ldr	r0, [r4, #12]
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	4298      	cmp	r0, r3
 8006332:	bfb8      	it	lt
 8006334:	4618      	movlt	r0, r3
 8006336:	e7a6      	b.n	8006286 <_printf_i+0x162>
 8006338:	2301      	movs	r3, #1
 800633a:	4632      	mov	r2, r6
 800633c:	4649      	mov	r1, r9
 800633e:	4640      	mov	r0, r8
 8006340:	47d0      	blx	sl
 8006342:	3001      	adds	r0, #1
 8006344:	d09d      	beq.n	8006282 <_printf_i+0x15e>
 8006346:	3501      	adds	r5, #1
 8006348:	68e3      	ldr	r3, [r4, #12]
 800634a:	9903      	ldr	r1, [sp, #12]
 800634c:	1a5b      	subs	r3, r3, r1
 800634e:	42ab      	cmp	r3, r5
 8006350:	dcf2      	bgt.n	8006338 <_printf_i+0x214>
 8006352:	e7eb      	b.n	800632c <_printf_i+0x208>
 8006354:	2500      	movs	r5, #0
 8006356:	f104 0619 	add.w	r6, r4, #25
 800635a:	e7f5      	b.n	8006348 <_printf_i+0x224>
 800635c:	0800987e 	.word	0x0800987e
 8006360:	0800988f 	.word	0x0800988f

08006364 <std>:
 8006364:	2300      	movs	r3, #0
 8006366:	b510      	push	{r4, lr}
 8006368:	4604      	mov	r4, r0
 800636a:	e9c0 3300 	strd	r3, r3, [r0]
 800636e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006372:	6083      	str	r3, [r0, #8]
 8006374:	8181      	strh	r1, [r0, #12]
 8006376:	6643      	str	r3, [r0, #100]	@ 0x64
 8006378:	81c2      	strh	r2, [r0, #14]
 800637a:	6183      	str	r3, [r0, #24]
 800637c:	4619      	mov	r1, r3
 800637e:	2208      	movs	r2, #8
 8006380:	305c      	adds	r0, #92	@ 0x5c
 8006382:	f000 f926 	bl	80065d2 <memset>
 8006386:	4b0d      	ldr	r3, [pc, #52]	@ (80063bc <std+0x58>)
 8006388:	6224      	str	r4, [r4, #32]
 800638a:	6263      	str	r3, [r4, #36]	@ 0x24
 800638c:	4b0c      	ldr	r3, [pc, #48]	@ (80063c0 <std+0x5c>)
 800638e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006390:	4b0c      	ldr	r3, [pc, #48]	@ (80063c4 <std+0x60>)
 8006392:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <std+0x64>)
 8006396:	6323      	str	r3, [r4, #48]	@ 0x30
 8006398:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <std+0x68>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d006      	beq.n	80063ac <std+0x48>
 800639e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063a2:	4294      	cmp	r4, r2
 80063a4:	d002      	beq.n	80063ac <std+0x48>
 80063a6:	33d0      	adds	r3, #208	@ 0xd0
 80063a8:	429c      	cmp	r4, r3
 80063aa:	d105      	bne.n	80063b8 <std+0x54>
 80063ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b4:	f000 b9da 	b.w	800676c <__retarget_lock_init_recursive>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	0800654d 	.word	0x0800654d
 80063c0:	0800656f 	.word	0x0800656f
 80063c4:	080065a7 	.word	0x080065a7
 80063c8:	080065cb 	.word	0x080065cb
 80063cc:	200003a0 	.word	0x200003a0

080063d0 <stdio_exit_handler>:
 80063d0:	4a02      	ldr	r2, [pc, #8]	@ (80063dc <stdio_exit_handler+0xc>)
 80063d2:	4903      	ldr	r1, [pc, #12]	@ (80063e0 <stdio_exit_handler+0x10>)
 80063d4:	4803      	ldr	r0, [pc, #12]	@ (80063e4 <stdio_exit_handler+0x14>)
 80063d6:	f000 b869 	b.w	80064ac <_fwalk_sglue>
 80063da:	bf00      	nop
 80063dc:	20000004 	.word	0x20000004
 80063e0:	0800838d 	.word	0x0800838d
 80063e4:	20000014 	.word	0x20000014

080063e8 <cleanup_stdio>:
 80063e8:	6841      	ldr	r1, [r0, #4]
 80063ea:	4b0c      	ldr	r3, [pc, #48]	@ (800641c <cleanup_stdio+0x34>)
 80063ec:	b510      	push	{r4, lr}
 80063ee:	4299      	cmp	r1, r3
 80063f0:	4604      	mov	r4, r0
 80063f2:	d001      	beq.n	80063f8 <cleanup_stdio+0x10>
 80063f4:	f001 ffca 	bl	800838c <_fflush_r>
 80063f8:	68a1      	ldr	r1, [r4, #8]
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <cleanup_stdio+0x38>)
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <cleanup_stdio+0x1e>
 8006400:	4620      	mov	r0, r4
 8006402:	f001 ffc3 	bl	800838c <_fflush_r>
 8006406:	68e1      	ldr	r1, [r4, #12]
 8006408:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <cleanup_stdio+0x3c>)
 800640a:	4299      	cmp	r1, r3
 800640c:	d004      	beq.n	8006418 <cleanup_stdio+0x30>
 800640e:	4620      	mov	r0, r4
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f001 bfba 	b.w	800838c <_fflush_r>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	200003a0 	.word	0x200003a0
 8006420:	20000408 	.word	0x20000408
 8006424:	20000470 	.word	0x20000470

08006428 <global_stdio_init.part.0>:
 8006428:	b510      	push	{r4, lr}
 800642a:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <global_stdio_init.part.0+0x30>)
 800642c:	4c0b      	ldr	r4, [pc, #44]	@ (800645c <global_stdio_init.part.0+0x34>)
 800642e:	4a0c      	ldr	r2, [pc, #48]	@ (8006460 <global_stdio_init.part.0+0x38>)
 8006430:	4620      	mov	r0, r4
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	2104      	movs	r1, #4
 8006436:	2200      	movs	r2, #0
 8006438:	f7ff ff94 	bl	8006364 <std>
 800643c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006440:	2201      	movs	r2, #1
 8006442:	2109      	movs	r1, #9
 8006444:	f7ff ff8e 	bl	8006364 <std>
 8006448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800644c:	2202      	movs	r2, #2
 800644e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006452:	2112      	movs	r1, #18
 8006454:	f7ff bf86 	b.w	8006364 <std>
 8006458:	200004d8 	.word	0x200004d8
 800645c:	200003a0 	.word	0x200003a0
 8006460:	080063d1 	.word	0x080063d1

08006464 <__sfp_lock_acquire>:
 8006464:	4801      	ldr	r0, [pc, #4]	@ (800646c <__sfp_lock_acquire+0x8>)
 8006466:	f000 b982 	b.w	800676e <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	200004e1 	.word	0x200004e1

08006470 <__sfp_lock_release>:
 8006470:	4801      	ldr	r0, [pc, #4]	@ (8006478 <__sfp_lock_release+0x8>)
 8006472:	f000 b97d 	b.w	8006770 <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	200004e1 	.word	0x200004e1

0800647c <__sinit>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	f7ff fff0 	bl	8006464 <__sfp_lock_acquire>
 8006484:	6a23      	ldr	r3, [r4, #32]
 8006486:	b11b      	cbz	r3, 8006490 <__sinit+0x14>
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	f7ff bff0 	b.w	8006470 <__sfp_lock_release>
 8006490:	4b04      	ldr	r3, [pc, #16]	@ (80064a4 <__sinit+0x28>)
 8006492:	6223      	str	r3, [r4, #32]
 8006494:	4b04      	ldr	r3, [pc, #16]	@ (80064a8 <__sinit+0x2c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f5      	bne.n	8006488 <__sinit+0xc>
 800649c:	f7ff ffc4 	bl	8006428 <global_stdio_init.part.0>
 80064a0:	e7f2      	b.n	8006488 <__sinit+0xc>
 80064a2:	bf00      	nop
 80064a4:	080063e9 	.word	0x080063e9
 80064a8:	200004d8 	.word	0x200004d8

080064ac <_fwalk_sglue>:
 80064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	4607      	mov	r7, r0
 80064b2:	4688      	mov	r8, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	2600      	movs	r6, #0
 80064b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064bc:	f1b9 0901 	subs.w	r9, r9, #1
 80064c0:	d505      	bpl.n	80064ce <_fwalk_sglue+0x22>
 80064c2:	6824      	ldr	r4, [r4, #0]
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	d1f7      	bne.n	80064b8 <_fwalk_sglue+0xc>
 80064c8:	4630      	mov	r0, r6
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d907      	bls.n	80064e4 <_fwalk_sglue+0x38>
 80064d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064d8:	3301      	adds	r3, #1
 80064da:	d003      	beq.n	80064e4 <_fwalk_sglue+0x38>
 80064dc:	4629      	mov	r1, r5
 80064de:	4638      	mov	r0, r7
 80064e0:	47c0      	blx	r8
 80064e2:	4306      	orrs	r6, r0
 80064e4:	3568      	adds	r5, #104	@ 0x68
 80064e6:	e7e9      	b.n	80064bc <_fwalk_sglue+0x10>

080064e8 <iprintf>:
 80064e8:	b40f      	push	{r0, r1, r2, r3}
 80064ea:	b507      	push	{r0, r1, r2, lr}
 80064ec:	4906      	ldr	r1, [pc, #24]	@ (8006508 <iprintf+0x20>)
 80064ee:	ab04      	add	r3, sp, #16
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f6:	6881      	ldr	r1, [r0, #8]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	f001 fdaf 	bl	800805c <_vfiprintf_r>
 80064fe:	b003      	add	sp, #12
 8006500:	f85d eb04 	ldr.w	lr, [sp], #4
 8006504:	b004      	add	sp, #16
 8006506:	4770      	bx	lr
 8006508:	20000010 	.word	0x20000010

0800650c <siprintf>:
 800650c:	b40e      	push	{r1, r2, r3}
 800650e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006512:	b500      	push	{lr}
 8006514:	b09c      	sub	sp, #112	@ 0x70
 8006516:	ab1d      	add	r3, sp, #116	@ 0x74
 8006518:	9002      	str	r0, [sp, #8]
 800651a:	9006      	str	r0, [sp, #24]
 800651c:	9107      	str	r1, [sp, #28]
 800651e:	9104      	str	r1, [sp, #16]
 8006520:	4808      	ldr	r0, [pc, #32]	@ (8006544 <siprintf+0x38>)
 8006522:	4909      	ldr	r1, [pc, #36]	@ (8006548 <siprintf+0x3c>)
 8006524:	f853 2b04 	ldr.w	r2, [r3], #4
 8006528:	9105      	str	r1, [sp, #20]
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	a902      	add	r1, sp, #8
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	f001 fc70 	bl	8007e14 <_svfiprintf_r>
 8006534:	2200      	movs	r2, #0
 8006536:	9b02      	ldr	r3, [sp, #8]
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	b01c      	add	sp, #112	@ 0x70
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b003      	add	sp, #12
 8006542:	4770      	bx	lr
 8006544:	20000010 	.word	0x20000010
 8006548:	ffff0208 	.word	0xffff0208

0800654c <__sread>:
 800654c:	b510      	push	{r4, lr}
 800654e:	460c      	mov	r4, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	f000 f8bc 	bl	80066d0 <_read_r>
 8006558:	2800      	cmp	r0, #0
 800655a:	bfab      	itete	ge
 800655c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800655e:	89a3      	ldrhlt	r3, [r4, #12]
 8006560:	181b      	addge	r3, r3, r0
 8006562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006566:	bfac      	ite	ge
 8006568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800656a:	81a3      	strhlt	r3, [r4, #12]
 800656c:	bd10      	pop	{r4, pc}

0800656e <__swrite>:
 800656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	461f      	mov	r7, r3
 8006574:	898b      	ldrh	r3, [r1, #12]
 8006576:	4605      	mov	r5, r0
 8006578:	05db      	lsls	r3, r3, #23
 800657a:	460c      	mov	r4, r1
 800657c:	4616      	mov	r6, r2
 800657e:	d505      	bpl.n	800658c <__swrite+0x1e>
 8006580:	2302      	movs	r3, #2
 8006582:	2200      	movs	r2, #0
 8006584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006588:	f000 f890 	bl	80066ac <_lseek_r>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	4632      	mov	r2, r6
 8006590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006594:	81a3      	strh	r3, [r4, #12]
 8006596:	4628      	mov	r0, r5
 8006598:	463b      	mov	r3, r7
 800659a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800659e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a2:	f000 b8a7 	b.w	80066f4 <_write_r>

080065a6 <__sseek>:
 80065a6:	b510      	push	{r4, lr}
 80065a8:	460c      	mov	r4, r1
 80065aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ae:	f000 f87d 	bl	80066ac <_lseek_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	bf15      	itete	ne
 80065b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065c2:	81a3      	strheq	r3, [r4, #12]
 80065c4:	bf18      	it	ne
 80065c6:	81a3      	strhne	r3, [r4, #12]
 80065c8:	bd10      	pop	{r4, pc}

080065ca <__sclose>:
 80065ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ce:	f000 b85d 	b.w	800668c <_close_r>

080065d2 <memset>:
 80065d2:	4603      	mov	r3, r0
 80065d4:	4402      	add	r2, r0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d100      	bne.n	80065dc <memset+0xa>
 80065da:	4770      	bx	lr
 80065dc:	f803 1b01 	strb.w	r1, [r3], #1
 80065e0:	e7f9      	b.n	80065d6 <memset+0x4>
	...

080065e4 <strcasecmp>:
 80065e4:	b530      	push	{r4, r5, lr}
 80065e6:	4604      	mov	r4, r0
 80065e8:	4d0a      	ldr	r5, [pc, #40]	@ (8006614 <strcasecmp+0x30>)
 80065ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065ee:	5cea      	ldrb	r2, [r5, r3]
 80065f0:	f002 0203 	and.w	r2, r2, #3
 80065f4:	2a01      	cmp	r2, #1
 80065f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065fa:	bf08      	it	eq
 80065fc:	3320      	addeq	r3, #32
 80065fe:	5ca8      	ldrb	r0, [r5, r2]
 8006600:	f000 0003 	and.w	r0, r0, #3
 8006604:	2801      	cmp	r0, #1
 8006606:	bf08      	it	eq
 8006608:	3220      	addeq	r2, #32
 800660a:	1a98      	subs	r0, r3, r2
 800660c:	d101      	bne.n	8006612 <strcasecmp+0x2e>
 800660e:	2a00      	cmp	r2, #0
 8006610:	d1eb      	bne.n	80065ea <strcasecmp+0x6>
 8006612:	bd30      	pop	{r4, r5, pc}
 8006614:	08009a89 	.word	0x08009a89

08006618 <strcspn>:
 8006618:	4603      	mov	r3, r0
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	461e      	mov	r6, r3
 800661e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006622:	b144      	cbz	r4, 8006636 <strcspn+0x1e>
 8006624:	1e4a      	subs	r2, r1, #1
 8006626:	e001      	b.n	800662c <strcspn+0x14>
 8006628:	42a5      	cmp	r5, r4
 800662a:	d004      	beq.n	8006636 <strcspn+0x1e>
 800662c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006630:	2d00      	cmp	r5, #0
 8006632:	d1f9      	bne.n	8006628 <strcspn+0x10>
 8006634:	e7f2      	b.n	800661c <strcspn+0x4>
 8006636:	1a30      	subs	r0, r6, r0
 8006638:	bd70      	pop	{r4, r5, r6, pc}

0800663a <strncat>:
 800663a:	b530      	push	{r4, r5, lr}
 800663c:	4604      	mov	r4, r0
 800663e:	7825      	ldrb	r5, [r4, #0]
 8006640:	4623      	mov	r3, r4
 8006642:	3401      	adds	r4, #1
 8006644:	2d00      	cmp	r5, #0
 8006646:	d1fa      	bne.n	800663e <strncat+0x4>
 8006648:	3a01      	subs	r2, #1
 800664a:	d304      	bcc.n	8006656 <strncat+0x1c>
 800664c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006650:	f803 4b01 	strb.w	r4, [r3], #1
 8006654:	b904      	cbnz	r4, 8006658 <strncat+0x1e>
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	2a00      	cmp	r2, #0
 800665a:	d1f5      	bne.n	8006648 <strncat+0xe>
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e7f3      	b.n	8006648 <strncat+0xe>

08006660 <strncmp>:
 8006660:	b510      	push	{r4, lr}
 8006662:	b16a      	cbz	r2, 8006680 <strncmp+0x20>
 8006664:	3901      	subs	r1, #1
 8006666:	1884      	adds	r4, r0, r2
 8006668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006670:	429a      	cmp	r2, r3
 8006672:	d103      	bne.n	800667c <strncmp+0x1c>
 8006674:	42a0      	cmp	r0, r4
 8006676:	d001      	beq.n	800667c <strncmp+0x1c>
 8006678:	2a00      	cmp	r2, #0
 800667a:	d1f5      	bne.n	8006668 <strncmp+0x8>
 800667c:	1ad0      	subs	r0, r2, r3
 800667e:	bd10      	pop	{r4, pc}
 8006680:	4610      	mov	r0, r2
 8006682:	e7fc      	b.n	800667e <strncmp+0x1e>

08006684 <_localeconv_r>:
 8006684:	4800      	ldr	r0, [pc, #0]	@ (8006688 <_localeconv_r+0x4>)
 8006686:	4770      	bx	lr
 8006688:	20000150 	.word	0x20000150

0800668c <_close_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	2300      	movs	r3, #0
 8006690:	4d05      	ldr	r5, [pc, #20]	@ (80066a8 <_close_r+0x1c>)
 8006692:	4604      	mov	r4, r0
 8006694:	4608      	mov	r0, r1
 8006696:	602b      	str	r3, [r5, #0]
 8006698:	f7fc f843 	bl	8002722 <_close>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_close_r+0x1a>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_close_r+0x1a>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	200004dc 	.word	0x200004dc

080066ac <_lseek_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	2200      	movs	r2, #0
 80066b6:	4d05      	ldr	r5, [pc, #20]	@ (80066cc <_lseek_r+0x20>)
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fc f855 	bl	800276a <_lseek>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_lseek_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_lseek_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	200004dc 	.word	0x200004dc

080066d0 <_read_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	2200      	movs	r2, #0
 80066da:	4d05      	ldr	r5, [pc, #20]	@ (80066f0 <_read_r+0x20>)
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fb ffe6 	bl	80026b0 <_read>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_read_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_read_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	200004dc 	.word	0x200004dc

080066f4 <_write_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	2200      	movs	r2, #0
 80066fe:	4d05      	ldr	r5, [pc, #20]	@ (8006714 <_write_r+0x20>)
 8006700:	602a      	str	r2, [r5, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	f7fb fff1 	bl	80026ea <_write>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_write_r+0x1e>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_write_r+0x1e>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200004dc 	.word	0x200004dc

08006718 <__errno>:
 8006718:	4b01      	ldr	r3, [pc, #4]	@ (8006720 <__errno+0x8>)
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000010 	.word	0x20000010

08006724 <__libc_init_array>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	2600      	movs	r6, #0
 8006728:	4d0c      	ldr	r5, [pc, #48]	@ (800675c <__libc_init_array+0x38>)
 800672a:	4c0d      	ldr	r4, [pc, #52]	@ (8006760 <__libc_init_array+0x3c>)
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	42a6      	cmp	r6, r4
 8006732:	d109      	bne.n	8006748 <__libc_init_array+0x24>
 8006734:	f002 fb50 	bl	8008dd8 <_init>
 8006738:	2600      	movs	r6, #0
 800673a:	4d0a      	ldr	r5, [pc, #40]	@ (8006764 <__libc_init_array+0x40>)
 800673c:	4c0a      	ldr	r4, [pc, #40]	@ (8006768 <__libc_init_array+0x44>)
 800673e:	1b64      	subs	r4, r4, r5
 8006740:	10a4      	asrs	r4, r4, #2
 8006742:	42a6      	cmp	r6, r4
 8006744:	d105      	bne.n	8006752 <__libc_init_array+0x2e>
 8006746:	bd70      	pop	{r4, r5, r6, pc}
 8006748:	f855 3b04 	ldr.w	r3, [r5], #4
 800674c:	4798      	blx	r3
 800674e:	3601      	adds	r6, #1
 8006750:	e7ee      	b.n	8006730 <__libc_init_array+0xc>
 8006752:	f855 3b04 	ldr.w	r3, [r5], #4
 8006756:	4798      	blx	r3
 8006758:	3601      	adds	r6, #1
 800675a:	e7f2      	b.n	8006742 <__libc_init_array+0x1e>
 800675c:	08009c28 	.word	0x08009c28
 8006760:	08009c28 	.word	0x08009c28
 8006764:	08009c28 	.word	0x08009c28
 8006768:	08009c2c 	.word	0x08009c2c

0800676c <__retarget_lock_init_recursive>:
 800676c:	4770      	bx	lr

0800676e <__retarget_lock_acquire_recursive>:
 800676e:	4770      	bx	lr

08006770 <__retarget_lock_release_recursive>:
 8006770:	4770      	bx	lr

08006772 <strcpy>:
 8006772:	4603      	mov	r3, r0
 8006774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006778:	f803 2b01 	strb.w	r2, [r3], #1
 800677c:	2a00      	cmp	r2, #0
 800677e:	d1f9      	bne.n	8006774 <strcpy+0x2>
 8006780:	4770      	bx	lr

08006782 <memchr>:
 8006782:	4603      	mov	r3, r0
 8006784:	b510      	push	{r4, lr}
 8006786:	b2c9      	uxtb	r1, r1
 8006788:	4402      	add	r2, r0
 800678a:	4293      	cmp	r3, r2
 800678c:	4618      	mov	r0, r3
 800678e:	d101      	bne.n	8006794 <memchr+0x12>
 8006790:	2000      	movs	r0, #0
 8006792:	e003      	b.n	800679c <memchr+0x1a>
 8006794:	7804      	ldrb	r4, [r0, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	428c      	cmp	r4, r1
 800679a:	d1f6      	bne.n	800678a <memchr+0x8>
 800679c:	bd10      	pop	{r4, pc}

0800679e <memcpy>:
 800679e:	440a      	add	r2, r1
 80067a0:	4291      	cmp	r1, r2
 80067a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80067a6:	d100      	bne.n	80067aa <memcpy+0xc>
 80067a8:	4770      	bx	lr
 80067aa:	b510      	push	{r4, lr}
 80067ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067b0:	4291      	cmp	r1, r2
 80067b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b6:	d1f9      	bne.n	80067ac <memcpy+0xe>
 80067b8:	bd10      	pop	{r4, pc}

080067ba <quorem>:
 80067ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067be:	6903      	ldr	r3, [r0, #16]
 80067c0:	690c      	ldr	r4, [r1, #16]
 80067c2:	4607      	mov	r7, r0
 80067c4:	42a3      	cmp	r3, r4
 80067c6:	db7e      	blt.n	80068c6 <quorem+0x10c>
 80067c8:	3c01      	subs	r4, #1
 80067ca:	00a3      	lsls	r3, r4, #2
 80067cc:	f100 0514 	add.w	r5, r0, #20
 80067d0:	f101 0814 	add.w	r8, r1, #20
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067e4:	3301      	adds	r3, #1
 80067e6:	429a      	cmp	r2, r3
 80067e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80067ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067f0:	d32e      	bcc.n	8006850 <quorem+0x96>
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	46c4      	mov	ip, r8
 80067f8:	46ae      	mov	lr, r5
 80067fa:	46d3      	mov	fp, sl
 80067fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006800:	b298      	uxth	r0, r3
 8006802:	fb06 a000 	mla	r0, r6, r0, sl
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	0c02      	lsrs	r2, r0, #16
 800680a:	fb06 2303 	mla	r3, r6, r3, r2
 800680e:	f8de 2000 	ldr.w	r2, [lr]
 8006812:	b280      	uxth	r0, r0
 8006814:	b292      	uxth	r2, r2
 8006816:	1a12      	subs	r2, r2, r0
 8006818:	445a      	add	r2, fp
 800681a:	f8de 0000 	ldr.w	r0, [lr]
 800681e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006822:	b29b      	uxth	r3, r3
 8006824:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006828:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800682c:	b292      	uxth	r2, r2
 800682e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006832:	45e1      	cmp	r9, ip
 8006834:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006838:	f84e 2b04 	str.w	r2, [lr], #4
 800683c:	d2de      	bcs.n	80067fc <quorem+0x42>
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	58eb      	ldr	r3, [r5, r3]
 8006842:	b92b      	cbnz	r3, 8006850 <quorem+0x96>
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	3b04      	subs	r3, #4
 8006848:	429d      	cmp	r5, r3
 800684a:	461a      	mov	r2, r3
 800684c:	d32f      	bcc.n	80068ae <quorem+0xf4>
 800684e:	613c      	str	r4, [r7, #16]
 8006850:	4638      	mov	r0, r7
 8006852:	f001 f97b 	bl	8007b4c <__mcmp>
 8006856:	2800      	cmp	r0, #0
 8006858:	db25      	blt.n	80068a6 <quorem+0xec>
 800685a:	4629      	mov	r1, r5
 800685c:	2000      	movs	r0, #0
 800685e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006862:	f8d1 c000 	ldr.w	ip, [r1]
 8006866:	fa1f fe82 	uxth.w	lr, r2
 800686a:	fa1f f38c 	uxth.w	r3, ip
 800686e:	eba3 030e 	sub.w	r3, r3, lr
 8006872:	4403      	add	r3, r0
 8006874:	0c12      	lsrs	r2, r2, #16
 8006876:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800687a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800687e:	b29b      	uxth	r3, r3
 8006880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006884:	45c1      	cmp	r9, r8
 8006886:	ea4f 4022 	mov.w	r0, r2, asr #16
 800688a:	f841 3b04 	str.w	r3, [r1], #4
 800688e:	d2e6      	bcs.n	800685e <quorem+0xa4>
 8006890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006898:	b922      	cbnz	r2, 80068a4 <quorem+0xea>
 800689a:	3b04      	subs	r3, #4
 800689c:	429d      	cmp	r5, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	d30b      	bcc.n	80068ba <quorem+0x100>
 80068a2:	613c      	str	r4, [r7, #16]
 80068a4:	3601      	adds	r6, #1
 80068a6:	4630      	mov	r0, r6
 80068a8:	b003      	add	sp, #12
 80068aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	3b04      	subs	r3, #4
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d1cb      	bne.n	800684e <quorem+0x94>
 80068b6:	3c01      	subs	r4, #1
 80068b8:	e7c6      	b.n	8006848 <quorem+0x8e>
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	3b04      	subs	r3, #4
 80068be:	2a00      	cmp	r2, #0
 80068c0:	d1ef      	bne.n	80068a2 <quorem+0xe8>
 80068c2:	3c01      	subs	r4, #1
 80068c4:	e7ea      	b.n	800689c <quorem+0xe2>
 80068c6:	2000      	movs	r0, #0
 80068c8:	e7ee      	b.n	80068a8 <quorem+0xee>
 80068ca:	0000      	movs	r0, r0
 80068cc:	0000      	movs	r0, r0
	...

080068d0 <_dtoa_r>:
 80068d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d4:	4614      	mov	r4, r2
 80068d6:	461d      	mov	r5, r3
 80068d8:	69c7      	ldr	r7, [r0, #28]
 80068da:	b097      	sub	sp, #92	@ 0x5c
 80068dc:	4683      	mov	fp, r0
 80068de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80068e4:	b97f      	cbnz	r7, 8006906 <_dtoa_r+0x36>
 80068e6:	2010      	movs	r0, #16
 80068e8:	f000 fe02 	bl	80074f0 <malloc>
 80068ec:	4602      	mov	r2, r0
 80068ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80068f2:	b920      	cbnz	r0, 80068fe <_dtoa_r+0x2e>
 80068f4:	21ef      	movs	r1, #239	@ 0xef
 80068f6:	4ba8      	ldr	r3, [pc, #672]	@ (8006b98 <_dtoa_r+0x2c8>)
 80068f8:	48a8      	ldr	r0, [pc, #672]	@ (8006b9c <_dtoa_r+0x2cc>)
 80068fa:	f001 fe2d 	bl	8008558 <__assert_func>
 80068fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006902:	6007      	str	r7, [r0, #0]
 8006904:	60c7      	str	r7, [r0, #12]
 8006906:	f8db 301c 	ldr.w	r3, [fp, #28]
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	b159      	cbz	r1, 8006926 <_dtoa_r+0x56>
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	2301      	movs	r3, #1
 8006912:	4093      	lsls	r3, r2
 8006914:	604a      	str	r2, [r1, #4]
 8006916:	608b      	str	r3, [r1, #8]
 8006918:	4658      	mov	r0, fp
 800691a:	f000 fedf 	bl	80076dc <_Bfree>
 800691e:	2200      	movs	r2, #0
 8006920:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	1e2b      	subs	r3, r5, #0
 8006928:	bfaf      	iteee	ge
 800692a:	2300      	movge	r3, #0
 800692c:	2201      	movlt	r2, #1
 800692e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006932:	9303      	strlt	r3, [sp, #12]
 8006934:	bfa8      	it	ge
 8006936:	6033      	strge	r3, [r6, #0]
 8006938:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800693c:	4b98      	ldr	r3, [pc, #608]	@ (8006ba0 <_dtoa_r+0x2d0>)
 800693e:	bfb8      	it	lt
 8006940:	6032      	strlt	r2, [r6, #0]
 8006942:	ea33 0308 	bics.w	r3, r3, r8
 8006946:	d112      	bne.n	800696e <_dtoa_r+0x9e>
 8006948:	f242 730f 	movw	r3, #9999	@ 0x270f
 800694c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006954:	4323      	orrs	r3, r4
 8006956:	f000 8550 	beq.w	80073fa <_dtoa_r+0xb2a>
 800695a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800695c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006ba4 <_dtoa_r+0x2d4>
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8552 	beq.w	800740a <_dtoa_r+0xb3a>
 8006966:	f10a 0303 	add.w	r3, sl, #3
 800696a:	f000 bd4c 	b.w	8007406 <_dtoa_r+0xb36>
 800696e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006972:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	2300      	movs	r3, #0
 800697e:	f7fa f823 	bl	80009c8 <__aeabi_dcmpeq>
 8006982:	4607      	mov	r7, r0
 8006984:	b158      	cbz	r0, 800699e <_dtoa_r+0xce>
 8006986:	2301      	movs	r3, #1
 8006988:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800698e:	b113      	cbz	r3, 8006996 <_dtoa_r+0xc6>
 8006990:	4b85      	ldr	r3, [pc, #532]	@ (8006ba8 <_dtoa_r+0x2d8>)
 8006992:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006bac <_dtoa_r+0x2dc>
 800699a:	f000 bd36 	b.w	800740a <_dtoa_r+0xb3a>
 800699e:	ab14      	add	r3, sp, #80	@ 0x50
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	ab15      	add	r3, sp, #84	@ 0x54
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	4658      	mov	r0, fp
 80069a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069ac:	f001 f97e 	bl	8007cac <__d2b>
 80069b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80069b4:	4681      	mov	r9, r0
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	d077      	beq.n	8006aaa <_dtoa_r+0x1da>
 80069ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80069d2:	4619      	mov	r1, r3
 80069d4:	2200      	movs	r2, #0
 80069d6:	4b76      	ldr	r3, [pc, #472]	@ (8006bb0 <_dtoa_r+0x2e0>)
 80069d8:	f7f9 fbd6 	bl	8000188 <__aeabi_dsub>
 80069dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006b80 <_dtoa_r+0x2b0>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fd89 	bl	80004f8 <__aeabi_dmul>
 80069e6:	a368      	add	r3, pc, #416	@ (adr r3, 8006b88 <_dtoa_r+0x2b8>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7f9 fbce 	bl	800018c <__adddf3>
 80069f0:	4604      	mov	r4, r0
 80069f2:	4630      	mov	r0, r6
 80069f4:	460d      	mov	r5, r1
 80069f6:	f7f9 fd15 	bl	8000424 <__aeabi_i2d>
 80069fa:	a365      	add	r3, pc, #404	@ (adr r3, 8006b90 <_dtoa_r+0x2c0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 fd7a 	bl	80004f8 <__aeabi_dmul>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	f7f9 fbbe 	bl	800018c <__adddf3>
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	f7fa f820 	bl	8000a58 <__aeabi_d2iz>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4607      	mov	r7, r0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7f9 ffdb 	bl	80009dc <__aeabi_dcmplt>
 8006a26:	b140      	cbz	r0, 8006a3a <_dtoa_r+0x16a>
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7f9 fcfb 	bl	8000424 <__aeabi_i2d>
 8006a2e:	4622      	mov	r2, r4
 8006a30:	462b      	mov	r3, r5
 8006a32:	f7f9 ffc9 	bl	80009c8 <__aeabi_dcmpeq>
 8006a36:	b900      	cbnz	r0, 8006a3a <_dtoa_r+0x16a>
 8006a38:	3f01      	subs	r7, #1
 8006a3a:	2f16      	cmp	r7, #22
 8006a3c:	d853      	bhi.n	8006ae6 <_dtoa_r+0x216>
 8006a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a42:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb4 <_dtoa_r+0x2e4>)
 8006a44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	f7f9 ffc6 	bl	80009dc <__aeabi_dcmplt>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d04a      	beq.n	8006aea <_dtoa_r+0x21a>
 8006a54:	2300      	movs	r3, #0
 8006a56:	3f01      	subs	r7, #1
 8006a58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a5c:	1b9b      	subs	r3, r3, r6
 8006a5e:	1e5a      	subs	r2, r3, #1
 8006a60:	bf46      	itte	mi
 8006a62:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a66:	2300      	movmi	r3, #0
 8006a68:	f04f 0800 	movpl.w	r8, #0
 8006a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a6e:	bf48      	it	mi
 8006a70:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006a72:	2f00      	cmp	r7, #0
 8006a74:	db3b      	blt.n	8006aee <_dtoa_r+0x21e>
 8006a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a78:	970e      	str	r7, [sp, #56]	@ 0x38
 8006a7a:	443b      	add	r3, r7
 8006a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7e:	2300      	movs	r3, #0
 8006a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a84:	2b09      	cmp	r3, #9
 8006a86:	d866      	bhi.n	8006b56 <_dtoa_r+0x286>
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	bfc4      	itt	gt
 8006a8c:	3b04      	subgt	r3, #4
 8006a8e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006a90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a92:	bfc8      	it	gt
 8006a94:	2400      	movgt	r4, #0
 8006a96:	f1a3 0302 	sub.w	r3, r3, #2
 8006a9a:	bfd8      	it	le
 8006a9c:	2401      	movle	r4, #1
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d864      	bhi.n	8006b6c <_dtoa_r+0x29c>
 8006aa2:	e8df f003 	tbb	[pc, r3]
 8006aa6:	382b      	.short	0x382b
 8006aa8:	5636      	.short	0x5636
 8006aaa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006aae:	441e      	add	r6, r3
 8006ab0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ab4:	2b20      	cmp	r3, #32
 8006ab6:	bfc1      	itttt	gt
 8006ab8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006abc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ac0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ac4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ac8:	bfd6      	itet	le
 8006aca:	f1c3 0320 	rsble	r3, r3, #32
 8006ace:	ea48 0003 	orrgt.w	r0, r8, r3
 8006ad2:	fa04 f003 	lslle.w	r0, r4, r3
 8006ad6:	f7f9 fc95 	bl	8000404 <__aeabi_ui2d>
 8006ada:	2201      	movs	r2, #1
 8006adc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ae0:	3e01      	subs	r6, #1
 8006ae2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ae4:	e775      	b.n	80069d2 <_dtoa_r+0x102>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7b6      	b.n	8006a58 <_dtoa_r+0x188>
 8006aea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006aec:	e7b5      	b.n	8006a5a <_dtoa_r+0x18a>
 8006aee:	427b      	negs	r3, r7
 8006af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006af2:	2300      	movs	r3, #0
 8006af4:	eba8 0807 	sub.w	r8, r8, r7
 8006af8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006afa:	e7c2      	b.n	8006a82 <_dtoa_r+0x1b2>
 8006afc:	2300      	movs	r3, #0
 8006afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dc35      	bgt.n	8006b72 <_dtoa_r+0x2a2>
 8006b06:	2301      	movs	r3, #1
 8006b08:	461a      	mov	r2, r3
 8006b0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006b10:	e00b      	b.n	8006b2a <_dtoa_r+0x25a>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e7f3      	b.n	8006afe <_dtoa_r+0x22e>
 8006b16:	2300      	movs	r3, #0
 8006b18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	3301      	adds	r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	9307      	str	r3, [sp, #28]
 8006b26:	bfb8      	it	lt
 8006b28:	2301      	movlt	r3, #1
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b32:	f102 0514 	add.w	r5, r2, #20
 8006b36:	429d      	cmp	r5, r3
 8006b38:	d91f      	bls.n	8006b7a <_dtoa_r+0x2aa>
 8006b3a:	6041      	str	r1, [r0, #4]
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fd8d 	bl	800765c <_Balloc>
 8006b42:	4682      	mov	sl, r0
 8006b44:	2800      	cmp	r0, #0
 8006b46:	d139      	bne.n	8006bbc <_dtoa_r+0x2ec>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006bb8 <_dtoa_r+0x2e8>)
 8006b50:	e6d2      	b.n	80068f8 <_dtoa_r+0x28>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7e0      	b.n	8006b18 <_dtoa_r+0x248>
 8006b56:	2401      	movs	r4, #1
 8006b58:	2300      	movs	r3, #0
 8006b5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b62:	2200      	movs	r2, #0
 8006b64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b68:	2312      	movs	r3, #18
 8006b6a:	e7d0      	b.n	8006b0e <_dtoa_r+0x23e>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b70:	e7f5      	b.n	8006b5e <_dtoa_r+0x28e>
 8006b72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b78:	e7d7      	b.n	8006b2a <_dtoa_r+0x25a>
 8006b7a:	3101      	adds	r1, #1
 8006b7c:	0052      	lsls	r2, r2, #1
 8006b7e:	e7d8      	b.n	8006b32 <_dtoa_r+0x262>
 8006b80:	636f4361 	.word	0x636f4361
 8006b84:	3fd287a7 	.word	0x3fd287a7
 8006b88:	8b60c8b3 	.word	0x8b60c8b3
 8006b8c:	3fc68a28 	.word	0x3fc68a28
 8006b90:	509f79fb 	.word	0x509f79fb
 8006b94:	3fd34413 	.word	0x3fd34413
 8006b98:	080098ad 	.word	0x080098ad
 8006b9c:	080098c4 	.word	0x080098c4
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	080098a9 	.word	0x080098a9
 8006ba8:	0800987d 	.word	0x0800987d
 8006bac:	0800987c 	.word	0x0800987c
 8006bb0:	3ff80000 	.word	0x3ff80000
 8006bb4:	080099c0 	.word	0x080099c0
 8006bb8:	0800991c 	.word	0x0800991c
 8006bbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bc0:	6018      	str	r0, [r3, #0]
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	2b0e      	cmp	r3, #14
 8006bc6:	f200 80a4 	bhi.w	8006d12 <_dtoa_r+0x442>
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	f000 80a1 	beq.w	8006d12 <_dtoa_r+0x442>
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	dd33      	ble.n	8006c3c <_dtoa_r+0x36c>
 8006bd4:	4b86      	ldr	r3, [pc, #536]	@ (8006df0 <_dtoa_r+0x520>)
 8006bd6:	f007 020f 	and.w	r2, r7, #15
 8006bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bde:	05f8      	lsls	r0, r7, #23
 8006be0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006be4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006be8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bec:	d516      	bpl.n	8006c1c <_dtoa_r+0x34c>
 8006bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bf2:	4b80      	ldr	r3, [pc, #512]	@ (8006df4 <_dtoa_r+0x524>)
 8006bf4:	2603      	movs	r6, #3
 8006bf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bfa:	f7f9 fda7 	bl	800074c <__aeabi_ddiv>
 8006bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c02:	f004 040f 	and.w	r4, r4, #15
 8006c06:	4d7b      	ldr	r5, [pc, #492]	@ (8006df4 <_dtoa_r+0x524>)
 8006c08:	b954      	cbnz	r4, 8006c20 <_dtoa_r+0x350>
 8006c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c12:	f7f9 fd9b 	bl	800074c <__aeabi_ddiv>
 8006c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1a:	e028      	b.n	8006c6e <_dtoa_r+0x39e>
 8006c1c:	2602      	movs	r6, #2
 8006c1e:	e7f2      	b.n	8006c06 <_dtoa_r+0x336>
 8006c20:	07e1      	lsls	r1, r4, #31
 8006c22:	d508      	bpl.n	8006c36 <_dtoa_r+0x366>
 8006c24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c2c:	f7f9 fc64 	bl	80004f8 <__aeabi_dmul>
 8006c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c34:	3601      	adds	r6, #1
 8006c36:	1064      	asrs	r4, r4, #1
 8006c38:	3508      	adds	r5, #8
 8006c3a:	e7e5      	b.n	8006c08 <_dtoa_r+0x338>
 8006c3c:	f000 80d2 	beq.w	8006de4 <_dtoa_r+0x514>
 8006c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c44:	427c      	negs	r4, r7
 8006c46:	4b6a      	ldr	r3, [pc, #424]	@ (8006df0 <_dtoa_r+0x520>)
 8006c48:	f004 020f 	and.w	r2, r4, #15
 8006c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fc50 	bl	80004f8 <__aeabi_dmul>
 8006c58:	2602      	movs	r6, #2
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c60:	4d64      	ldr	r5, [pc, #400]	@ (8006df4 <_dtoa_r+0x524>)
 8006c62:	1124      	asrs	r4, r4, #4
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	f040 80b2 	bne.w	8006dce <_dtoa_r+0x4fe>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1d3      	bne.n	8006c16 <_dtoa_r+0x346>
 8006c6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80b7 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4b5d      	ldr	r3, [pc, #372]	@ (8006df8 <_dtoa_r+0x528>)
 8006c82:	f7f9 feab 	bl	80009dc <__aeabi_dcmplt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f000 80ae 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c8c:	9b07      	ldr	r3, [sp, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80aa 	beq.w	8006de8 <_dtoa_r+0x518>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd37      	ble.n	8006d0a <_dtoa_r+0x43a>
 8006c9a:	1e7b      	subs	r3, r7, #1
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4b55      	ldr	r3, [pc, #340]	@ (8006dfc <_dtoa_r+0x52c>)
 8006ca6:	f7f9 fc27 	bl	80004f8 <__aeabi_dmul>
 8006caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cae:	9c08      	ldr	r4, [sp, #32]
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7f9 fbb6 	bl	8000424 <__aeabi_i2d>
 8006cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cbc:	f7f9 fc1c 	bl	80004f8 <__aeabi_dmul>
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e00 <_dtoa_r+0x530>)
 8006cc4:	f7f9 fa62 	bl	800018c <__adddf3>
 8006cc8:	4605      	mov	r5, r0
 8006cca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	f040 809a 	bne.w	8006e08 <_dtoa_r+0x538>
 8006cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4b4a      	ldr	r3, [pc, #296]	@ (8006e04 <_dtoa_r+0x534>)
 8006cdc:	f7f9 fa54 	bl	8000188 <__aeabi_dsub>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4633      	mov	r3, r6
 8006cec:	f7f9 fe94 	bl	8000a18 <__aeabi_dcmpgt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f040 828e 	bne.w	8007212 <_dtoa_r+0x942>
 8006cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d00:	f7f9 fe6c 	bl	80009dc <__aeabi_dcmplt>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	f040 8127 	bne.w	8006f58 <_dtoa_r+0x688>
 8006d0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006d12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f2c0 8163 	blt.w	8006fe0 <_dtoa_r+0x710>
 8006d1a:	2f0e      	cmp	r7, #14
 8006d1c:	f300 8160 	bgt.w	8006fe0 <_dtoa_r+0x710>
 8006d20:	4b33      	ldr	r3, [pc, #204]	@ (8006df0 <_dtoa_r+0x520>)
 8006d22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da03      	bge.n	8006d3c <_dtoa_r+0x46c>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f340 8100 	ble.w	8006f3c <_dtoa_r+0x66c>
 8006d3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d40:	4656      	mov	r6, sl
 8006d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7f9 fcff 	bl	800074c <__aeabi_ddiv>
 8006d4e:	f7f9 fe83 	bl	8000a58 <__aeabi_d2iz>
 8006d52:	4680      	mov	r8, r0
 8006d54:	f7f9 fb66 	bl	8000424 <__aeabi_i2d>
 8006d58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d5c:	f7f9 fbcc 	bl	80004f8 <__aeabi_dmul>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 fa0e 	bl	8000188 <__aeabi_dsub>
 8006d6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d70:	9d07      	ldr	r5, [sp, #28]
 8006d72:	f806 4b01 	strb.w	r4, [r6], #1
 8006d76:	eba6 040a 	sub.w	r4, r6, sl
 8006d7a:	42a5      	cmp	r5, r4
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	f040 8116 	bne.w	8006fb0 <_dtoa_r+0x6e0>
 8006d84:	f7f9 fa02 	bl	800018c <__adddf3>
 8006d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	460d      	mov	r5, r1
 8006d90:	f7f9 fe42 	bl	8000a18 <__aeabi_dcmpgt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 80f8 	bne.w	8006f8a <_dtoa_r+0x6ba>
 8006d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7f9 fe11 	bl	80009c8 <__aeabi_dcmpeq>
 8006da6:	b118      	cbz	r0, 8006db0 <_dtoa_r+0x4e0>
 8006da8:	f018 0f01 	tst.w	r8, #1
 8006dac:	f040 80ed 	bne.w	8006f8a <_dtoa_r+0x6ba>
 8006db0:	4649      	mov	r1, r9
 8006db2:	4658      	mov	r0, fp
 8006db4:	f000 fc92 	bl	80076dc <_Bfree>
 8006db8:	2300      	movs	r3, #0
 8006dba:	7033      	strb	r3, [r6, #0]
 8006dbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dbe:	3701      	adds	r7, #1
 8006dc0:	601f      	str	r7, [r3, #0]
 8006dc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8320 	beq.w	800740a <_dtoa_r+0xb3a>
 8006dca:	601e      	str	r6, [r3, #0]
 8006dcc:	e31d      	b.n	800740a <_dtoa_r+0xb3a>
 8006dce:	07e2      	lsls	r2, r4, #31
 8006dd0:	d505      	bpl.n	8006dde <_dtoa_r+0x50e>
 8006dd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dd6:	f7f9 fb8f 	bl	80004f8 <__aeabi_dmul>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	3601      	adds	r6, #1
 8006dde:	1064      	asrs	r4, r4, #1
 8006de0:	3508      	adds	r5, #8
 8006de2:	e73f      	b.n	8006c64 <_dtoa_r+0x394>
 8006de4:	2602      	movs	r6, #2
 8006de6:	e742      	b.n	8006c6e <_dtoa_r+0x39e>
 8006de8:	9c07      	ldr	r4, [sp, #28]
 8006dea:	9704      	str	r7, [sp, #16]
 8006dec:	e761      	b.n	8006cb2 <_dtoa_r+0x3e2>
 8006dee:	bf00      	nop
 8006df0:	080099c0 	.word	0x080099c0
 8006df4:	08009998 	.word	0x08009998
 8006df8:	3ff00000 	.word	0x3ff00000
 8006dfc:	40240000 	.word	0x40240000
 8006e00:	401c0000 	.word	0x401c0000
 8006e04:	40140000 	.word	0x40140000
 8006e08:	4b70      	ldr	r3, [pc, #448]	@ (8006fcc <_dtoa_r+0x6fc>)
 8006e0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e14:	4454      	add	r4, sl
 8006e16:	2900      	cmp	r1, #0
 8006e18:	d045      	beq.n	8006ea6 <_dtoa_r+0x5d6>
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	496c      	ldr	r1, [pc, #432]	@ (8006fd0 <_dtoa_r+0x700>)
 8006e1e:	f7f9 fc95 	bl	800074c <__aeabi_ddiv>
 8006e22:	4633      	mov	r3, r6
 8006e24:	462a      	mov	r2, r5
 8006e26:	f7f9 f9af 	bl	8000188 <__aeabi_dsub>
 8006e2a:	4656      	mov	r6, sl
 8006e2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e34:	f7f9 fe10 	bl	8000a58 <__aeabi_d2iz>
 8006e38:	4605      	mov	r5, r0
 8006e3a:	f7f9 faf3 	bl	8000424 <__aeabi_i2d>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e46:	f7f9 f99f 	bl	8000188 <__aeabi_dsub>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	3530      	adds	r5, #48	@ 0x30
 8006e50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e58:	f806 5b01 	strb.w	r5, [r6], #1
 8006e5c:	f7f9 fdbe 	bl	80009dc <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d163      	bne.n	8006f2c <_dtoa_r+0x65c>
 8006e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	495a      	ldr	r1, [pc, #360]	@ (8006fd4 <_dtoa_r+0x704>)
 8006e6c:	f7f9 f98c 	bl	8000188 <__aeabi_dsub>
 8006e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e74:	f7f9 fdb2 	bl	80009dc <__aeabi_dcmplt>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f040 8087 	bne.w	8006f8c <_dtoa_r+0x6bc>
 8006e7e:	42a6      	cmp	r6, r4
 8006e80:	f43f af43 	beq.w	8006d0a <_dtoa_r+0x43a>
 8006e84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4b53      	ldr	r3, [pc, #332]	@ (8006fd8 <_dtoa_r+0x708>)
 8006e8c:	f7f9 fb34 	bl	80004f8 <__aeabi_dmul>
 8006e90:	2200      	movs	r2, #0
 8006e92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd8 <_dtoa_r+0x708>)
 8006e9c:	f7f9 fb2c 	bl	80004f8 <__aeabi_dmul>
 8006ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea4:	e7c4      	b.n	8006e30 <_dtoa_r+0x560>
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7f9 fb25 	bl	80004f8 <__aeabi_dmul>
 8006eae:	4656      	mov	r6, sl
 8006eb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006eb4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eba:	f7f9 fdcd 	bl	8000a58 <__aeabi_d2iz>
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	f7f9 fab0 	bl	8000424 <__aeabi_i2d>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ecc:	f7f9 f95c 	bl	8000188 <__aeabi_dsub>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	3530      	adds	r5, #48	@ 0x30
 8006ed6:	f806 5b01 	strb.w	r5, [r6], #1
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	d124      	bne.n	8006f30 <_dtoa_r+0x660>
 8006ee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006eea:	4b39      	ldr	r3, [pc, #228]	@ (8006fd0 <_dtoa_r+0x700>)
 8006eec:	f7f9 f94e 	bl	800018c <__adddf3>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef8:	f7f9 fd8e 	bl	8000a18 <__aeabi_dcmpgt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d145      	bne.n	8006f8c <_dtoa_r+0x6bc>
 8006f00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f04:	2000      	movs	r0, #0
 8006f06:	4932      	ldr	r1, [pc, #200]	@ (8006fd0 <_dtoa_r+0x700>)
 8006f08:	f7f9 f93e 	bl	8000188 <__aeabi_dsub>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f14:	f7f9 fd62 	bl	80009dc <__aeabi_dcmplt>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f43f aef6 	beq.w	8006d0a <_dtoa_r+0x43a>
 8006f1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f20:	1e73      	subs	r3, r6, #1
 8006f22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f28:	2b30      	cmp	r3, #48	@ 0x30
 8006f2a:	d0f8      	beq.n	8006f1e <_dtoa_r+0x64e>
 8006f2c:	9f04      	ldr	r7, [sp, #16]
 8006f2e:	e73f      	b.n	8006db0 <_dtoa_r+0x4e0>
 8006f30:	4b29      	ldr	r3, [pc, #164]	@ (8006fd8 <_dtoa_r+0x708>)
 8006f32:	f7f9 fae1 	bl	80004f8 <__aeabi_dmul>
 8006f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f3a:	e7bc      	b.n	8006eb6 <_dtoa_r+0x5e6>
 8006f3c:	d10c      	bne.n	8006f58 <_dtoa_r+0x688>
 8006f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f42:	2200      	movs	r2, #0
 8006f44:	4b25      	ldr	r3, [pc, #148]	@ (8006fdc <_dtoa_r+0x70c>)
 8006f46:	f7f9 fad7 	bl	80004f8 <__aeabi_dmul>
 8006f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f4e:	f7f9 fd59 	bl	8000a04 <__aeabi_dcmpge>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	f000 815b 	beq.w	800720e <_dtoa_r+0x93e>
 8006f58:	2400      	movs	r4, #0
 8006f5a:	4625      	mov	r5, r4
 8006f5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f5e:	4656      	mov	r6, sl
 8006f60:	43db      	mvns	r3, r3
 8006f62:	9304      	str	r3, [sp, #16]
 8006f64:	2700      	movs	r7, #0
 8006f66:	4621      	mov	r1, r4
 8006f68:	4658      	mov	r0, fp
 8006f6a:	f000 fbb7 	bl	80076dc <_Bfree>
 8006f6e:	2d00      	cmp	r5, #0
 8006f70:	d0dc      	beq.n	8006f2c <_dtoa_r+0x65c>
 8006f72:	b12f      	cbz	r7, 8006f80 <_dtoa_r+0x6b0>
 8006f74:	42af      	cmp	r7, r5
 8006f76:	d003      	beq.n	8006f80 <_dtoa_r+0x6b0>
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fbae 	bl	80076dc <_Bfree>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4658      	mov	r0, fp
 8006f84:	f000 fbaa 	bl	80076dc <_Bfree>
 8006f88:	e7d0      	b.n	8006f2c <_dtoa_r+0x65c>
 8006f8a:	9704      	str	r7, [sp, #16]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	461e      	mov	r6, r3
 8006f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f94:	2a39      	cmp	r2, #57	@ 0x39
 8006f96:	d107      	bne.n	8006fa8 <_dtoa_r+0x6d8>
 8006f98:	459a      	cmp	sl, r3
 8006f9a:	d1f8      	bne.n	8006f8e <_dtoa_r+0x6be>
 8006f9c:	9a04      	ldr	r2, [sp, #16]
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	9204      	str	r2, [sp, #16]
 8006fa2:	2230      	movs	r2, #48	@ 0x30
 8006fa4:	f88a 2000 	strb.w	r2, [sl]
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	3201      	adds	r2, #1
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	e7bd      	b.n	8006f2c <_dtoa_r+0x65c>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <_dtoa_r+0x708>)
 8006fb4:	f7f9 faa0 	bl	80004f8 <__aeabi_dmul>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	460d      	mov	r5, r1
 8006fc0:	f7f9 fd02 	bl	80009c8 <__aeabi_dcmpeq>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f43f aebc 	beq.w	8006d42 <_dtoa_r+0x472>
 8006fca:	e6f1      	b.n	8006db0 <_dtoa_r+0x4e0>
 8006fcc:	080099c0 	.word	0x080099c0
 8006fd0:	3fe00000 	.word	0x3fe00000
 8006fd4:	3ff00000 	.word	0x3ff00000
 8006fd8:	40240000 	.word	0x40240000
 8006fdc:	40140000 	.word	0x40140000
 8006fe0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	f000 80db 	beq.w	800719e <_dtoa_r+0x8ce>
 8006fe8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fea:	2a01      	cmp	r2, #1
 8006fec:	f300 80bf 	bgt.w	800716e <_dtoa_r+0x89e>
 8006ff0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	f000 80b7 	beq.w	8007166 <_dtoa_r+0x896>
 8006ff8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ffc:	4646      	mov	r6, r8
 8006ffe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007000:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007002:	2101      	movs	r1, #1
 8007004:	441a      	add	r2, r3
 8007006:	4658      	mov	r0, fp
 8007008:	4498      	add	r8, r3
 800700a:	9209      	str	r2, [sp, #36]	@ 0x24
 800700c:	f000 fc1a 	bl	8007844 <__i2b>
 8007010:	4605      	mov	r5, r0
 8007012:	b15e      	cbz	r6, 800702c <_dtoa_r+0x75c>
 8007014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	dd08      	ble.n	800702c <_dtoa_r+0x75c>
 800701a:	42b3      	cmp	r3, r6
 800701c:	bfa8      	it	ge
 800701e:	4633      	movge	r3, r6
 8007020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007022:	eba8 0803 	sub.w	r8, r8, r3
 8007026:	1af6      	subs	r6, r6, r3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	9309      	str	r3, [sp, #36]	@ 0x24
 800702c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800702e:	b1f3      	cbz	r3, 800706e <_dtoa_r+0x79e>
 8007030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80b7 	beq.w	80071a6 <_dtoa_r+0x8d6>
 8007038:	b18c      	cbz	r4, 800705e <_dtoa_r+0x78e>
 800703a:	4629      	mov	r1, r5
 800703c:	4622      	mov	r2, r4
 800703e:	4658      	mov	r0, fp
 8007040:	f000 fcbe 	bl	80079c0 <__pow5mult>
 8007044:	464a      	mov	r2, r9
 8007046:	4601      	mov	r1, r0
 8007048:	4605      	mov	r5, r0
 800704a:	4658      	mov	r0, fp
 800704c:	f000 fc10 	bl	8007870 <__multiply>
 8007050:	4649      	mov	r1, r9
 8007052:	9004      	str	r0, [sp, #16]
 8007054:	4658      	mov	r0, fp
 8007056:	f000 fb41 	bl	80076dc <_Bfree>
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	4699      	mov	r9, r3
 800705e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007060:	1b1a      	subs	r2, r3, r4
 8007062:	d004      	beq.n	800706e <_dtoa_r+0x79e>
 8007064:	4649      	mov	r1, r9
 8007066:	4658      	mov	r0, fp
 8007068:	f000 fcaa 	bl	80079c0 <__pow5mult>
 800706c:	4681      	mov	r9, r0
 800706e:	2101      	movs	r1, #1
 8007070:	4658      	mov	r0, fp
 8007072:	f000 fbe7 	bl	8007844 <__i2b>
 8007076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007078:	4604      	mov	r4, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 81c9 	beq.w	8007412 <_dtoa_r+0xb42>
 8007080:	461a      	mov	r2, r3
 8007082:	4601      	mov	r1, r0
 8007084:	4658      	mov	r0, fp
 8007086:	f000 fc9b 	bl	80079c0 <__pow5mult>
 800708a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800708c:	4604      	mov	r4, r0
 800708e:	2b01      	cmp	r3, #1
 8007090:	f300 808f 	bgt.w	80071b2 <_dtoa_r+0x8e2>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 8087 	bne.w	80071aa <_dtoa_r+0x8da>
 800709c:	9b03      	ldr	r3, [sp, #12]
 800709e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 8083 	bne.w	80071ae <_dtoa_r+0x8de>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070ae:	0d1b      	lsrs	r3, r3, #20
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	b12b      	cbz	r3, 80070c0 <_dtoa_r+0x7f0>
 80070b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b6:	f108 0801 	add.w	r8, r8, #1
 80070ba:	3301      	adds	r3, #1
 80070bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070be:	2301      	movs	r3, #1
 80070c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 81aa 	beq.w	800741e <_dtoa_r+0xb4e>
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070d0:	6918      	ldr	r0, [r3, #16]
 80070d2:	f000 fb6b 	bl	80077ac <__hi0bits>
 80070d6:	f1c0 0020 	rsb	r0, r0, #32
 80070da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070dc:	4418      	add	r0, r3
 80070de:	f010 001f 	ands.w	r0, r0, #31
 80070e2:	d071      	beq.n	80071c8 <_dtoa_r+0x8f8>
 80070e4:	f1c0 0320 	rsb	r3, r0, #32
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	dd65      	ble.n	80071b8 <_dtoa_r+0x8e8>
 80070ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ee:	f1c0 001c 	rsb	r0, r0, #28
 80070f2:	4403      	add	r3, r0
 80070f4:	4480      	add	r8, r0
 80070f6:	4406      	add	r6, r0
 80070f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80070fa:	f1b8 0f00 	cmp.w	r8, #0
 80070fe:	dd05      	ble.n	800710c <_dtoa_r+0x83c>
 8007100:	4649      	mov	r1, r9
 8007102:	4642      	mov	r2, r8
 8007104:	4658      	mov	r0, fp
 8007106:	f000 fcb5 	bl	8007a74 <__lshift>
 800710a:	4681      	mov	r9, r0
 800710c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	dd05      	ble.n	800711e <_dtoa_r+0x84e>
 8007112:	4621      	mov	r1, r4
 8007114:	461a      	mov	r2, r3
 8007116:	4658      	mov	r0, fp
 8007118:	f000 fcac 	bl	8007a74 <__lshift>
 800711c:	4604      	mov	r4, r0
 800711e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d053      	beq.n	80071cc <_dtoa_r+0x8fc>
 8007124:	4621      	mov	r1, r4
 8007126:	4648      	mov	r0, r9
 8007128:	f000 fd10 	bl	8007b4c <__mcmp>
 800712c:	2800      	cmp	r0, #0
 800712e:	da4d      	bge.n	80071cc <_dtoa_r+0x8fc>
 8007130:	1e7b      	subs	r3, r7, #1
 8007132:	4649      	mov	r1, r9
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	220a      	movs	r2, #10
 8007138:	2300      	movs	r3, #0
 800713a:	4658      	mov	r0, fp
 800713c:	f000 faf0 	bl	8007720 <__multadd>
 8007140:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007142:	4681      	mov	r9, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 816c 	beq.w	8007422 <_dtoa_r+0xb52>
 800714a:	2300      	movs	r3, #0
 800714c:	4629      	mov	r1, r5
 800714e:	220a      	movs	r2, #10
 8007150:	4658      	mov	r0, fp
 8007152:	f000 fae5 	bl	8007720 <__multadd>
 8007156:	9b08      	ldr	r3, [sp, #32]
 8007158:	4605      	mov	r5, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	dc61      	bgt.n	8007222 <_dtoa_r+0x952>
 800715e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007160:	2b02      	cmp	r3, #2
 8007162:	dc3b      	bgt.n	80071dc <_dtoa_r+0x90c>
 8007164:	e05d      	b.n	8007222 <_dtoa_r+0x952>
 8007166:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007168:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800716c:	e746      	b.n	8006ffc <_dtoa_r+0x72c>
 800716e:	9b07      	ldr	r3, [sp, #28]
 8007170:	1e5c      	subs	r4, r3, #1
 8007172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007174:	42a3      	cmp	r3, r4
 8007176:	bfbf      	itttt	lt
 8007178:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800717a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800717c:	1ae3      	sublt	r3, r4, r3
 800717e:	18d2      	addlt	r2, r2, r3
 8007180:	bfa8      	it	ge
 8007182:	1b1c      	subge	r4, r3, r4
 8007184:	9b07      	ldr	r3, [sp, #28]
 8007186:	bfbe      	ittt	lt
 8007188:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800718a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800718c:	2400      	movlt	r4, #0
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb5      	itete	lt
 8007192:	eba8 0603 	sublt.w	r6, r8, r3
 8007196:	4646      	movge	r6, r8
 8007198:	2300      	movlt	r3, #0
 800719a:	9b07      	ldrge	r3, [sp, #28]
 800719c:	e730      	b.n	8007000 <_dtoa_r+0x730>
 800719e:	4646      	mov	r6, r8
 80071a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80071a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80071a4:	e735      	b.n	8007012 <_dtoa_r+0x742>
 80071a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a8:	e75c      	b.n	8007064 <_dtoa_r+0x794>
 80071aa:	2300      	movs	r3, #0
 80071ac:	e788      	b.n	80070c0 <_dtoa_r+0x7f0>
 80071ae:	9b02      	ldr	r3, [sp, #8]
 80071b0:	e786      	b.n	80070c0 <_dtoa_r+0x7f0>
 80071b2:	2300      	movs	r3, #0
 80071b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b6:	e788      	b.n	80070ca <_dtoa_r+0x7fa>
 80071b8:	d09f      	beq.n	80070fa <_dtoa_r+0x82a>
 80071ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071bc:	331c      	adds	r3, #28
 80071be:	441a      	add	r2, r3
 80071c0:	4498      	add	r8, r3
 80071c2:	441e      	add	r6, r3
 80071c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80071c6:	e798      	b.n	80070fa <_dtoa_r+0x82a>
 80071c8:	4603      	mov	r3, r0
 80071ca:	e7f6      	b.n	80071ba <_dtoa_r+0x8ea>
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	9704      	str	r7, [sp, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dc20      	bgt.n	8007216 <_dtoa_r+0x946>
 80071d4:	9308      	str	r3, [sp, #32]
 80071d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071d8:	2b02      	cmp	r3, #2
 80071da:	dd1e      	ble.n	800721a <_dtoa_r+0x94a>
 80071dc:	9b08      	ldr	r3, [sp, #32]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f47f aebc 	bne.w	8006f5c <_dtoa_r+0x68c>
 80071e4:	4621      	mov	r1, r4
 80071e6:	2205      	movs	r2, #5
 80071e8:	4658      	mov	r0, fp
 80071ea:	f000 fa99 	bl	8007720 <__multadd>
 80071ee:	4601      	mov	r1, r0
 80071f0:	4604      	mov	r4, r0
 80071f2:	4648      	mov	r0, r9
 80071f4:	f000 fcaa 	bl	8007b4c <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f77f aeaf 	ble.w	8006f5c <_dtoa_r+0x68c>
 80071fe:	2331      	movs	r3, #49	@ 0x31
 8007200:	4656      	mov	r6, sl
 8007202:	f806 3b01 	strb.w	r3, [r6], #1
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	3301      	adds	r3, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	e6aa      	b.n	8006f64 <_dtoa_r+0x694>
 800720e:	9c07      	ldr	r4, [sp, #28]
 8007210:	9704      	str	r7, [sp, #16]
 8007212:	4625      	mov	r5, r4
 8007214:	e7f3      	b.n	80071fe <_dtoa_r+0x92e>
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	9308      	str	r3, [sp, #32]
 800721a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 8104 	beq.w	800742a <_dtoa_r+0xb5a>
 8007222:	2e00      	cmp	r6, #0
 8007224:	dd05      	ble.n	8007232 <_dtoa_r+0x962>
 8007226:	4629      	mov	r1, r5
 8007228:	4632      	mov	r2, r6
 800722a:	4658      	mov	r0, fp
 800722c:	f000 fc22 	bl	8007a74 <__lshift>
 8007230:	4605      	mov	r5, r0
 8007232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007234:	2b00      	cmp	r3, #0
 8007236:	d05a      	beq.n	80072ee <_dtoa_r+0xa1e>
 8007238:	4658      	mov	r0, fp
 800723a:	6869      	ldr	r1, [r5, #4]
 800723c:	f000 fa0e 	bl	800765c <_Balloc>
 8007240:	4606      	mov	r6, r0
 8007242:	b928      	cbnz	r0, 8007250 <_dtoa_r+0x980>
 8007244:	4602      	mov	r2, r0
 8007246:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800724a:	4b83      	ldr	r3, [pc, #524]	@ (8007458 <_dtoa_r+0xb88>)
 800724c:	f7ff bb54 	b.w	80068f8 <_dtoa_r+0x28>
 8007250:	692a      	ldr	r2, [r5, #16]
 8007252:	f105 010c 	add.w	r1, r5, #12
 8007256:	3202      	adds	r2, #2
 8007258:	0092      	lsls	r2, r2, #2
 800725a:	300c      	adds	r0, #12
 800725c:	f7ff fa9f 	bl	800679e <memcpy>
 8007260:	2201      	movs	r2, #1
 8007262:	4631      	mov	r1, r6
 8007264:	4658      	mov	r0, fp
 8007266:	f000 fc05 	bl	8007a74 <__lshift>
 800726a:	462f      	mov	r7, r5
 800726c:	4605      	mov	r5, r0
 800726e:	f10a 0301 	add.w	r3, sl, #1
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	9b08      	ldr	r3, [sp, #32]
 8007276:	4453      	add	r3, sl
 8007278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800727a:	9b02      	ldr	r3, [sp, #8]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	930a      	str	r3, [sp, #40]	@ 0x28
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	4621      	mov	r1, r4
 8007286:	3b01      	subs	r3, #1
 8007288:	4648      	mov	r0, r9
 800728a:	9302      	str	r3, [sp, #8]
 800728c:	f7ff fa95 	bl	80067ba <quorem>
 8007290:	4639      	mov	r1, r7
 8007292:	9008      	str	r0, [sp, #32]
 8007294:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007298:	4648      	mov	r0, r9
 800729a:	f000 fc57 	bl	8007b4c <__mcmp>
 800729e:	462a      	mov	r2, r5
 80072a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80072a2:	4621      	mov	r1, r4
 80072a4:	4658      	mov	r0, fp
 80072a6:	f000 fc6d 	bl	8007b84 <__mdiff>
 80072aa:	68c2      	ldr	r2, [r0, #12]
 80072ac:	4606      	mov	r6, r0
 80072ae:	bb02      	cbnz	r2, 80072f2 <_dtoa_r+0xa22>
 80072b0:	4601      	mov	r1, r0
 80072b2:	4648      	mov	r0, r9
 80072b4:	f000 fc4a 	bl	8007b4c <__mcmp>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4631      	mov	r1, r6
 80072bc:	4658      	mov	r0, fp
 80072be:	920c      	str	r2, [sp, #48]	@ 0x30
 80072c0:	f000 fa0c 	bl	80076dc <_Bfree>
 80072c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072c8:	9e07      	ldr	r6, [sp, #28]
 80072ca:	ea43 0102 	orr.w	r1, r3, r2
 80072ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072d0:	4319      	orrs	r1, r3
 80072d2:	d110      	bne.n	80072f6 <_dtoa_r+0xa26>
 80072d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072d8:	d029      	beq.n	800732e <_dtoa_r+0xa5e>
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dd02      	ble.n	80072e6 <_dtoa_r+0xa16>
 80072e0:	9b08      	ldr	r3, [sp, #32]
 80072e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072e6:	9b02      	ldr	r3, [sp, #8]
 80072e8:	f883 8000 	strb.w	r8, [r3]
 80072ec:	e63b      	b.n	8006f66 <_dtoa_r+0x696>
 80072ee:	4628      	mov	r0, r5
 80072f0:	e7bb      	b.n	800726a <_dtoa_r+0x99a>
 80072f2:	2201      	movs	r2, #1
 80072f4:	e7e1      	b.n	80072ba <_dtoa_r+0x9ea>
 80072f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db04      	blt.n	8007306 <_dtoa_r+0xa36>
 80072fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80072fe:	430b      	orrs	r3, r1
 8007300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007302:	430b      	orrs	r3, r1
 8007304:	d120      	bne.n	8007348 <_dtoa_r+0xa78>
 8007306:	2a00      	cmp	r2, #0
 8007308:	dded      	ble.n	80072e6 <_dtoa_r+0xa16>
 800730a:	4649      	mov	r1, r9
 800730c:	2201      	movs	r2, #1
 800730e:	4658      	mov	r0, fp
 8007310:	f000 fbb0 	bl	8007a74 <__lshift>
 8007314:	4621      	mov	r1, r4
 8007316:	4681      	mov	r9, r0
 8007318:	f000 fc18 	bl	8007b4c <__mcmp>
 800731c:	2800      	cmp	r0, #0
 800731e:	dc03      	bgt.n	8007328 <_dtoa_r+0xa58>
 8007320:	d1e1      	bne.n	80072e6 <_dtoa_r+0xa16>
 8007322:	f018 0f01 	tst.w	r8, #1
 8007326:	d0de      	beq.n	80072e6 <_dtoa_r+0xa16>
 8007328:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800732c:	d1d8      	bne.n	80072e0 <_dtoa_r+0xa10>
 800732e:	2339      	movs	r3, #57	@ 0x39
 8007330:	9a02      	ldr	r2, [sp, #8]
 8007332:	7013      	strb	r3, [r2, #0]
 8007334:	4633      	mov	r3, r6
 8007336:	461e      	mov	r6, r3
 8007338:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800733c:	3b01      	subs	r3, #1
 800733e:	2a39      	cmp	r2, #57	@ 0x39
 8007340:	d052      	beq.n	80073e8 <_dtoa_r+0xb18>
 8007342:	3201      	adds	r2, #1
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	e60e      	b.n	8006f66 <_dtoa_r+0x696>
 8007348:	2a00      	cmp	r2, #0
 800734a:	dd07      	ble.n	800735c <_dtoa_r+0xa8c>
 800734c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007350:	d0ed      	beq.n	800732e <_dtoa_r+0xa5e>
 8007352:	9a02      	ldr	r2, [sp, #8]
 8007354:	f108 0301 	add.w	r3, r8, #1
 8007358:	7013      	strb	r3, [r2, #0]
 800735a:	e604      	b.n	8006f66 <_dtoa_r+0x696>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	9a07      	ldr	r2, [sp, #28]
 8007360:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007366:	4293      	cmp	r3, r2
 8007368:	d028      	beq.n	80073bc <_dtoa_r+0xaec>
 800736a:	4649      	mov	r1, r9
 800736c:	2300      	movs	r3, #0
 800736e:	220a      	movs	r2, #10
 8007370:	4658      	mov	r0, fp
 8007372:	f000 f9d5 	bl	8007720 <__multadd>
 8007376:	42af      	cmp	r7, r5
 8007378:	4681      	mov	r9, r0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	f04f 020a 	mov.w	r2, #10
 8007382:	4639      	mov	r1, r7
 8007384:	4658      	mov	r0, fp
 8007386:	d107      	bne.n	8007398 <_dtoa_r+0xac8>
 8007388:	f000 f9ca 	bl	8007720 <__multadd>
 800738c:	4607      	mov	r7, r0
 800738e:	4605      	mov	r5, r0
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	3301      	adds	r3, #1
 8007394:	9307      	str	r3, [sp, #28]
 8007396:	e774      	b.n	8007282 <_dtoa_r+0x9b2>
 8007398:	f000 f9c2 	bl	8007720 <__multadd>
 800739c:	4629      	mov	r1, r5
 800739e:	4607      	mov	r7, r0
 80073a0:	2300      	movs	r3, #0
 80073a2:	220a      	movs	r2, #10
 80073a4:	4658      	mov	r0, fp
 80073a6:	f000 f9bb 	bl	8007720 <__multadd>
 80073aa:	4605      	mov	r5, r0
 80073ac:	e7f0      	b.n	8007390 <_dtoa_r+0xac0>
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	2700      	movs	r7, #0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfcc      	ite	gt
 80073b6:	461e      	movgt	r6, r3
 80073b8:	2601      	movle	r6, #1
 80073ba:	4456      	add	r6, sl
 80073bc:	4649      	mov	r1, r9
 80073be:	2201      	movs	r2, #1
 80073c0:	4658      	mov	r0, fp
 80073c2:	f000 fb57 	bl	8007a74 <__lshift>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4681      	mov	r9, r0
 80073ca:	f000 fbbf 	bl	8007b4c <__mcmp>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	dcb0      	bgt.n	8007334 <_dtoa_r+0xa64>
 80073d2:	d102      	bne.n	80073da <_dtoa_r+0xb0a>
 80073d4:	f018 0f01 	tst.w	r8, #1
 80073d8:	d1ac      	bne.n	8007334 <_dtoa_r+0xa64>
 80073da:	4633      	mov	r3, r6
 80073dc:	461e      	mov	r6, r3
 80073de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073e2:	2a30      	cmp	r2, #48	@ 0x30
 80073e4:	d0fa      	beq.n	80073dc <_dtoa_r+0xb0c>
 80073e6:	e5be      	b.n	8006f66 <_dtoa_r+0x696>
 80073e8:	459a      	cmp	sl, r3
 80073ea:	d1a4      	bne.n	8007336 <_dtoa_r+0xa66>
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	3301      	adds	r3, #1
 80073f0:	9304      	str	r3, [sp, #16]
 80073f2:	2331      	movs	r3, #49	@ 0x31
 80073f4:	f88a 3000 	strb.w	r3, [sl]
 80073f8:	e5b5      	b.n	8006f66 <_dtoa_r+0x696>
 80073fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800745c <_dtoa_r+0xb8c>
 8007400:	b11b      	cbz	r3, 800740a <_dtoa_r+0xb3a>
 8007402:	f10a 0308 	add.w	r3, sl, #8
 8007406:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	4650      	mov	r0, sl
 800740c:	b017      	add	sp, #92	@ 0x5c
 800740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007414:	2b01      	cmp	r3, #1
 8007416:	f77f ae3d 	ble.w	8007094 <_dtoa_r+0x7c4>
 800741a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800741c:	930a      	str	r3, [sp, #40]	@ 0x28
 800741e:	2001      	movs	r0, #1
 8007420:	e65b      	b.n	80070da <_dtoa_r+0x80a>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f77f aed6 	ble.w	80071d6 <_dtoa_r+0x906>
 800742a:	4656      	mov	r6, sl
 800742c:	4621      	mov	r1, r4
 800742e:	4648      	mov	r0, r9
 8007430:	f7ff f9c3 	bl	80067ba <quorem>
 8007434:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	f806 8b01 	strb.w	r8, [r6], #1
 800743e:	eba6 020a 	sub.w	r2, r6, sl
 8007442:	4293      	cmp	r3, r2
 8007444:	ddb3      	ble.n	80073ae <_dtoa_r+0xade>
 8007446:	4649      	mov	r1, r9
 8007448:	2300      	movs	r3, #0
 800744a:	220a      	movs	r2, #10
 800744c:	4658      	mov	r0, fp
 800744e:	f000 f967 	bl	8007720 <__multadd>
 8007452:	4681      	mov	r9, r0
 8007454:	e7ea      	b.n	800742c <_dtoa_r+0xb5c>
 8007456:	bf00      	nop
 8007458:	0800991c 	.word	0x0800991c
 800745c:	080098a0 	.word	0x080098a0

08007460 <_free_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4605      	mov	r5, r0
 8007464:	2900      	cmp	r1, #0
 8007466:	d040      	beq.n	80074ea <_free_r+0x8a>
 8007468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800746c:	1f0c      	subs	r4, r1, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfb8      	it	lt
 8007472:	18e4      	addlt	r4, r4, r3
 8007474:	f000 f8e6 	bl	8007644 <__malloc_lock>
 8007478:	4a1c      	ldr	r2, [pc, #112]	@ (80074ec <_free_r+0x8c>)
 800747a:	6813      	ldr	r3, [r2, #0]
 800747c:	b933      	cbnz	r3, 800748c <_free_r+0x2c>
 800747e:	6063      	str	r3, [r4, #4]
 8007480:	6014      	str	r4, [r2, #0]
 8007482:	4628      	mov	r0, r5
 8007484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007488:	f000 b8e2 	b.w	8007650 <__malloc_unlock>
 800748c:	42a3      	cmp	r3, r4
 800748e:	d908      	bls.n	80074a2 <_free_r+0x42>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	1821      	adds	r1, r4, r0
 8007494:	428b      	cmp	r3, r1
 8007496:	bf01      	itttt	eq
 8007498:	6819      	ldreq	r1, [r3, #0]
 800749a:	685b      	ldreq	r3, [r3, #4]
 800749c:	1809      	addeq	r1, r1, r0
 800749e:	6021      	streq	r1, [r4, #0]
 80074a0:	e7ed      	b.n	800747e <_free_r+0x1e>
 80074a2:	461a      	mov	r2, r3
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	b10b      	cbz	r3, 80074ac <_free_r+0x4c>
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	d9fa      	bls.n	80074a2 <_free_r+0x42>
 80074ac:	6811      	ldr	r1, [r2, #0]
 80074ae:	1850      	adds	r0, r2, r1
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d10b      	bne.n	80074cc <_free_r+0x6c>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	4401      	add	r1, r0
 80074b8:	1850      	adds	r0, r2, r1
 80074ba:	4283      	cmp	r3, r0
 80074bc:	6011      	str	r1, [r2, #0]
 80074be:	d1e0      	bne.n	8007482 <_free_r+0x22>
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4408      	add	r0, r1
 80074c6:	6010      	str	r0, [r2, #0]
 80074c8:	6053      	str	r3, [r2, #4]
 80074ca:	e7da      	b.n	8007482 <_free_r+0x22>
 80074cc:	d902      	bls.n	80074d4 <_free_r+0x74>
 80074ce:	230c      	movs	r3, #12
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	e7d6      	b.n	8007482 <_free_r+0x22>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	1821      	adds	r1, r4, r0
 80074d8:	428b      	cmp	r3, r1
 80074da:	bf01      	itttt	eq
 80074dc:	6819      	ldreq	r1, [r3, #0]
 80074de:	685b      	ldreq	r3, [r3, #4]
 80074e0:	1809      	addeq	r1, r1, r0
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	6063      	str	r3, [r4, #4]
 80074e6:	6054      	str	r4, [r2, #4]
 80074e8:	e7cb      	b.n	8007482 <_free_r+0x22>
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	200004e8 	.word	0x200004e8

080074f0 <malloc>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <malloc+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 b825 	b.w	8007544 <_malloc_r>
 80074fa:	bf00      	nop
 80074fc:	20000010 	.word	0x20000010

08007500 <sbrk_aligned>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4e0f      	ldr	r6, [pc, #60]	@ (8007540 <sbrk_aligned+0x40>)
 8007504:	460c      	mov	r4, r1
 8007506:	6831      	ldr	r1, [r6, #0]
 8007508:	4605      	mov	r5, r0
 800750a:	b911      	cbnz	r1, 8007512 <sbrk_aligned+0x12>
 800750c:	f001 f814 	bl	8008538 <_sbrk_r>
 8007510:	6030      	str	r0, [r6, #0]
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f001 f80f 	bl	8008538 <_sbrk_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d103      	bne.n	8007526 <sbrk_aligned+0x26>
 800751e:	f04f 34ff 	mov.w	r4, #4294967295
 8007522:	4620      	mov	r0, r4
 8007524:	bd70      	pop	{r4, r5, r6, pc}
 8007526:	1cc4      	adds	r4, r0, #3
 8007528:	f024 0403 	bic.w	r4, r4, #3
 800752c:	42a0      	cmp	r0, r4
 800752e:	d0f8      	beq.n	8007522 <sbrk_aligned+0x22>
 8007530:	1a21      	subs	r1, r4, r0
 8007532:	4628      	mov	r0, r5
 8007534:	f001 f800 	bl	8008538 <_sbrk_r>
 8007538:	3001      	adds	r0, #1
 800753a:	d1f2      	bne.n	8007522 <sbrk_aligned+0x22>
 800753c:	e7ef      	b.n	800751e <sbrk_aligned+0x1e>
 800753e:	bf00      	nop
 8007540:	200004e4 	.word	0x200004e4

08007544 <_malloc_r>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	1ccd      	adds	r5, r1, #3
 800754a:	f025 0503 	bic.w	r5, r5, #3
 800754e:	3508      	adds	r5, #8
 8007550:	2d0c      	cmp	r5, #12
 8007552:	bf38      	it	cc
 8007554:	250c      	movcc	r5, #12
 8007556:	2d00      	cmp	r5, #0
 8007558:	4606      	mov	r6, r0
 800755a:	db01      	blt.n	8007560 <_malloc_r+0x1c>
 800755c:	42a9      	cmp	r1, r5
 800755e:	d904      	bls.n	800756a <_malloc_r+0x26>
 8007560:	230c      	movs	r3, #12
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	2000      	movs	r0, #0
 8007566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007640 <_malloc_r+0xfc>
 800756e:	f000 f869 	bl	8007644 <__malloc_lock>
 8007572:	f8d8 3000 	ldr.w	r3, [r8]
 8007576:	461c      	mov	r4, r3
 8007578:	bb44      	cbnz	r4, 80075cc <_malloc_r+0x88>
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff ffbf 	bl	8007500 <sbrk_aligned>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	4604      	mov	r4, r0
 8007586:	d158      	bne.n	800763a <_malloc_r+0xf6>
 8007588:	f8d8 4000 	ldr.w	r4, [r8]
 800758c:	4627      	mov	r7, r4
 800758e:	2f00      	cmp	r7, #0
 8007590:	d143      	bne.n	800761a <_malloc_r+0xd6>
 8007592:	2c00      	cmp	r4, #0
 8007594:	d04b      	beq.n	800762e <_malloc_r+0xea>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	eb04 0903 	add.w	r9, r4, r3
 80075a0:	f000 ffca 	bl	8008538 <_sbrk_r>
 80075a4:	4581      	cmp	r9, r0
 80075a6:	d142      	bne.n	800762e <_malloc_r+0xea>
 80075a8:	6821      	ldr	r1, [r4, #0]
 80075aa:	4630      	mov	r0, r6
 80075ac:	1a6d      	subs	r5, r5, r1
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7ff ffa6 	bl	8007500 <sbrk_aligned>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d03a      	beq.n	800762e <_malloc_r+0xea>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	442b      	add	r3, r5
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	f8d8 3000 	ldr.w	r3, [r8]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	bb62      	cbnz	r2, 8007620 <_malloc_r+0xdc>
 80075c6:	f8c8 7000 	str.w	r7, [r8]
 80075ca:	e00f      	b.n	80075ec <_malloc_r+0xa8>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	1b52      	subs	r2, r2, r5
 80075d0:	d420      	bmi.n	8007614 <_malloc_r+0xd0>
 80075d2:	2a0b      	cmp	r2, #11
 80075d4:	d917      	bls.n	8007606 <_malloc_r+0xc2>
 80075d6:	1961      	adds	r1, r4, r5
 80075d8:	42a3      	cmp	r3, r4
 80075da:	6025      	str	r5, [r4, #0]
 80075dc:	bf18      	it	ne
 80075de:	6059      	strne	r1, [r3, #4]
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	bf08      	it	eq
 80075e4:	f8c8 1000 	streq.w	r1, [r8]
 80075e8:	5162      	str	r2, [r4, r5]
 80075ea:	604b      	str	r3, [r1, #4]
 80075ec:	4630      	mov	r0, r6
 80075ee:	f000 f82f 	bl	8007650 <__malloc_unlock>
 80075f2:	f104 000b 	add.w	r0, r4, #11
 80075f6:	1d23      	adds	r3, r4, #4
 80075f8:	f020 0007 	bic.w	r0, r0, #7
 80075fc:	1ac2      	subs	r2, r0, r3
 80075fe:	bf1c      	itt	ne
 8007600:	1a1b      	subne	r3, r3, r0
 8007602:	50a3      	strne	r3, [r4, r2]
 8007604:	e7af      	b.n	8007566 <_malloc_r+0x22>
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	42a3      	cmp	r3, r4
 800760a:	bf0c      	ite	eq
 800760c:	f8c8 2000 	streq.w	r2, [r8]
 8007610:	605a      	strne	r2, [r3, #4]
 8007612:	e7eb      	b.n	80075ec <_malloc_r+0xa8>
 8007614:	4623      	mov	r3, r4
 8007616:	6864      	ldr	r4, [r4, #4]
 8007618:	e7ae      	b.n	8007578 <_malloc_r+0x34>
 800761a:	463c      	mov	r4, r7
 800761c:	687f      	ldr	r7, [r7, #4]
 800761e:	e7b6      	b.n	800758e <_malloc_r+0x4a>
 8007620:	461a      	mov	r2, r3
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	42a3      	cmp	r3, r4
 8007626:	d1fb      	bne.n	8007620 <_malloc_r+0xdc>
 8007628:	2300      	movs	r3, #0
 800762a:	6053      	str	r3, [r2, #4]
 800762c:	e7de      	b.n	80075ec <_malloc_r+0xa8>
 800762e:	230c      	movs	r3, #12
 8007630:	4630      	mov	r0, r6
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	f000 f80c 	bl	8007650 <__malloc_unlock>
 8007638:	e794      	b.n	8007564 <_malloc_r+0x20>
 800763a:	6005      	str	r5, [r0, #0]
 800763c:	e7d6      	b.n	80075ec <_malloc_r+0xa8>
 800763e:	bf00      	nop
 8007640:	200004e8 	.word	0x200004e8

08007644 <__malloc_lock>:
 8007644:	4801      	ldr	r0, [pc, #4]	@ (800764c <__malloc_lock+0x8>)
 8007646:	f7ff b892 	b.w	800676e <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	200004e0 	.word	0x200004e0

08007650 <__malloc_unlock>:
 8007650:	4801      	ldr	r0, [pc, #4]	@ (8007658 <__malloc_unlock+0x8>)
 8007652:	f7ff b88d 	b.w	8006770 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	200004e0 	.word	0x200004e0

0800765c <_Balloc>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	69c6      	ldr	r6, [r0, #28]
 8007660:	4604      	mov	r4, r0
 8007662:	460d      	mov	r5, r1
 8007664:	b976      	cbnz	r6, 8007684 <_Balloc+0x28>
 8007666:	2010      	movs	r0, #16
 8007668:	f7ff ff42 	bl	80074f0 <malloc>
 800766c:	4602      	mov	r2, r0
 800766e:	61e0      	str	r0, [r4, #28]
 8007670:	b920      	cbnz	r0, 800767c <_Balloc+0x20>
 8007672:	216b      	movs	r1, #107	@ 0x6b
 8007674:	4b17      	ldr	r3, [pc, #92]	@ (80076d4 <_Balloc+0x78>)
 8007676:	4818      	ldr	r0, [pc, #96]	@ (80076d8 <_Balloc+0x7c>)
 8007678:	f000 ff6e 	bl	8008558 <__assert_func>
 800767c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007680:	6006      	str	r6, [r0, #0]
 8007682:	60c6      	str	r6, [r0, #12]
 8007684:	69e6      	ldr	r6, [r4, #28]
 8007686:	68f3      	ldr	r3, [r6, #12]
 8007688:	b183      	cbz	r3, 80076ac <_Balloc+0x50>
 800768a:	69e3      	ldr	r3, [r4, #28]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007692:	b9b8      	cbnz	r0, 80076c4 <_Balloc+0x68>
 8007694:	2101      	movs	r1, #1
 8007696:	fa01 f605 	lsl.w	r6, r1, r5
 800769a:	1d72      	adds	r2, r6, #5
 800769c:	4620      	mov	r0, r4
 800769e:	0092      	lsls	r2, r2, #2
 80076a0:	f000 ff78 	bl	8008594 <_calloc_r>
 80076a4:	b160      	cbz	r0, 80076c0 <_Balloc+0x64>
 80076a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076aa:	e00e      	b.n	80076ca <_Balloc+0x6e>
 80076ac:	2221      	movs	r2, #33	@ 0x21
 80076ae:	2104      	movs	r1, #4
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 ff6f 	bl	8008594 <_calloc_r>
 80076b6:	69e3      	ldr	r3, [r4, #28]
 80076b8:	60f0      	str	r0, [r6, #12]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e4      	bne.n	800768a <_Balloc+0x2e>
 80076c0:	2000      	movs	r0, #0
 80076c2:	bd70      	pop	{r4, r5, r6, pc}
 80076c4:	6802      	ldr	r2, [r0, #0]
 80076c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076ca:	2300      	movs	r3, #0
 80076cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076d0:	e7f7      	b.n	80076c2 <_Balloc+0x66>
 80076d2:	bf00      	nop
 80076d4:	080098ad 	.word	0x080098ad
 80076d8:	0800992d 	.word	0x0800992d

080076dc <_Bfree>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	69c6      	ldr	r6, [r0, #28]
 80076e0:	4605      	mov	r5, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	b976      	cbnz	r6, 8007704 <_Bfree+0x28>
 80076e6:	2010      	movs	r0, #16
 80076e8:	f7ff ff02 	bl	80074f0 <malloc>
 80076ec:	4602      	mov	r2, r0
 80076ee:	61e8      	str	r0, [r5, #28]
 80076f0:	b920      	cbnz	r0, 80076fc <_Bfree+0x20>
 80076f2:	218f      	movs	r1, #143	@ 0x8f
 80076f4:	4b08      	ldr	r3, [pc, #32]	@ (8007718 <_Bfree+0x3c>)
 80076f6:	4809      	ldr	r0, [pc, #36]	@ (800771c <_Bfree+0x40>)
 80076f8:	f000 ff2e 	bl	8008558 <__assert_func>
 80076fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007700:	6006      	str	r6, [r0, #0]
 8007702:	60c6      	str	r6, [r0, #12]
 8007704:	b13c      	cbz	r4, 8007716 <_Bfree+0x3a>
 8007706:	69eb      	ldr	r3, [r5, #28]
 8007708:	6862      	ldr	r2, [r4, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007710:	6021      	str	r1, [r4, #0]
 8007712:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	080098ad 	.word	0x080098ad
 800771c:	0800992d 	.word	0x0800992d

08007720 <__multadd>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4607      	mov	r7, r0
 8007726:	460c      	mov	r4, r1
 8007728:	461e      	mov	r6, r3
 800772a:	2000      	movs	r0, #0
 800772c:	690d      	ldr	r5, [r1, #16]
 800772e:	f101 0c14 	add.w	ip, r1, #20
 8007732:	f8dc 3000 	ldr.w	r3, [ip]
 8007736:	3001      	adds	r0, #1
 8007738:	b299      	uxth	r1, r3
 800773a:	fb02 6101 	mla	r1, r2, r1, r6
 800773e:	0c1e      	lsrs	r6, r3, #16
 8007740:	0c0b      	lsrs	r3, r1, #16
 8007742:	fb02 3306 	mla	r3, r2, r6, r3
 8007746:	b289      	uxth	r1, r1
 8007748:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800774c:	4285      	cmp	r5, r0
 800774e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007752:	f84c 1b04 	str.w	r1, [ip], #4
 8007756:	dcec      	bgt.n	8007732 <__multadd+0x12>
 8007758:	b30e      	cbz	r6, 800779e <__multadd+0x7e>
 800775a:	68a3      	ldr	r3, [r4, #8]
 800775c:	42ab      	cmp	r3, r5
 800775e:	dc19      	bgt.n	8007794 <__multadd+0x74>
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	4638      	mov	r0, r7
 8007764:	3101      	adds	r1, #1
 8007766:	f7ff ff79 	bl	800765c <_Balloc>
 800776a:	4680      	mov	r8, r0
 800776c:	b928      	cbnz	r0, 800777a <__multadd+0x5a>
 800776e:	4602      	mov	r2, r0
 8007770:	21ba      	movs	r1, #186	@ 0xba
 8007772:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <__multadd+0x84>)
 8007774:	480c      	ldr	r0, [pc, #48]	@ (80077a8 <__multadd+0x88>)
 8007776:	f000 feef 	bl	8008558 <__assert_func>
 800777a:	6922      	ldr	r2, [r4, #16]
 800777c:	f104 010c 	add.w	r1, r4, #12
 8007780:	3202      	adds	r2, #2
 8007782:	0092      	lsls	r2, r2, #2
 8007784:	300c      	adds	r0, #12
 8007786:	f7ff f80a 	bl	800679e <memcpy>
 800778a:	4621      	mov	r1, r4
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff ffa5 	bl	80076dc <_Bfree>
 8007792:	4644      	mov	r4, r8
 8007794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007798:	3501      	adds	r5, #1
 800779a:	615e      	str	r6, [r3, #20]
 800779c:	6125      	str	r5, [r4, #16]
 800779e:	4620      	mov	r0, r4
 80077a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a4:	0800991c 	.word	0x0800991c
 80077a8:	0800992d 	.word	0x0800992d

080077ac <__hi0bits>:
 80077ac:	4603      	mov	r3, r0
 80077ae:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077b2:	bf3a      	itte	cc
 80077b4:	0403      	lslcc	r3, r0, #16
 80077b6:	2010      	movcc	r0, #16
 80077b8:	2000      	movcs	r0, #0
 80077ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077be:	bf3c      	itt	cc
 80077c0:	021b      	lslcc	r3, r3, #8
 80077c2:	3008      	addcc	r0, #8
 80077c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077c8:	bf3c      	itt	cc
 80077ca:	011b      	lslcc	r3, r3, #4
 80077cc:	3004      	addcc	r0, #4
 80077ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d2:	bf3c      	itt	cc
 80077d4:	009b      	lslcc	r3, r3, #2
 80077d6:	3002      	addcc	r0, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	db05      	blt.n	80077e8 <__hi0bits+0x3c>
 80077dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077e0:	f100 0001 	add.w	r0, r0, #1
 80077e4:	bf08      	it	eq
 80077e6:	2020      	moveq	r0, #32
 80077e8:	4770      	bx	lr

080077ea <__lo0bits>:
 80077ea:	6803      	ldr	r3, [r0, #0]
 80077ec:	4602      	mov	r2, r0
 80077ee:	f013 0007 	ands.w	r0, r3, #7
 80077f2:	d00b      	beq.n	800780c <__lo0bits+0x22>
 80077f4:	07d9      	lsls	r1, r3, #31
 80077f6:	d421      	bmi.n	800783c <__lo0bits+0x52>
 80077f8:	0798      	lsls	r0, r3, #30
 80077fa:	bf49      	itett	mi
 80077fc:	085b      	lsrmi	r3, r3, #1
 80077fe:	089b      	lsrpl	r3, r3, #2
 8007800:	2001      	movmi	r0, #1
 8007802:	6013      	strmi	r3, [r2, #0]
 8007804:	bf5c      	itt	pl
 8007806:	2002      	movpl	r0, #2
 8007808:	6013      	strpl	r3, [r2, #0]
 800780a:	4770      	bx	lr
 800780c:	b299      	uxth	r1, r3
 800780e:	b909      	cbnz	r1, 8007814 <__lo0bits+0x2a>
 8007810:	2010      	movs	r0, #16
 8007812:	0c1b      	lsrs	r3, r3, #16
 8007814:	b2d9      	uxtb	r1, r3
 8007816:	b909      	cbnz	r1, 800781c <__lo0bits+0x32>
 8007818:	3008      	adds	r0, #8
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	0719      	lsls	r1, r3, #28
 800781e:	bf04      	itt	eq
 8007820:	091b      	lsreq	r3, r3, #4
 8007822:	3004      	addeq	r0, #4
 8007824:	0799      	lsls	r1, r3, #30
 8007826:	bf04      	itt	eq
 8007828:	089b      	lsreq	r3, r3, #2
 800782a:	3002      	addeq	r0, #2
 800782c:	07d9      	lsls	r1, r3, #31
 800782e:	d403      	bmi.n	8007838 <__lo0bits+0x4e>
 8007830:	085b      	lsrs	r3, r3, #1
 8007832:	f100 0001 	add.w	r0, r0, #1
 8007836:	d003      	beq.n	8007840 <__lo0bits+0x56>
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	4770      	bx	lr
 800783c:	2000      	movs	r0, #0
 800783e:	4770      	bx	lr
 8007840:	2020      	movs	r0, #32
 8007842:	4770      	bx	lr

08007844 <__i2b>:
 8007844:	b510      	push	{r4, lr}
 8007846:	460c      	mov	r4, r1
 8007848:	2101      	movs	r1, #1
 800784a:	f7ff ff07 	bl	800765c <_Balloc>
 800784e:	4602      	mov	r2, r0
 8007850:	b928      	cbnz	r0, 800785e <__i2b+0x1a>
 8007852:	f240 1145 	movw	r1, #325	@ 0x145
 8007856:	4b04      	ldr	r3, [pc, #16]	@ (8007868 <__i2b+0x24>)
 8007858:	4804      	ldr	r0, [pc, #16]	@ (800786c <__i2b+0x28>)
 800785a:	f000 fe7d 	bl	8008558 <__assert_func>
 800785e:	2301      	movs	r3, #1
 8007860:	6144      	str	r4, [r0, #20]
 8007862:	6103      	str	r3, [r0, #16]
 8007864:	bd10      	pop	{r4, pc}
 8007866:	bf00      	nop
 8007868:	0800991c 	.word	0x0800991c
 800786c:	0800992d 	.word	0x0800992d

08007870 <__multiply>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	4614      	mov	r4, r2
 8007876:	690a      	ldr	r2, [r1, #16]
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	460f      	mov	r7, r1
 800787c:	429a      	cmp	r2, r3
 800787e:	bfa2      	ittt	ge
 8007880:	4623      	movge	r3, r4
 8007882:	460c      	movge	r4, r1
 8007884:	461f      	movge	r7, r3
 8007886:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800788a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	6861      	ldr	r1, [r4, #4]
 8007892:	eb0a 0609 	add.w	r6, sl, r9
 8007896:	42b3      	cmp	r3, r6
 8007898:	b085      	sub	sp, #20
 800789a:	bfb8      	it	lt
 800789c:	3101      	addlt	r1, #1
 800789e:	f7ff fedd 	bl	800765c <_Balloc>
 80078a2:	b930      	cbnz	r0, 80078b2 <__multiply+0x42>
 80078a4:	4602      	mov	r2, r0
 80078a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078aa:	4b43      	ldr	r3, [pc, #268]	@ (80079b8 <__multiply+0x148>)
 80078ac:	4843      	ldr	r0, [pc, #268]	@ (80079bc <__multiply+0x14c>)
 80078ae:	f000 fe53 	bl	8008558 <__assert_func>
 80078b2:	f100 0514 	add.w	r5, r0, #20
 80078b6:	462b      	mov	r3, r5
 80078b8:	2200      	movs	r2, #0
 80078ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078be:	4543      	cmp	r3, r8
 80078c0:	d321      	bcc.n	8007906 <__multiply+0x96>
 80078c2:	f107 0114 	add.w	r1, r7, #20
 80078c6:	f104 0214 	add.w	r2, r4, #20
 80078ca:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80078ce:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078d2:	9302      	str	r3, [sp, #8]
 80078d4:	1b13      	subs	r3, r2, r4
 80078d6:	3b15      	subs	r3, #21
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	3304      	adds	r3, #4
 80078de:	f104 0715 	add.w	r7, r4, #21
 80078e2:	42ba      	cmp	r2, r7
 80078e4:	bf38      	it	cc
 80078e6:	2304      	movcc	r3, #4
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	9b02      	ldr	r3, [sp, #8]
 80078ec:	9103      	str	r1, [sp, #12]
 80078ee:	428b      	cmp	r3, r1
 80078f0:	d80c      	bhi.n	800790c <__multiply+0x9c>
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	dd03      	ble.n	80078fe <__multiply+0x8e>
 80078f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d05a      	beq.n	80079b4 <__multiply+0x144>
 80078fe:	6106      	str	r6, [r0, #16]
 8007900:	b005      	add	sp, #20
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	f843 2b04 	str.w	r2, [r3], #4
 800790a:	e7d8      	b.n	80078be <__multiply+0x4e>
 800790c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	d023      	beq.n	800795e <__multiply+0xee>
 8007916:	46a9      	mov	r9, r5
 8007918:	f04f 0c00 	mov.w	ip, #0
 800791c:	f104 0e14 	add.w	lr, r4, #20
 8007920:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007924:	f8d9 3000 	ldr.w	r3, [r9]
 8007928:	fa1f fb87 	uxth.w	fp, r7
 800792c:	b29b      	uxth	r3, r3
 800792e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007932:	4463      	add	r3, ip
 8007934:	f8d9 c000 	ldr.w	ip, [r9]
 8007938:	0c3f      	lsrs	r7, r7, #16
 800793a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800793e:	fb0a c707 	mla	r7, sl, r7, ip
 8007942:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800794c:	4572      	cmp	r2, lr
 800794e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007952:	f849 3b04 	str.w	r3, [r9], #4
 8007956:	d8e3      	bhi.n	8007920 <__multiply+0xb0>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	f845 c003 	str.w	ip, [r5, r3]
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	3104      	adds	r1, #4
 8007962:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007966:	f1b9 0f00 	cmp.w	r9, #0
 800796a:	d021      	beq.n	80079b0 <__multiply+0x140>
 800796c:	46ae      	mov	lr, r5
 800796e:	f04f 0a00 	mov.w	sl, #0
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	f104 0c14 	add.w	ip, r4, #20
 8007978:	f8bc b000 	ldrh.w	fp, [ip]
 800797c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007980:	b29b      	uxth	r3, r3
 8007982:	fb09 770b 	mla	r7, r9, fp, r7
 8007986:	4457      	add	r7, sl
 8007988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800798c:	f84e 3b04 	str.w	r3, [lr], #4
 8007990:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007998:	f8be 3000 	ldrh.w	r3, [lr]
 800799c:	4562      	cmp	r2, ip
 800799e:	fb09 330a 	mla	r3, r9, sl, r3
 80079a2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80079a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079aa:	d8e5      	bhi.n	8007978 <__multiply+0x108>
 80079ac:	9f01      	ldr	r7, [sp, #4]
 80079ae:	51eb      	str	r3, [r5, r7]
 80079b0:	3504      	adds	r5, #4
 80079b2:	e79a      	b.n	80078ea <__multiply+0x7a>
 80079b4:	3e01      	subs	r6, #1
 80079b6:	e79c      	b.n	80078f2 <__multiply+0x82>
 80079b8:	0800991c 	.word	0x0800991c
 80079bc:	0800992d 	.word	0x0800992d

080079c0 <__pow5mult>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	4615      	mov	r5, r2
 80079c6:	f012 0203 	ands.w	r2, r2, #3
 80079ca:	4607      	mov	r7, r0
 80079cc:	460e      	mov	r6, r1
 80079ce:	d007      	beq.n	80079e0 <__pow5mult+0x20>
 80079d0:	4c25      	ldr	r4, [pc, #148]	@ (8007a68 <__pow5mult+0xa8>)
 80079d2:	3a01      	subs	r2, #1
 80079d4:	2300      	movs	r3, #0
 80079d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079da:	f7ff fea1 	bl	8007720 <__multadd>
 80079de:	4606      	mov	r6, r0
 80079e0:	10ad      	asrs	r5, r5, #2
 80079e2:	d03d      	beq.n	8007a60 <__pow5mult+0xa0>
 80079e4:	69fc      	ldr	r4, [r7, #28]
 80079e6:	b97c      	cbnz	r4, 8007a08 <__pow5mult+0x48>
 80079e8:	2010      	movs	r0, #16
 80079ea:	f7ff fd81 	bl	80074f0 <malloc>
 80079ee:	4602      	mov	r2, r0
 80079f0:	61f8      	str	r0, [r7, #28]
 80079f2:	b928      	cbnz	r0, 8007a00 <__pow5mult+0x40>
 80079f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079f8:	4b1c      	ldr	r3, [pc, #112]	@ (8007a6c <__pow5mult+0xac>)
 80079fa:	481d      	ldr	r0, [pc, #116]	@ (8007a70 <__pow5mult+0xb0>)
 80079fc:	f000 fdac 	bl	8008558 <__assert_func>
 8007a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a04:	6004      	str	r4, [r0, #0]
 8007a06:	60c4      	str	r4, [r0, #12]
 8007a08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a10:	b94c      	cbnz	r4, 8007a26 <__pow5mult+0x66>
 8007a12:	f240 2171 	movw	r1, #625	@ 0x271
 8007a16:	4638      	mov	r0, r7
 8007a18:	f7ff ff14 	bl	8007844 <__i2b>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	f04f 0900 	mov.w	r9, #0
 8007a2a:	07eb      	lsls	r3, r5, #31
 8007a2c:	d50a      	bpl.n	8007a44 <__pow5mult+0x84>
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4622      	mov	r2, r4
 8007a32:	4638      	mov	r0, r7
 8007a34:	f7ff ff1c 	bl	8007870 <__multiply>
 8007a38:	4680      	mov	r8, r0
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fe4d 	bl	80076dc <_Bfree>
 8007a42:	4646      	mov	r6, r8
 8007a44:	106d      	asrs	r5, r5, #1
 8007a46:	d00b      	beq.n	8007a60 <__pow5mult+0xa0>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	b938      	cbnz	r0, 8007a5c <__pow5mult+0x9c>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4638      	mov	r0, r7
 8007a52:	f7ff ff0d 	bl	8007870 <__multiply>
 8007a56:	6020      	str	r0, [r4, #0]
 8007a58:	f8c0 9000 	str.w	r9, [r0]
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e7e4      	b.n	8007a2a <__pow5mult+0x6a>
 8007a60:	4630      	mov	r0, r6
 8007a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a66:	bf00      	nop
 8007a68:	08009988 	.word	0x08009988
 8007a6c:	080098ad 	.word	0x080098ad
 8007a70:	0800992d 	.word	0x0800992d

08007a74 <__lshift>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	4691      	mov	r9, r2
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6849      	ldr	r1, [r1, #4]
 8007a82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a8c:	f108 0601 	add.w	r6, r8, #1
 8007a90:	42b3      	cmp	r3, r6
 8007a92:	db0b      	blt.n	8007aac <__lshift+0x38>
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fde1 	bl	800765c <_Balloc>
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b948      	cbnz	r0, 8007ab2 <__lshift+0x3e>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007aa4:	4b27      	ldr	r3, [pc, #156]	@ (8007b44 <__lshift+0xd0>)
 8007aa6:	4828      	ldr	r0, [pc, #160]	@ (8007b48 <__lshift+0xd4>)
 8007aa8:	f000 fd56 	bl	8008558 <__assert_func>
 8007aac:	3101      	adds	r1, #1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	e7ee      	b.n	8007a90 <__lshift+0x1c>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f100 0114 	add.w	r1, r0, #20
 8007ab8:	f100 0210 	add.w	r2, r0, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	4553      	cmp	r3, sl
 8007ac0:	db33      	blt.n	8007b2a <__lshift+0xb6>
 8007ac2:	6920      	ldr	r0, [r4, #16]
 8007ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ac8:	f104 0314 	add.w	r3, r4, #20
 8007acc:	f019 091f 	ands.w	r9, r9, #31
 8007ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ad4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ad8:	d02b      	beq.n	8007b32 <__lshift+0xbe>
 8007ada:	468a      	mov	sl, r1
 8007adc:	2200      	movs	r2, #0
 8007ade:	f1c9 0e20 	rsb	lr, r9, #32
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ae8:	4310      	orrs	r0, r2
 8007aea:	f84a 0b04 	str.w	r0, [sl], #4
 8007aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af2:	459c      	cmp	ip, r3
 8007af4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007af8:	d8f3      	bhi.n	8007ae2 <__lshift+0x6e>
 8007afa:	ebac 0304 	sub.w	r3, ip, r4
 8007afe:	3b15      	subs	r3, #21
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	3304      	adds	r3, #4
 8007b06:	f104 0015 	add.w	r0, r4, #21
 8007b0a:	4584      	cmp	ip, r0
 8007b0c:	bf38      	it	cc
 8007b0e:	2304      	movcc	r3, #4
 8007b10:	50ca      	str	r2, [r1, r3]
 8007b12:	b10a      	cbz	r2, 8007b18 <__lshift+0xa4>
 8007b14:	f108 0602 	add.w	r6, r8, #2
 8007b18:	3e01      	subs	r6, #1
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	612e      	str	r6, [r5, #16]
 8007b20:	f7ff fddc 	bl	80076dc <_Bfree>
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b2e:	3301      	adds	r3, #1
 8007b30:	e7c5      	b.n	8007abe <__lshift+0x4a>
 8007b32:	3904      	subs	r1, #4
 8007b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b38:	459c      	cmp	ip, r3
 8007b3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b3e:	d8f9      	bhi.n	8007b34 <__lshift+0xc0>
 8007b40:	e7ea      	b.n	8007b18 <__lshift+0xa4>
 8007b42:	bf00      	nop
 8007b44:	0800991c 	.word	0x0800991c
 8007b48:	0800992d 	.word	0x0800992d

08007b4c <__mcmp>:
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	690a      	ldr	r2, [r1, #16]
 8007b50:	6900      	ldr	r0, [r0, #16]
 8007b52:	b530      	push	{r4, r5, lr}
 8007b54:	1a80      	subs	r0, r0, r2
 8007b56:	d10e      	bne.n	8007b76 <__mcmp+0x2a>
 8007b58:	3314      	adds	r3, #20
 8007b5a:	3114      	adds	r1, #20
 8007b5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b6c:	4295      	cmp	r5, r2
 8007b6e:	d003      	beq.n	8007b78 <__mcmp+0x2c>
 8007b70:	d205      	bcs.n	8007b7e <__mcmp+0x32>
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	bd30      	pop	{r4, r5, pc}
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	d3f3      	bcc.n	8007b64 <__mcmp+0x18>
 8007b7c:	e7fb      	b.n	8007b76 <__mcmp+0x2a>
 8007b7e:	2001      	movs	r0, #1
 8007b80:	e7f9      	b.n	8007b76 <__mcmp+0x2a>
	...

08007b84 <__mdiff>:
 8007b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4689      	mov	r9, r1
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	4648      	mov	r0, r9
 8007b90:	4614      	mov	r4, r2
 8007b92:	f7ff ffdb 	bl	8007b4c <__mcmp>
 8007b96:	1e05      	subs	r5, r0, #0
 8007b98:	d112      	bne.n	8007bc0 <__mdiff+0x3c>
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7ff fd5d 	bl	800765c <_Balloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	b928      	cbnz	r0, 8007bb2 <__mdiff+0x2e>
 8007ba6:	f240 2137 	movw	r1, #567	@ 0x237
 8007baa:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca4 <__mdiff+0x120>)
 8007bac:	483e      	ldr	r0, [pc, #248]	@ (8007ca8 <__mdiff+0x124>)
 8007bae:	f000 fcd3 	bl	8008558 <__assert_func>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bb8:	4610      	mov	r0, r2
 8007bba:	b003      	add	sp, #12
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	bfbc      	itt	lt
 8007bc2:	464b      	movlt	r3, r9
 8007bc4:	46a1      	movlt	r9, r4
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bcc:	bfba      	itte	lt
 8007bce:	461c      	movlt	r4, r3
 8007bd0:	2501      	movlt	r5, #1
 8007bd2:	2500      	movge	r5, #0
 8007bd4:	f7ff fd42 	bl	800765c <_Balloc>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	b918      	cbnz	r0, 8007be4 <__mdiff+0x60>
 8007bdc:	f240 2145 	movw	r1, #581	@ 0x245
 8007be0:	4b30      	ldr	r3, [pc, #192]	@ (8007ca4 <__mdiff+0x120>)
 8007be2:	e7e3      	b.n	8007bac <__mdiff+0x28>
 8007be4:	f100 0b14 	add.w	fp, r0, #20
 8007be8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007bec:	f109 0310 	add.w	r3, r9, #16
 8007bf0:	60c5      	str	r5, [r0, #12]
 8007bf2:	f04f 0c00 	mov.w	ip, #0
 8007bf6:	f109 0514 	add.w	r5, r9, #20
 8007bfa:	46d9      	mov	r9, fp
 8007bfc:	6926      	ldr	r6, [r4, #16]
 8007bfe:	f104 0e14 	add.w	lr, r4, #20
 8007c02:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c06:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c16:	b281      	uxth	r1, r0
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	fa1f f38a 	uxth.w	r3, sl
 8007c1e:	1a5b      	subs	r3, r3, r1
 8007c20:	0c00      	lsrs	r0, r0, #16
 8007c22:	4463      	add	r3, ip
 8007c24:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c28:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c32:	4576      	cmp	r6, lr
 8007c34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c38:	f849 3b04 	str.w	r3, [r9], #4
 8007c3c:	d8e6      	bhi.n	8007c0c <__mdiff+0x88>
 8007c3e:	1b33      	subs	r3, r6, r4
 8007c40:	3b15      	subs	r3, #21
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	3415      	adds	r4, #21
 8007c48:	3304      	adds	r3, #4
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	bf38      	it	cc
 8007c4e:	2304      	movcc	r3, #4
 8007c50:	441d      	add	r5, r3
 8007c52:	445b      	add	r3, fp
 8007c54:	461e      	mov	r6, r3
 8007c56:	462c      	mov	r4, r5
 8007c58:	4544      	cmp	r4, r8
 8007c5a:	d30e      	bcc.n	8007c7a <__mdiff+0xf6>
 8007c5c:	f108 0103 	add.w	r1, r8, #3
 8007c60:	1b49      	subs	r1, r1, r5
 8007c62:	f021 0103 	bic.w	r1, r1, #3
 8007c66:	3d03      	subs	r5, #3
 8007c68:	45a8      	cmp	r8, r5
 8007c6a:	bf38      	it	cc
 8007c6c:	2100      	movcc	r1, #0
 8007c6e:	440b      	add	r3, r1
 8007c70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c74:	b199      	cbz	r1, 8007c9e <__mdiff+0x11a>
 8007c76:	6117      	str	r7, [r2, #16]
 8007c78:	e79e      	b.n	8007bb8 <__mdiff+0x34>
 8007c7a:	46e6      	mov	lr, ip
 8007c7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c80:	fa1f fc81 	uxth.w	ip, r1
 8007c84:	44f4      	add	ip, lr
 8007c86:	0c08      	lsrs	r0, r1, #16
 8007c88:	4471      	add	r1, lr
 8007c8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c8e:	b289      	uxth	r1, r1
 8007c90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c98:	f846 1b04 	str.w	r1, [r6], #4
 8007c9c:	e7dc      	b.n	8007c58 <__mdiff+0xd4>
 8007c9e:	3f01      	subs	r7, #1
 8007ca0:	e7e6      	b.n	8007c70 <__mdiff+0xec>
 8007ca2:	bf00      	nop
 8007ca4:	0800991c 	.word	0x0800991c
 8007ca8:	0800992d 	.word	0x0800992d

08007cac <__d2b>:
 8007cac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	4690      	mov	r8, r2
 8007cb4:	4699      	mov	r9, r3
 8007cb6:	9e08      	ldr	r6, [sp, #32]
 8007cb8:	f7ff fcd0 	bl	800765c <_Balloc>
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	b930      	cbnz	r0, 8007cce <__d2b+0x22>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cc6:	4b23      	ldr	r3, [pc, #140]	@ (8007d54 <__d2b+0xa8>)
 8007cc8:	4823      	ldr	r0, [pc, #140]	@ (8007d58 <__d2b+0xac>)
 8007cca:	f000 fc45 	bl	8008558 <__assert_func>
 8007cce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cd6:	b10d      	cbz	r5, 8007cdc <__d2b+0x30>
 8007cd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cdc:	9301      	str	r3, [sp, #4]
 8007cde:	f1b8 0300 	subs.w	r3, r8, #0
 8007ce2:	d024      	beq.n	8007d2e <__d2b+0x82>
 8007ce4:	4668      	mov	r0, sp
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	f7ff fd7f 	bl	80077ea <__lo0bits>
 8007cec:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007cf0:	b1d8      	cbz	r0, 8007d2a <__d2b+0x7e>
 8007cf2:	f1c0 0320 	rsb	r3, r0, #32
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	40c2      	lsrs	r2, r0
 8007cfe:	6163      	str	r3, [r4, #20]
 8007d00:	9201      	str	r2, [sp, #4]
 8007d02:	9b01      	ldr	r3, [sp, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bf0c      	ite	eq
 8007d08:	2201      	moveq	r2, #1
 8007d0a:	2202      	movne	r2, #2
 8007d0c:	61a3      	str	r3, [r4, #24]
 8007d0e:	6122      	str	r2, [r4, #16]
 8007d10:	b1ad      	cbz	r5, 8007d3e <__d2b+0x92>
 8007d12:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d16:	4405      	add	r5, r0
 8007d18:	6035      	str	r5, [r6, #0]
 8007d1a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d20:	6018      	str	r0, [r3, #0]
 8007d22:	4620      	mov	r0, r4
 8007d24:	b002      	add	sp, #8
 8007d26:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d2a:	6161      	str	r1, [r4, #20]
 8007d2c:	e7e9      	b.n	8007d02 <__d2b+0x56>
 8007d2e:	a801      	add	r0, sp, #4
 8007d30:	f7ff fd5b 	bl	80077ea <__lo0bits>
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	6163      	str	r3, [r4, #20]
 8007d3a:	3020      	adds	r0, #32
 8007d3c:	e7e7      	b.n	8007d0e <__d2b+0x62>
 8007d3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d46:	6030      	str	r0, [r6, #0]
 8007d48:	6918      	ldr	r0, [r3, #16]
 8007d4a:	f7ff fd2f 	bl	80077ac <__hi0bits>
 8007d4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d52:	e7e4      	b.n	8007d1e <__d2b+0x72>
 8007d54:	0800991c 	.word	0x0800991c
 8007d58:	0800992d 	.word	0x0800992d

08007d5c <__ssputs_r>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	461f      	mov	r7, r3
 8007d62:	688e      	ldr	r6, [r1, #8]
 8007d64:	4682      	mov	sl, r0
 8007d66:	42be      	cmp	r6, r7
 8007d68:	460c      	mov	r4, r1
 8007d6a:	4690      	mov	r8, r2
 8007d6c:	680b      	ldr	r3, [r1, #0]
 8007d6e:	d82d      	bhi.n	8007dcc <__ssputs_r+0x70>
 8007d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d78:	d026      	beq.n	8007dc8 <__ssputs_r+0x6c>
 8007d7a:	6965      	ldr	r5, [r4, #20]
 8007d7c:	6909      	ldr	r1, [r1, #16]
 8007d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d82:	eba3 0901 	sub.w	r9, r3, r1
 8007d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d8a:	1c7b      	adds	r3, r7, #1
 8007d8c:	444b      	add	r3, r9
 8007d8e:	106d      	asrs	r5, r5, #1
 8007d90:	429d      	cmp	r5, r3
 8007d92:	bf38      	it	cc
 8007d94:	461d      	movcc	r5, r3
 8007d96:	0553      	lsls	r3, r2, #21
 8007d98:	d527      	bpl.n	8007dea <__ssputs_r+0x8e>
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	f7ff fbd2 	bl	8007544 <_malloc_r>
 8007da0:	4606      	mov	r6, r0
 8007da2:	b360      	cbz	r0, 8007dfe <__ssputs_r+0xa2>
 8007da4:	464a      	mov	r2, r9
 8007da6:	6921      	ldr	r1, [r4, #16]
 8007da8:	f7fe fcf9 	bl	800679e <memcpy>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	6126      	str	r6, [r4, #16]
 8007dba:	444e      	add	r6, r9
 8007dbc:	6026      	str	r6, [r4, #0]
 8007dbe:	463e      	mov	r6, r7
 8007dc0:	6165      	str	r5, [r4, #20]
 8007dc2:	eba5 0509 	sub.w	r5, r5, r9
 8007dc6:	60a5      	str	r5, [r4, #8]
 8007dc8:	42be      	cmp	r6, r7
 8007dca:	d900      	bls.n	8007dce <__ssputs_r+0x72>
 8007dcc:	463e      	mov	r6, r7
 8007dce:	4632      	mov	r2, r6
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	6820      	ldr	r0, [r4, #0]
 8007dd4:	f000 fb96 	bl	8008504 <memmove>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	68a3      	ldr	r3, [r4, #8]
 8007ddc:	1b9b      	subs	r3, r3, r6
 8007dde:	60a3      	str	r3, [r4, #8]
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	4433      	add	r3, r6
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dea:	462a      	mov	r2, r5
 8007dec:	f000 fbf8 	bl	80085e0 <_realloc_r>
 8007df0:	4606      	mov	r6, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d1e0      	bne.n	8007db8 <__ssputs_r+0x5c>
 8007df6:	4650      	mov	r0, sl
 8007df8:	6921      	ldr	r1, [r4, #16]
 8007dfa:	f7ff fb31 	bl	8007460 <_free_r>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	f8ca 3000 	str.w	r3, [sl]
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	e7e9      	b.n	8007de6 <__ssputs_r+0x8a>
	...

08007e14 <_svfiprintf_r>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	4698      	mov	r8, r3
 8007e1a:	898b      	ldrh	r3, [r1, #12]
 8007e1c:	4607      	mov	r7, r0
 8007e1e:	061b      	lsls	r3, r3, #24
 8007e20:	460d      	mov	r5, r1
 8007e22:	4614      	mov	r4, r2
 8007e24:	b09d      	sub	sp, #116	@ 0x74
 8007e26:	d510      	bpl.n	8007e4a <_svfiprintf_r+0x36>
 8007e28:	690b      	ldr	r3, [r1, #16]
 8007e2a:	b973      	cbnz	r3, 8007e4a <_svfiprintf_r+0x36>
 8007e2c:	2140      	movs	r1, #64	@ 0x40
 8007e2e:	f7ff fb89 	bl	8007544 <_malloc_r>
 8007e32:	6028      	str	r0, [r5, #0]
 8007e34:	6128      	str	r0, [r5, #16]
 8007e36:	b930      	cbnz	r0, 8007e46 <_svfiprintf_r+0x32>
 8007e38:	230c      	movs	r3, #12
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	b01d      	add	sp, #116	@ 0x74
 8007e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e46:	2340      	movs	r3, #64	@ 0x40
 8007e48:	616b      	str	r3, [r5, #20]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e4e:	2320      	movs	r3, #32
 8007e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e54:	2330      	movs	r3, #48	@ 0x30
 8007e56:	f04f 0901 	mov.w	r9, #1
 8007e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ff8 <_svfiprintf_r+0x1e4>
 8007e62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e66:	4623      	mov	r3, r4
 8007e68:	469a      	mov	sl, r3
 8007e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e6e:	b10a      	cbz	r2, 8007e74 <_svfiprintf_r+0x60>
 8007e70:	2a25      	cmp	r2, #37	@ 0x25
 8007e72:	d1f9      	bne.n	8007e68 <_svfiprintf_r+0x54>
 8007e74:	ebba 0b04 	subs.w	fp, sl, r4
 8007e78:	d00b      	beq.n	8007e92 <_svfiprintf_r+0x7e>
 8007e7a:	465b      	mov	r3, fp
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4638      	mov	r0, r7
 8007e82:	f7ff ff6b 	bl	8007d5c <__ssputs_r>
 8007e86:	3001      	adds	r0, #1
 8007e88:	f000 80a7 	beq.w	8007fda <_svfiprintf_r+0x1c6>
 8007e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e8e:	445a      	add	r2, fp
 8007e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e92:	f89a 3000 	ldrb.w	r3, [sl]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 809f 	beq.w	8007fda <_svfiprintf_r+0x1c6>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ea6:	f10a 0a01 	add.w	sl, sl, #1
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007eb4:	4654      	mov	r4, sl
 8007eb6:	2205      	movs	r2, #5
 8007eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebc:	484e      	ldr	r0, [pc, #312]	@ (8007ff8 <_svfiprintf_r+0x1e4>)
 8007ebe:	f7fe fc60 	bl	8006782 <memchr>
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	b9d8      	cbnz	r0, 8007efe <_svfiprintf_r+0xea>
 8007ec6:	06d0      	lsls	r0, r2, #27
 8007ec8:	bf44      	itt	mi
 8007eca:	2320      	movmi	r3, #32
 8007ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ed0:	0711      	lsls	r1, r2, #28
 8007ed2:	bf44      	itt	mi
 8007ed4:	232b      	movmi	r3, #43	@ 0x2b
 8007ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eda:	f89a 3000 	ldrb.w	r3, [sl]
 8007ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ee0:	d015      	beq.n	8007f0e <_svfiprintf_r+0xfa>
 8007ee2:	4654      	mov	r4, sl
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f04f 0c0a 	mov.w	ip, #10
 8007eea:	9a07      	ldr	r2, [sp, #28]
 8007eec:	4621      	mov	r1, r4
 8007eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ef2:	3b30      	subs	r3, #48	@ 0x30
 8007ef4:	2b09      	cmp	r3, #9
 8007ef6:	d94b      	bls.n	8007f90 <_svfiprintf_r+0x17c>
 8007ef8:	b1b0      	cbz	r0, 8007f28 <_svfiprintf_r+0x114>
 8007efa:	9207      	str	r2, [sp, #28]
 8007efc:	e014      	b.n	8007f28 <_svfiprintf_r+0x114>
 8007efe:	eba0 0308 	sub.w	r3, r0, r8
 8007f02:	fa09 f303 	lsl.w	r3, r9, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	46a2      	mov	sl, r4
 8007f0a:	9304      	str	r3, [sp, #16]
 8007f0c:	e7d2      	b.n	8007eb4 <_svfiprintf_r+0xa0>
 8007f0e:	9b03      	ldr	r3, [sp, #12]
 8007f10:	1d19      	adds	r1, r3, #4
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	9103      	str	r1, [sp, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bfbb      	ittet	lt
 8007f1a:	425b      	neglt	r3, r3
 8007f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f20:	9307      	strge	r3, [sp, #28]
 8007f22:	9307      	strlt	r3, [sp, #28]
 8007f24:	bfb8      	it	lt
 8007f26:	9204      	strlt	r2, [sp, #16]
 8007f28:	7823      	ldrb	r3, [r4, #0]
 8007f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f2c:	d10a      	bne.n	8007f44 <_svfiprintf_r+0x130>
 8007f2e:	7863      	ldrb	r3, [r4, #1]
 8007f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f32:	d132      	bne.n	8007f9a <_svfiprintf_r+0x186>
 8007f34:	9b03      	ldr	r3, [sp, #12]
 8007f36:	3402      	adds	r4, #2
 8007f38:	1d1a      	adds	r2, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9203      	str	r2, [sp, #12]
 8007f3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ffc <_svfiprintf_r+0x1e8>
 8007f48:	2203      	movs	r2, #3
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	7821      	ldrb	r1, [r4, #0]
 8007f4e:	f7fe fc18 	bl	8006782 <memchr>
 8007f52:	b138      	cbz	r0, 8007f64 <_svfiprintf_r+0x150>
 8007f54:	2240      	movs	r2, #64	@ 0x40
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	eba0 000a 	sub.w	r0, r0, sl
 8007f5c:	4082      	lsls	r2, r0
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	3401      	adds	r4, #1
 8007f62:	9304      	str	r3, [sp, #16]
 8007f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f68:	2206      	movs	r2, #6
 8007f6a:	4825      	ldr	r0, [pc, #148]	@ (8008000 <_svfiprintf_r+0x1ec>)
 8007f6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f70:	f7fe fc07 	bl	8006782 <memchr>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d036      	beq.n	8007fe6 <_svfiprintf_r+0x1d2>
 8007f78:	4b22      	ldr	r3, [pc, #136]	@ (8008004 <_svfiprintf_r+0x1f0>)
 8007f7a:	bb1b      	cbnz	r3, 8007fc4 <_svfiprintf_r+0x1b0>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	3307      	adds	r3, #7
 8007f80:	f023 0307 	bic.w	r3, r3, #7
 8007f84:	3308      	adds	r3, #8
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8a:	4433      	add	r3, r6
 8007f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f8e:	e76a      	b.n	8007e66 <_svfiprintf_r+0x52>
 8007f90:	460c      	mov	r4, r1
 8007f92:	2001      	movs	r0, #1
 8007f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f98:	e7a8      	b.n	8007eec <_svfiprintf_r+0xd8>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f04f 0c0a 	mov.w	ip, #10
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	3401      	adds	r4, #1
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fac:	3a30      	subs	r2, #48	@ 0x30
 8007fae:	2a09      	cmp	r2, #9
 8007fb0:	d903      	bls.n	8007fba <_svfiprintf_r+0x1a6>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0c6      	beq.n	8007f44 <_svfiprintf_r+0x130>
 8007fb6:	9105      	str	r1, [sp, #20]
 8007fb8:	e7c4      	b.n	8007f44 <_svfiprintf_r+0x130>
 8007fba:	4604      	mov	r4, r0
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fc2:	e7f0      	b.n	8007fa6 <_svfiprintf_r+0x192>
 8007fc4:	ab03      	add	r3, sp, #12
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4638      	mov	r0, r7
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8008008 <_svfiprintf_r+0x1f4>)
 8007fce:	a904      	add	r1, sp, #16
 8007fd0:	f7fd fe0a 	bl	8005be8 <_printf_float>
 8007fd4:	1c42      	adds	r2, r0, #1
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	d1d6      	bne.n	8007f88 <_svfiprintf_r+0x174>
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	065b      	lsls	r3, r3, #25
 8007fde:	f53f af2d 	bmi.w	8007e3c <_svfiprintf_r+0x28>
 8007fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fe4:	e72c      	b.n	8007e40 <_svfiprintf_r+0x2c>
 8007fe6:	ab03      	add	r3, sp, #12
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	462a      	mov	r2, r5
 8007fec:	4638      	mov	r0, r7
 8007fee:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <_svfiprintf_r+0x1f4>)
 8007ff0:	a904      	add	r1, sp, #16
 8007ff2:	f7fe f897 	bl	8006124 <_printf_i>
 8007ff6:	e7ed      	b.n	8007fd4 <_svfiprintf_r+0x1c0>
 8007ff8:	08009b89 	.word	0x08009b89
 8007ffc:	08009b8f 	.word	0x08009b8f
 8008000:	08009b93 	.word	0x08009b93
 8008004:	08005be9 	.word	0x08005be9
 8008008:	08007d5d 	.word	0x08007d5d

0800800c <__sfputc_r>:
 800800c:	6893      	ldr	r3, [r2, #8]
 800800e:	b410      	push	{r4}
 8008010:	3b01      	subs	r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	6093      	str	r3, [r2, #8]
 8008016:	da07      	bge.n	8008028 <__sfputc_r+0x1c>
 8008018:	6994      	ldr	r4, [r2, #24]
 800801a:	42a3      	cmp	r3, r4
 800801c:	db01      	blt.n	8008022 <__sfputc_r+0x16>
 800801e:	290a      	cmp	r1, #10
 8008020:	d102      	bne.n	8008028 <__sfputc_r+0x1c>
 8008022:	bc10      	pop	{r4}
 8008024:	f000 b9da 	b.w	80083dc <__swbuf_r>
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	1c58      	adds	r0, r3, #1
 800802c:	6010      	str	r0, [r2, #0]
 800802e:	7019      	strb	r1, [r3, #0]
 8008030:	4608      	mov	r0, r1
 8008032:	bc10      	pop	{r4}
 8008034:	4770      	bx	lr

08008036 <__sfputs_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	4614      	mov	r4, r2
 800803e:	18d5      	adds	r5, r2, r3
 8008040:	42ac      	cmp	r4, r5
 8008042:	d101      	bne.n	8008048 <__sfputs_r+0x12>
 8008044:	2000      	movs	r0, #0
 8008046:	e007      	b.n	8008058 <__sfputs_r+0x22>
 8008048:	463a      	mov	r2, r7
 800804a:	4630      	mov	r0, r6
 800804c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008050:	f7ff ffdc 	bl	800800c <__sfputc_r>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d1f3      	bne.n	8008040 <__sfputs_r+0xa>
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800805c <_vfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460d      	mov	r5, r1
 8008062:	4614      	mov	r4, r2
 8008064:	4698      	mov	r8, r3
 8008066:	4606      	mov	r6, r0
 8008068:	b09d      	sub	sp, #116	@ 0x74
 800806a:	b118      	cbz	r0, 8008074 <_vfiprintf_r+0x18>
 800806c:	6a03      	ldr	r3, [r0, #32]
 800806e:	b90b      	cbnz	r3, 8008074 <_vfiprintf_r+0x18>
 8008070:	f7fe fa04 	bl	800647c <__sinit>
 8008074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008076:	07d9      	lsls	r1, r3, #31
 8008078:	d405      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 800807a:	89ab      	ldrh	r3, [r5, #12]
 800807c:	059a      	lsls	r2, r3, #22
 800807e:	d402      	bmi.n	8008086 <_vfiprintf_r+0x2a>
 8008080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008082:	f7fe fb74 	bl	800676e <__retarget_lock_acquire_recursive>
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	071b      	lsls	r3, r3, #28
 800808a:	d501      	bpl.n	8008090 <_vfiprintf_r+0x34>
 800808c:	692b      	ldr	r3, [r5, #16]
 800808e:	b99b      	cbnz	r3, 80080b8 <_vfiprintf_r+0x5c>
 8008090:	4629      	mov	r1, r5
 8008092:	4630      	mov	r0, r6
 8008094:	f000 f9e0 	bl	8008458 <__swsetup_r>
 8008098:	b170      	cbz	r0, 80080b8 <_vfiprintf_r+0x5c>
 800809a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800809c:	07dc      	lsls	r4, r3, #31
 800809e:	d504      	bpl.n	80080aa <_vfiprintf_r+0x4e>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	@ 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	0598      	lsls	r0, r3, #22
 80080ae:	d4f7      	bmi.n	80080a0 <_vfiprintf_r+0x44>
 80080b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b2:	f7fe fb5d 	bl	8006770 <__retarget_lock_release_recursive>
 80080b6:	e7f3      	b.n	80080a0 <_vfiprintf_r+0x44>
 80080b8:	2300      	movs	r3, #0
 80080ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80080bc:	2320      	movs	r3, #32
 80080be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080c2:	2330      	movs	r3, #48	@ 0x30
 80080c4:	f04f 0901 	mov.w	r9, #1
 80080c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008278 <_vfiprintf_r+0x21c>
 80080d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080d4:	4623      	mov	r3, r4
 80080d6:	469a      	mov	sl, r3
 80080d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080dc:	b10a      	cbz	r2, 80080e2 <_vfiprintf_r+0x86>
 80080de:	2a25      	cmp	r2, #37	@ 0x25
 80080e0:	d1f9      	bne.n	80080d6 <_vfiprintf_r+0x7a>
 80080e2:	ebba 0b04 	subs.w	fp, sl, r4
 80080e6:	d00b      	beq.n	8008100 <_vfiprintf_r+0xa4>
 80080e8:	465b      	mov	r3, fp
 80080ea:	4622      	mov	r2, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff ffa1 	bl	8008036 <__sfputs_r>
 80080f4:	3001      	adds	r0, #1
 80080f6:	f000 80a7 	beq.w	8008248 <_vfiprintf_r+0x1ec>
 80080fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080fc:	445a      	add	r2, fp
 80080fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008100:	f89a 3000 	ldrb.w	r3, [sl]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 809f 	beq.w	8008248 <_vfiprintf_r+0x1ec>
 800810a:	2300      	movs	r3, #0
 800810c:	f04f 32ff 	mov.w	r2, #4294967295
 8008110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008114:	f10a 0a01 	add.w	sl, sl, #1
 8008118:	9304      	str	r3, [sp, #16]
 800811a:	9307      	str	r3, [sp, #28]
 800811c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008120:	931a      	str	r3, [sp, #104]	@ 0x68
 8008122:	4654      	mov	r4, sl
 8008124:	2205      	movs	r2, #5
 8008126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812a:	4853      	ldr	r0, [pc, #332]	@ (8008278 <_vfiprintf_r+0x21c>)
 800812c:	f7fe fb29 	bl	8006782 <memchr>
 8008130:	9a04      	ldr	r2, [sp, #16]
 8008132:	b9d8      	cbnz	r0, 800816c <_vfiprintf_r+0x110>
 8008134:	06d1      	lsls	r1, r2, #27
 8008136:	bf44      	itt	mi
 8008138:	2320      	movmi	r3, #32
 800813a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800813e:	0713      	lsls	r3, r2, #28
 8008140:	bf44      	itt	mi
 8008142:	232b      	movmi	r3, #43	@ 0x2b
 8008144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008148:	f89a 3000 	ldrb.w	r3, [sl]
 800814c:	2b2a      	cmp	r3, #42	@ 0x2a
 800814e:	d015      	beq.n	800817c <_vfiprintf_r+0x120>
 8008150:	4654      	mov	r4, sl
 8008152:	2000      	movs	r0, #0
 8008154:	f04f 0c0a 	mov.w	ip, #10
 8008158:	9a07      	ldr	r2, [sp, #28]
 800815a:	4621      	mov	r1, r4
 800815c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008160:	3b30      	subs	r3, #48	@ 0x30
 8008162:	2b09      	cmp	r3, #9
 8008164:	d94b      	bls.n	80081fe <_vfiprintf_r+0x1a2>
 8008166:	b1b0      	cbz	r0, 8008196 <_vfiprintf_r+0x13a>
 8008168:	9207      	str	r2, [sp, #28]
 800816a:	e014      	b.n	8008196 <_vfiprintf_r+0x13a>
 800816c:	eba0 0308 	sub.w	r3, r0, r8
 8008170:	fa09 f303 	lsl.w	r3, r9, r3
 8008174:	4313      	orrs	r3, r2
 8008176:	46a2      	mov	sl, r4
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	e7d2      	b.n	8008122 <_vfiprintf_r+0xc6>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1d19      	adds	r1, r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9103      	str	r1, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfbb      	ittet	lt
 8008188:	425b      	neglt	r3, r3
 800818a:	f042 0202 	orrlt.w	r2, r2, #2
 800818e:	9307      	strge	r3, [sp, #28]
 8008190:	9307      	strlt	r3, [sp, #28]
 8008192:	bfb8      	it	lt
 8008194:	9204      	strlt	r2, [sp, #16]
 8008196:	7823      	ldrb	r3, [r4, #0]
 8008198:	2b2e      	cmp	r3, #46	@ 0x2e
 800819a:	d10a      	bne.n	80081b2 <_vfiprintf_r+0x156>
 800819c:	7863      	ldrb	r3, [r4, #1]
 800819e:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a0:	d132      	bne.n	8008208 <_vfiprintf_r+0x1ac>
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	3402      	adds	r4, #2
 80081a6:	1d1a      	adds	r2, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9203      	str	r2, [sp, #12]
 80081ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800827c <_vfiprintf_r+0x220>
 80081b6:	2203      	movs	r2, #3
 80081b8:	4650      	mov	r0, sl
 80081ba:	7821      	ldrb	r1, [r4, #0]
 80081bc:	f7fe fae1 	bl	8006782 <memchr>
 80081c0:	b138      	cbz	r0, 80081d2 <_vfiprintf_r+0x176>
 80081c2:	2240      	movs	r2, #64	@ 0x40
 80081c4:	9b04      	ldr	r3, [sp, #16]
 80081c6:	eba0 000a 	sub.w	r0, r0, sl
 80081ca:	4082      	lsls	r2, r0
 80081cc:	4313      	orrs	r3, r2
 80081ce:	3401      	adds	r4, #1
 80081d0:	9304      	str	r3, [sp, #16]
 80081d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d6:	2206      	movs	r2, #6
 80081d8:	4829      	ldr	r0, [pc, #164]	@ (8008280 <_vfiprintf_r+0x224>)
 80081da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081de:	f7fe fad0 	bl	8006782 <memchr>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d03f      	beq.n	8008266 <_vfiprintf_r+0x20a>
 80081e6:	4b27      	ldr	r3, [pc, #156]	@ (8008284 <_vfiprintf_r+0x228>)
 80081e8:	bb1b      	cbnz	r3, 8008232 <_vfiprintf_r+0x1d6>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	3307      	adds	r3, #7
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	3308      	adds	r3, #8
 80081f4:	9303      	str	r3, [sp, #12]
 80081f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f8:	443b      	add	r3, r7
 80081fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081fc:	e76a      	b.n	80080d4 <_vfiprintf_r+0x78>
 80081fe:	460c      	mov	r4, r1
 8008200:	2001      	movs	r0, #1
 8008202:	fb0c 3202 	mla	r2, ip, r2, r3
 8008206:	e7a8      	b.n	800815a <_vfiprintf_r+0xfe>
 8008208:	2300      	movs	r3, #0
 800820a:	f04f 0c0a 	mov.w	ip, #10
 800820e:	4619      	mov	r1, r3
 8008210:	3401      	adds	r4, #1
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	4620      	mov	r0, r4
 8008216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821a:	3a30      	subs	r2, #48	@ 0x30
 800821c:	2a09      	cmp	r2, #9
 800821e:	d903      	bls.n	8008228 <_vfiprintf_r+0x1cc>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0c6      	beq.n	80081b2 <_vfiprintf_r+0x156>
 8008224:	9105      	str	r1, [sp, #20]
 8008226:	e7c4      	b.n	80081b2 <_vfiprintf_r+0x156>
 8008228:	4604      	mov	r4, r0
 800822a:	2301      	movs	r3, #1
 800822c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008230:	e7f0      	b.n	8008214 <_vfiprintf_r+0x1b8>
 8008232:	ab03      	add	r3, sp, #12
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	462a      	mov	r2, r5
 8008238:	4630      	mov	r0, r6
 800823a:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <_vfiprintf_r+0x22c>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	f7fd fcd3 	bl	8005be8 <_printf_float>
 8008242:	4607      	mov	r7, r0
 8008244:	1c78      	adds	r0, r7, #1
 8008246:	d1d6      	bne.n	80081f6 <_vfiprintf_r+0x19a>
 8008248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800824a:	07d9      	lsls	r1, r3, #31
 800824c:	d405      	bmi.n	800825a <_vfiprintf_r+0x1fe>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	059a      	lsls	r2, r3, #22
 8008252:	d402      	bmi.n	800825a <_vfiprintf_r+0x1fe>
 8008254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008256:	f7fe fa8b 	bl	8006770 <__retarget_lock_release_recursive>
 800825a:	89ab      	ldrh	r3, [r5, #12]
 800825c:	065b      	lsls	r3, r3, #25
 800825e:	f53f af1f 	bmi.w	80080a0 <_vfiprintf_r+0x44>
 8008262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008264:	e71e      	b.n	80080a4 <_vfiprintf_r+0x48>
 8008266:	ab03      	add	r3, sp, #12
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	462a      	mov	r2, r5
 800826c:	4630      	mov	r0, r6
 800826e:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <_vfiprintf_r+0x22c>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	f7fd ff57 	bl	8006124 <_printf_i>
 8008276:	e7e4      	b.n	8008242 <_vfiprintf_r+0x1e6>
 8008278:	08009b89 	.word	0x08009b89
 800827c:	08009b8f 	.word	0x08009b8f
 8008280:	08009b93 	.word	0x08009b93
 8008284:	08005be9 	.word	0x08005be9
 8008288:	08008037 	.word	0x08008037

0800828c <__sflush_r>:
 800828c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	0716      	lsls	r6, r2, #28
 8008294:	4605      	mov	r5, r0
 8008296:	460c      	mov	r4, r1
 8008298:	d454      	bmi.n	8008344 <__sflush_r+0xb8>
 800829a:	684b      	ldr	r3, [r1, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc02      	bgt.n	80082a6 <__sflush_r+0x1a>
 80082a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dd48      	ble.n	8008338 <__sflush_r+0xac>
 80082a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	d045      	beq.n	8008338 <__sflush_r+0xac>
 80082ac:	2300      	movs	r3, #0
 80082ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082b2:	682f      	ldr	r7, [r5, #0]
 80082b4:	6a21      	ldr	r1, [r4, #32]
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	d030      	beq.n	800831c <__sflush_r+0x90>
 80082ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	0759      	lsls	r1, r3, #29
 80082c0:	d505      	bpl.n	80082ce <__sflush_r+0x42>
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082c8:	b10b      	cbz	r3, 80082ce <__sflush_r+0x42>
 80082ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	2300      	movs	r3, #0
 80082d0:	4628      	mov	r0, r5
 80082d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d4:	6a21      	ldr	r1, [r4, #32]
 80082d6:	47b0      	blx	r6
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	d106      	bne.n	80082ec <__sflush_r+0x60>
 80082de:	6829      	ldr	r1, [r5, #0]
 80082e0:	291d      	cmp	r1, #29
 80082e2:	d82b      	bhi.n	800833c <__sflush_r+0xb0>
 80082e4:	4a28      	ldr	r2, [pc, #160]	@ (8008388 <__sflush_r+0xfc>)
 80082e6:	410a      	asrs	r2, r1
 80082e8:	07d6      	lsls	r6, r2, #31
 80082ea:	d427      	bmi.n	800833c <__sflush_r+0xb0>
 80082ec:	2200      	movs	r2, #0
 80082ee:	6062      	str	r2, [r4, #4]
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	04d9      	lsls	r1, r3, #19
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	d504      	bpl.n	8008302 <__sflush_r+0x76>
 80082f8:	1c42      	adds	r2, r0, #1
 80082fa:	d101      	bne.n	8008300 <__sflush_r+0x74>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b903      	cbnz	r3, 8008302 <__sflush_r+0x76>
 8008300:	6560      	str	r0, [r4, #84]	@ 0x54
 8008302:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008304:	602f      	str	r7, [r5, #0]
 8008306:	b1b9      	cbz	r1, 8008338 <__sflush_r+0xac>
 8008308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830c:	4299      	cmp	r1, r3
 800830e:	d002      	beq.n	8008316 <__sflush_r+0x8a>
 8008310:	4628      	mov	r0, r5
 8008312:	f7ff f8a5 	bl	8007460 <_free_r>
 8008316:	2300      	movs	r3, #0
 8008318:	6363      	str	r3, [r4, #52]	@ 0x34
 800831a:	e00d      	b.n	8008338 <__sflush_r+0xac>
 800831c:	2301      	movs	r3, #1
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	4602      	mov	r2, r0
 8008324:	1c50      	adds	r0, r2, #1
 8008326:	d1c9      	bne.n	80082bc <__sflush_r+0x30>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c6      	beq.n	80082bc <__sflush_r+0x30>
 800832e:	2b1d      	cmp	r3, #29
 8008330:	d001      	beq.n	8008336 <__sflush_r+0xaa>
 8008332:	2b16      	cmp	r3, #22
 8008334:	d11d      	bne.n	8008372 <__sflush_r+0xe6>
 8008336:	602f      	str	r7, [r5, #0]
 8008338:	2000      	movs	r0, #0
 800833a:	e021      	b.n	8008380 <__sflush_r+0xf4>
 800833c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008340:	b21b      	sxth	r3, r3
 8008342:	e01a      	b.n	800837a <__sflush_r+0xee>
 8008344:	690f      	ldr	r7, [r1, #16]
 8008346:	2f00      	cmp	r7, #0
 8008348:	d0f6      	beq.n	8008338 <__sflush_r+0xac>
 800834a:	0793      	lsls	r3, r2, #30
 800834c:	bf18      	it	ne
 800834e:	2300      	movne	r3, #0
 8008350:	680e      	ldr	r6, [r1, #0]
 8008352:	bf08      	it	eq
 8008354:	694b      	ldreq	r3, [r1, #20]
 8008356:	1bf6      	subs	r6, r6, r7
 8008358:	600f      	str	r7, [r1, #0]
 800835a:	608b      	str	r3, [r1, #8]
 800835c:	2e00      	cmp	r6, #0
 800835e:	ddeb      	ble.n	8008338 <__sflush_r+0xac>
 8008360:	4633      	mov	r3, r6
 8008362:	463a      	mov	r2, r7
 8008364:	4628      	mov	r0, r5
 8008366:	6a21      	ldr	r1, [r4, #32]
 8008368:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800836c:	47e0      	blx	ip
 800836e:	2800      	cmp	r0, #0
 8008370:	dc07      	bgt.n	8008382 <__sflush_r+0xf6>
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008382:	4407      	add	r7, r0
 8008384:	1a36      	subs	r6, r6, r0
 8008386:	e7e9      	b.n	800835c <__sflush_r+0xd0>
 8008388:	dfbffffe 	.word	0xdfbffffe

0800838c <_fflush_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	690b      	ldr	r3, [r1, #16]
 8008390:	4605      	mov	r5, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b913      	cbnz	r3, 800839c <_fflush_r+0x10>
 8008396:	2500      	movs	r5, #0
 8008398:	4628      	mov	r0, r5
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	b118      	cbz	r0, 80083a6 <_fflush_r+0x1a>
 800839e:	6a03      	ldr	r3, [r0, #32]
 80083a0:	b90b      	cbnz	r3, 80083a6 <_fflush_r+0x1a>
 80083a2:	f7fe f86b 	bl	800647c <__sinit>
 80083a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f3      	beq.n	8008396 <_fflush_r+0xa>
 80083ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b0:	07d0      	lsls	r0, r2, #31
 80083b2:	d404      	bmi.n	80083be <_fflush_r+0x32>
 80083b4:	0599      	lsls	r1, r3, #22
 80083b6:	d402      	bmi.n	80083be <_fflush_r+0x32>
 80083b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083ba:	f7fe f9d8 	bl	800676e <__retarget_lock_acquire_recursive>
 80083be:	4628      	mov	r0, r5
 80083c0:	4621      	mov	r1, r4
 80083c2:	f7ff ff63 	bl	800828c <__sflush_r>
 80083c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083c8:	4605      	mov	r5, r0
 80083ca:	07da      	lsls	r2, r3, #31
 80083cc:	d4e4      	bmi.n	8008398 <_fflush_r+0xc>
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	059b      	lsls	r3, r3, #22
 80083d2:	d4e1      	bmi.n	8008398 <_fflush_r+0xc>
 80083d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083d6:	f7fe f9cb 	bl	8006770 <__retarget_lock_release_recursive>
 80083da:	e7dd      	b.n	8008398 <_fflush_r+0xc>

080083dc <__swbuf_r>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	460e      	mov	r6, r1
 80083e0:	4614      	mov	r4, r2
 80083e2:	4605      	mov	r5, r0
 80083e4:	b118      	cbz	r0, 80083ee <__swbuf_r+0x12>
 80083e6:	6a03      	ldr	r3, [r0, #32]
 80083e8:	b90b      	cbnz	r3, 80083ee <__swbuf_r+0x12>
 80083ea:	f7fe f847 	bl	800647c <__sinit>
 80083ee:	69a3      	ldr	r3, [r4, #24]
 80083f0:	60a3      	str	r3, [r4, #8]
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	071a      	lsls	r2, r3, #28
 80083f6:	d501      	bpl.n	80083fc <__swbuf_r+0x20>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	b943      	cbnz	r3, 800840e <__swbuf_r+0x32>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 f82a 	bl	8008458 <__swsetup_r>
 8008404:	b118      	cbz	r0, 800840e <__swbuf_r+0x32>
 8008406:	f04f 37ff 	mov.w	r7, #4294967295
 800840a:	4638      	mov	r0, r7
 800840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	6922      	ldr	r2, [r4, #16]
 8008412:	b2f6      	uxtb	r6, r6
 8008414:	1a98      	subs	r0, r3, r2
 8008416:	6963      	ldr	r3, [r4, #20]
 8008418:	4637      	mov	r7, r6
 800841a:	4283      	cmp	r3, r0
 800841c:	dc05      	bgt.n	800842a <__swbuf_r+0x4e>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f7ff ffb3 	bl	800838c <_fflush_r>
 8008426:	2800      	cmp	r0, #0
 8008428:	d1ed      	bne.n	8008406 <__swbuf_r+0x2a>
 800842a:	68a3      	ldr	r3, [r4, #8]
 800842c:	3b01      	subs	r3, #1
 800842e:	60a3      	str	r3, [r4, #8]
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	6022      	str	r2, [r4, #0]
 8008436:	701e      	strb	r6, [r3, #0]
 8008438:	6962      	ldr	r2, [r4, #20]
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	429a      	cmp	r2, r3
 800843e:	d004      	beq.n	800844a <__swbuf_r+0x6e>
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	07db      	lsls	r3, r3, #31
 8008444:	d5e1      	bpl.n	800840a <__swbuf_r+0x2e>
 8008446:	2e0a      	cmp	r6, #10
 8008448:	d1df      	bne.n	800840a <__swbuf_r+0x2e>
 800844a:	4621      	mov	r1, r4
 800844c:	4628      	mov	r0, r5
 800844e:	f7ff ff9d 	bl	800838c <_fflush_r>
 8008452:	2800      	cmp	r0, #0
 8008454:	d0d9      	beq.n	800840a <__swbuf_r+0x2e>
 8008456:	e7d6      	b.n	8008406 <__swbuf_r+0x2a>

08008458 <__swsetup_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <__swsetup_r+0xa8>)
 800845c:	4605      	mov	r5, r0
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	460c      	mov	r4, r1
 8008462:	b118      	cbz	r0, 800846c <__swsetup_r+0x14>
 8008464:	6a03      	ldr	r3, [r0, #32]
 8008466:	b90b      	cbnz	r3, 800846c <__swsetup_r+0x14>
 8008468:	f7fe f808 	bl	800647c <__sinit>
 800846c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008470:	0719      	lsls	r1, r3, #28
 8008472:	d422      	bmi.n	80084ba <__swsetup_r+0x62>
 8008474:	06da      	lsls	r2, r3, #27
 8008476:	d407      	bmi.n	8008488 <__swsetup_r+0x30>
 8008478:	2209      	movs	r2, #9
 800847a:	602a      	str	r2, [r5, #0]
 800847c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	e033      	b.n	80084f0 <__swsetup_r+0x98>
 8008488:	0758      	lsls	r0, r3, #29
 800848a:	d512      	bpl.n	80084b2 <__swsetup_r+0x5a>
 800848c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800848e:	b141      	cbz	r1, 80084a2 <__swsetup_r+0x4a>
 8008490:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008494:	4299      	cmp	r1, r3
 8008496:	d002      	beq.n	800849e <__swsetup_r+0x46>
 8008498:	4628      	mov	r0, r5
 800849a:	f7fe ffe1 	bl	8007460 <_free_r>
 800849e:	2300      	movs	r3, #0
 80084a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	2300      	movs	r3, #0
 80084ac:	6063      	str	r3, [r4, #4]
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	f043 0308 	orr.w	r3, r3, #8
 80084b8:	81a3      	strh	r3, [r4, #12]
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	b94b      	cbnz	r3, 80084d2 <__swsetup_r+0x7a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c8:	d003      	beq.n	80084d2 <__swsetup_r+0x7a>
 80084ca:	4621      	mov	r1, r4
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f8fa 	bl	80086c6 <__smakebuf_r>
 80084d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d6:	f013 0201 	ands.w	r2, r3, #1
 80084da:	d00a      	beq.n	80084f2 <__swsetup_r+0x9a>
 80084dc:	2200      	movs	r2, #0
 80084de:	60a2      	str	r2, [r4, #8]
 80084e0:	6962      	ldr	r2, [r4, #20]
 80084e2:	4252      	negs	r2, r2
 80084e4:	61a2      	str	r2, [r4, #24]
 80084e6:	6922      	ldr	r2, [r4, #16]
 80084e8:	b942      	cbnz	r2, 80084fc <__swsetup_r+0xa4>
 80084ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084ee:	d1c5      	bne.n	800847c <__swsetup_r+0x24>
 80084f0:	bd38      	pop	{r3, r4, r5, pc}
 80084f2:	0799      	lsls	r1, r3, #30
 80084f4:	bf58      	it	pl
 80084f6:	6962      	ldrpl	r2, [r4, #20]
 80084f8:	60a2      	str	r2, [r4, #8]
 80084fa:	e7f4      	b.n	80084e6 <__swsetup_r+0x8e>
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7f7      	b.n	80084f0 <__swsetup_r+0x98>
 8008500:	20000010 	.word	0x20000010

08008504 <memmove>:
 8008504:	4288      	cmp	r0, r1
 8008506:	b510      	push	{r4, lr}
 8008508:	eb01 0402 	add.w	r4, r1, r2
 800850c:	d902      	bls.n	8008514 <memmove+0x10>
 800850e:	4284      	cmp	r4, r0
 8008510:	4623      	mov	r3, r4
 8008512:	d807      	bhi.n	8008524 <memmove+0x20>
 8008514:	1e43      	subs	r3, r0, #1
 8008516:	42a1      	cmp	r1, r4
 8008518:	d008      	beq.n	800852c <memmove+0x28>
 800851a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008522:	e7f8      	b.n	8008516 <memmove+0x12>
 8008524:	4601      	mov	r1, r0
 8008526:	4402      	add	r2, r0
 8008528:	428a      	cmp	r2, r1
 800852a:	d100      	bne.n	800852e <memmove+0x2a>
 800852c:	bd10      	pop	{r4, pc}
 800852e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008536:	e7f7      	b.n	8008528 <memmove+0x24>

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	2300      	movs	r3, #0
 800853c:	4d05      	ldr	r5, [pc, #20]	@ (8008554 <_sbrk_r+0x1c>)
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7fa f91e 	bl	8002784 <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	200004dc 	.word	0x200004dc

08008558 <__assert_func>:
 8008558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800855a:	4614      	mov	r4, r2
 800855c:	461a      	mov	r2, r3
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <__assert_func+0x2c>)
 8008560:	4605      	mov	r5, r0
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68d8      	ldr	r0, [r3, #12]
 8008566:	b954      	cbnz	r4, 800857e <__assert_func+0x26>
 8008568:	4b07      	ldr	r3, [pc, #28]	@ (8008588 <__assert_func+0x30>)
 800856a:	461c      	mov	r4, r3
 800856c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008570:	9100      	str	r1, [sp, #0]
 8008572:	462b      	mov	r3, r5
 8008574:	4905      	ldr	r1, [pc, #20]	@ (800858c <__assert_func+0x34>)
 8008576:	f000 f86f 	bl	8008658 <fiprintf>
 800857a:	f000 f903 	bl	8008784 <abort>
 800857e:	4b04      	ldr	r3, [pc, #16]	@ (8008590 <__assert_func+0x38>)
 8008580:	e7f4      	b.n	800856c <__assert_func+0x14>
 8008582:	bf00      	nop
 8008584:	20000010 	.word	0x20000010
 8008588:	08009bdf 	.word	0x08009bdf
 800858c:	08009bb1 	.word	0x08009bb1
 8008590:	08009ba4 	.word	0x08009ba4

08008594 <_calloc_r>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	fba1 5402 	umull	r5, r4, r1, r2
 800859a:	b93c      	cbnz	r4, 80085ac <_calloc_r+0x18>
 800859c:	4629      	mov	r1, r5
 800859e:	f7fe ffd1 	bl	8007544 <_malloc_r>
 80085a2:	4606      	mov	r6, r0
 80085a4:	b928      	cbnz	r0, 80085b2 <_calloc_r+0x1e>
 80085a6:	2600      	movs	r6, #0
 80085a8:	4630      	mov	r0, r6
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	220c      	movs	r2, #12
 80085ae:	6002      	str	r2, [r0, #0]
 80085b0:	e7f9      	b.n	80085a6 <_calloc_r+0x12>
 80085b2:	462a      	mov	r2, r5
 80085b4:	4621      	mov	r1, r4
 80085b6:	f7fe f80c 	bl	80065d2 <memset>
 80085ba:	e7f5      	b.n	80085a8 <_calloc_r+0x14>

080085bc <__ascii_mbtowc>:
 80085bc:	b082      	sub	sp, #8
 80085be:	b901      	cbnz	r1, 80085c2 <__ascii_mbtowc+0x6>
 80085c0:	a901      	add	r1, sp, #4
 80085c2:	b142      	cbz	r2, 80085d6 <__ascii_mbtowc+0x1a>
 80085c4:	b14b      	cbz	r3, 80085da <__ascii_mbtowc+0x1e>
 80085c6:	7813      	ldrb	r3, [r2, #0]
 80085c8:	600b      	str	r3, [r1, #0]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	1e10      	subs	r0, r2, #0
 80085ce:	bf18      	it	ne
 80085d0:	2001      	movne	r0, #1
 80085d2:	b002      	add	sp, #8
 80085d4:	4770      	bx	lr
 80085d6:	4610      	mov	r0, r2
 80085d8:	e7fb      	b.n	80085d2 <__ascii_mbtowc+0x16>
 80085da:	f06f 0001 	mvn.w	r0, #1
 80085de:	e7f8      	b.n	80085d2 <__ascii_mbtowc+0x16>

080085e0 <_realloc_r>:
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	4680      	mov	r8, r0
 80085e6:	4615      	mov	r5, r2
 80085e8:	460c      	mov	r4, r1
 80085ea:	b921      	cbnz	r1, 80085f6 <_realloc_r+0x16>
 80085ec:	4611      	mov	r1, r2
 80085ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f2:	f7fe bfa7 	b.w	8007544 <_malloc_r>
 80085f6:	b92a      	cbnz	r2, 8008604 <_realloc_r+0x24>
 80085f8:	f7fe ff32 	bl	8007460 <_free_r>
 80085fc:	2400      	movs	r4, #0
 80085fe:	4620      	mov	r0, r4
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008604:	f000 f8c5 	bl	8008792 <_malloc_usable_size_r>
 8008608:	4285      	cmp	r5, r0
 800860a:	4606      	mov	r6, r0
 800860c:	d802      	bhi.n	8008614 <_realloc_r+0x34>
 800860e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008612:	d8f4      	bhi.n	80085fe <_realloc_r+0x1e>
 8008614:	4629      	mov	r1, r5
 8008616:	4640      	mov	r0, r8
 8008618:	f7fe ff94 	bl	8007544 <_malloc_r>
 800861c:	4607      	mov	r7, r0
 800861e:	2800      	cmp	r0, #0
 8008620:	d0ec      	beq.n	80085fc <_realloc_r+0x1c>
 8008622:	42b5      	cmp	r5, r6
 8008624:	462a      	mov	r2, r5
 8008626:	4621      	mov	r1, r4
 8008628:	bf28      	it	cs
 800862a:	4632      	movcs	r2, r6
 800862c:	f7fe f8b7 	bl	800679e <memcpy>
 8008630:	4621      	mov	r1, r4
 8008632:	4640      	mov	r0, r8
 8008634:	f7fe ff14 	bl	8007460 <_free_r>
 8008638:	463c      	mov	r4, r7
 800863a:	e7e0      	b.n	80085fe <_realloc_r+0x1e>

0800863c <__ascii_wctomb>:
 800863c:	4603      	mov	r3, r0
 800863e:	4608      	mov	r0, r1
 8008640:	b141      	cbz	r1, 8008654 <__ascii_wctomb+0x18>
 8008642:	2aff      	cmp	r2, #255	@ 0xff
 8008644:	d904      	bls.n	8008650 <__ascii_wctomb+0x14>
 8008646:	228a      	movs	r2, #138	@ 0x8a
 8008648:	f04f 30ff 	mov.w	r0, #4294967295
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	4770      	bx	lr
 8008650:	2001      	movs	r0, #1
 8008652:	700a      	strb	r2, [r1, #0]
 8008654:	4770      	bx	lr
	...

08008658 <fiprintf>:
 8008658:	b40e      	push	{r1, r2, r3}
 800865a:	b503      	push	{r0, r1, lr}
 800865c:	4601      	mov	r1, r0
 800865e:	ab03      	add	r3, sp, #12
 8008660:	4805      	ldr	r0, [pc, #20]	@ (8008678 <fiprintf+0x20>)
 8008662:	f853 2b04 	ldr.w	r2, [r3], #4
 8008666:	6800      	ldr	r0, [r0, #0]
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	f7ff fcf7 	bl	800805c <_vfiprintf_r>
 800866e:	b002      	add	sp, #8
 8008670:	f85d eb04 	ldr.w	lr, [sp], #4
 8008674:	b003      	add	sp, #12
 8008676:	4770      	bx	lr
 8008678:	20000010 	.word	0x20000010

0800867c <__swhatbuf_r>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	460c      	mov	r4, r1
 8008680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008684:	4615      	mov	r5, r2
 8008686:	2900      	cmp	r1, #0
 8008688:	461e      	mov	r6, r3
 800868a:	b096      	sub	sp, #88	@ 0x58
 800868c:	da0c      	bge.n	80086a8 <__swhatbuf_r+0x2c>
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	2100      	movs	r1, #0
 8008692:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008696:	bf14      	ite	ne
 8008698:	2340      	movne	r3, #64	@ 0x40
 800869a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800869e:	2000      	movs	r0, #0
 80086a0:	6031      	str	r1, [r6, #0]
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	b016      	add	sp, #88	@ 0x58
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	466a      	mov	r2, sp
 80086aa:	f000 f849 	bl	8008740 <_fstat_r>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	dbed      	blt.n	800868e <__swhatbuf_r+0x12>
 80086b2:	9901      	ldr	r1, [sp, #4]
 80086b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086bc:	4259      	negs	r1, r3
 80086be:	4159      	adcs	r1, r3
 80086c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086c4:	e7eb      	b.n	800869e <__swhatbuf_r+0x22>

080086c6 <__smakebuf_r>:
 80086c6:	898b      	ldrh	r3, [r1, #12]
 80086c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ca:	079d      	lsls	r5, r3, #30
 80086cc:	4606      	mov	r6, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	d507      	bpl.n	80086e2 <__smakebuf_r+0x1c>
 80086d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	2301      	movs	r3, #1
 80086dc:	6163      	str	r3, [r4, #20]
 80086de:	b003      	add	sp, #12
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	466a      	mov	r2, sp
 80086e4:	ab01      	add	r3, sp, #4
 80086e6:	f7ff ffc9 	bl	800867c <__swhatbuf_r>
 80086ea:	9f00      	ldr	r7, [sp, #0]
 80086ec:	4605      	mov	r5, r0
 80086ee:	4639      	mov	r1, r7
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7fe ff27 	bl	8007544 <_malloc_r>
 80086f6:	b948      	cbnz	r0, 800870c <__smakebuf_r+0x46>
 80086f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fc:	059a      	lsls	r2, r3, #22
 80086fe:	d4ee      	bmi.n	80086de <__smakebuf_r+0x18>
 8008700:	f023 0303 	bic.w	r3, r3, #3
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	e7e2      	b.n	80086d2 <__smakebuf_r+0xc>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	9b01      	ldr	r3, [sp, #4]
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	b15b      	cbz	r3, 8008736 <__smakebuf_r+0x70>
 800871e:	4630      	mov	r0, r6
 8008720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008724:	f000 f81e 	bl	8008764 <_isatty_r>
 8008728:	b128      	cbz	r0, 8008736 <__smakebuf_r+0x70>
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f023 0303 	bic.w	r3, r3, #3
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	431d      	orrs	r5, r3
 800873a:	81a5      	strh	r5, [r4, #12]
 800873c:	e7cf      	b.n	80086de <__smakebuf_r+0x18>
	...

08008740 <_fstat_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	2300      	movs	r3, #0
 8008744:	4d06      	ldr	r5, [pc, #24]	@ (8008760 <_fstat_r+0x20>)
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f7f9 fff3 	bl	8002738 <_fstat>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d102      	bne.n	800875c <_fstat_r+0x1c>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b103      	cbz	r3, 800875c <_fstat_r+0x1c>
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	200004dc 	.word	0x200004dc

08008764 <_isatty_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	2300      	movs	r3, #0
 8008768:	4d05      	ldr	r5, [pc, #20]	@ (8008780 <_isatty_r+0x1c>)
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	f7f9 fff1 	bl	8002756 <_isatty>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d102      	bne.n	800877e <_isatty_r+0x1a>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b103      	cbz	r3, 800877e <_isatty_r+0x1a>
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	200004dc 	.word	0x200004dc

08008784 <abort>:
 8008784:	2006      	movs	r0, #6
 8008786:	b508      	push	{r3, lr}
 8008788:	f000 f834 	bl	80087f4 <raise>
 800878c:	2001      	movs	r0, #1
 800878e:	f7f9 ff84 	bl	800269a <_exit>

08008792 <_malloc_usable_size_r>:
 8008792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008796:	1f18      	subs	r0, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfbc      	itt	lt
 800879c:	580b      	ldrlt	r3, [r1, r0]
 800879e:	18c0      	addlt	r0, r0, r3
 80087a0:	4770      	bx	lr

080087a2 <_raise_r>:
 80087a2:	291f      	cmp	r1, #31
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4605      	mov	r5, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	d904      	bls.n	80087b6 <_raise_r+0x14>
 80087ac:	2316      	movs	r3, #22
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	f04f 30ff 	mov.w	r0, #4294967295
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087b8:	b112      	cbz	r2, 80087c0 <_raise_r+0x1e>
 80087ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087be:	b94b      	cbnz	r3, 80087d4 <_raise_r+0x32>
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 f831 	bl	8008828 <_getpid_r>
 80087c6:	4622      	mov	r2, r4
 80087c8:	4601      	mov	r1, r0
 80087ca:	4628      	mov	r0, r5
 80087cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d0:	f000 b818 	b.w	8008804 <_kill_r>
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d00a      	beq.n	80087ee <_raise_r+0x4c>
 80087d8:	1c59      	adds	r1, r3, #1
 80087da:	d103      	bne.n	80087e4 <_raise_r+0x42>
 80087dc:	2316      	movs	r3, #22
 80087de:	6003      	str	r3, [r0, #0]
 80087e0:	2001      	movs	r0, #1
 80087e2:	e7e7      	b.n	80087b4 <_raise_r+0x12>
 80087e4:	2100      	movs	r1, #0
 80087e6:	4620      	mov	r0, r4
 80087e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80087ec:	4798      	blx	r3
 80087ee:	2000      	movs	r0, #0
 80087f0:	e7e0      	b.n	80087b4 <_raise_r+0x12>
	...

080087f4 <raise>:
 80087f4:	4b02      	ldr	r3, [pc, #8]	@ (8008800 <raise+0xc>)
 80087f6:	4601      	mov	r1, r0
 80087f8:	6818      	ldr	r0, [r3, #0]
 80087fa:	f7ff bfd2 	b.w	80087a2 <_raise_r>
 80087fe:	bf00      	nop
 8008800:	20000010 	.word	0x20000010

08008804 <_kill_r>:
 8008804:	b538      	push	{r3, r4, r5, lr}
 8008806:	2300      	movs	r3, #0
 8008808:	4d06      	ldr	r5, [pc, #24]	@ (8008824 <_kill_r+0x20>)
 800880a:	4604      	mov	r4, r0
 800880c:	4608      	mov	r0, r1
 800880e:	4611      	mov	r1, r2
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	f7f9 ff32 	bl	800267a <_kill>
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	d102      	bne.n	8008820 <_kill_r+0x1c>
 800881a:	682b      	ldr	r3, [r5, #0]
 800881c:	b103      	cbz	r3, 8008820 <_kill_r+0x1c>
 800881e:	6023      	str	r3, [r4, #0]
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	bf00      	nop
 8008824:	200004dc 	.word	0x200004dc

08008828 <_getpid_r>:
 8008828:	f7f9 bf20 	b.w	800266c <_getpid>

0800882c <sqrt>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	f000 f9b5 	bl	8008ba0 <__ieee754_sqrt>
 8008836:	4632      	mov	r2, r6
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	463b      	mov	r3, r7
 800883e:	4630      	mov	r0, r6
 8008840:	4639      	mov	r1, r7
 8008842:	f7f8 f8f3 	bl	8000a2c <__aeabi_dcmpun>
 8008846:	b990      	cbnz	r0, 800886e <sqrt+0x42>
 8008848:	2200      	movs	r2, #0
 800884a:	2300      	movs	r3, #0
 800884c:	4630      	mov	r0, r6
 800884e:	4639      	mov	r1, r7
 8008850:	f7f8 f8c4 	bl	80009dc <__aeabi_dcmplt>
 8008854:	b158      	cbz	r0, 800886e <sqrt+0x42>
 8008856:	f7fd ff5f 	bl	8006718 <__errno>
 800885a:	2321      	movs	r3, #33	@ 0x21
 800885c:	2200      	movs	r2, #0
 800885e:	6003      	str	r3, [r0, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	4610      	mov	r0, r2
 8008864:	4619      	mov	r1, r3
 8008866:	f7f7 ff71 	bl	800074c <__aeabi_ddiv>
 800886a:	4604      	mov	r4, r0
 800886c:	460d      	mov	r5, r1
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008874:	0000      	movs	r0, r0
	...

08008878 <atan>:
 8008878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	4bbc      	ldr	r3, [pc, #752]	@ (8008b70 <atan+0x2f8>)
 800887e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008882:	429e      	cmp	r6, r3
 8008884:	4604      	mov	r4, r0
 8008886:	460d      	mov	r5, r1
 8008888:	468b      	mov	fp, r1
 800888a:	d918      	bls.n	80088be <atan+0x46>
 800888c:	4bb9      	ldr	r3, [pc, #740]	@ (8008b74 <atan+0x2fc>)
 800888e:	429e      	cmp	r6, r3
 8008890:	d801      	bhi.n	8008896 <atan+0x1e>
 8008892:	d109      	bne.n	80088a8 <atan+0x30>
 8008894:	b140      	cbz	r0, 80088a8 <atan+0x30>
 8008896:	4622      	mov	r2, r4
 8008898:	462b      	mov	r3, r5
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fc75 	bl	800018c <__adddf3>
 80088a2:	4604      	mov	r4, r0
 80088a4:	460d      	mov	r5, r1
 80088a6:	e006      	b.n	80088b6 <atan+0x3e>
 80088a8:	f1bb 0f00 	cmp.w	fp, #0
 80088ac:	f340 8123 	ble.w	8008af6 <atan+0x27e>
 80088b0:	a593      	add	r5, pc, #588	@ (adr r5, 8008b00 <atan+0x288>)
 80088b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088be:	4bae      	ldr	r3, [pc, #696]	@ (8008b78 <atan+0x300>)
 80088c0:	429e      	cmp	r6, r3
 80088c2:	d811      	bhi.n	80088e8 <atan+0x70>
 80088c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80088c8:	429e      	cmp	r6, r3
 80088ca:	d80a      	bhi.n	80088e2 <atan+0x6a>
 80088cc:	a38e      	add	r3, pc, #568	@ (adr r3, 8008b08 <atan+0x290>)
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	f7f7 fc5b 	bl	800018c <__adddf3>
 80088d6:	2200      	movs	r2, #0
 80088d8:	4ba8      	ldr	r3, [pc, #672]	@ (8008b7c <atan+0x304>)
 80088da:	f7f8 f89d 	bl	8000a18 <__aeabi_dcmpgt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d1e9      	bne.n	80088b6 <atan+0x3e>
 80088e2:	f04f 3aff 	mov.w	sl, #4294967295
 80088e6:	e027      	b.n	8008938 <atan+0xc0>
 80088e8:	f000 f956 	bl	8008b98 <fabs>
 80088ec:	4ba4      	ldr	r3, [pc, #656]	@ (8008b80 <atan+0x308>)
 80088ee:	4604      	mov	r4, r0
 80088f0:	429e      	cmp	r6, r3
 80088f2:	460d      	mov	r5, r1
 80088f4:	f200 80b8 	bhi.w	8008a68 <atan+0x1f0>
 80088f8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80088fc:	429e      	cmp	r6, r3
 80088fe:	f200 809c 	bhi.w	8008a3a <atan+0x1c2>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	f7f7 fc41 	bl	800018c <__adddf3>
 800890a:	2200      	movs	r2, #0
 800890c:	4b9b      	ldr	r3, [pc, #620]	@ (8008b7c <atan+0x304>)
 800890e:	f7f7 fc3b 	bl	8000188 <__aeabi_dsub>
 8008912:	2200      	movs	r2, #0
 8008914:	4606      	mov	r6, r0
 8008916:	460f      	mov	r7, r1
 8008918:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800891c:	4620      	mov	r0, r4
 800891e:	4629      	mov	r1, r5
 8008920:	f7f7 fc34 	bl	800018c <__adddf3>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	f7f7 ff0e 	bl	800074c <__aeabi_ddiv>
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	4604      	mov	r4, r0
 8008936:	460d      	mov	r5, r1
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	4620      	mov	r0, r4
 800893e:	4629      	mov	r1, r5
 8008940:	f7f7 fdda 	bl	80004f8 <__aeabi_dmul>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4680      	mov	r8, r0
 800894a:	4689      	mov	r9, r1
 800894c:	f7f7 fdd4 	bl	80004f8 <__aeabi_dmul>
 8008950:	a36f      	add	r3, pc, #444	@ (adr r3, 8008b10 <atan+0x298>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	f7f7 fdcd 	bl	80004f8 <__aeabi_dmul>
 800895e:	a36e      	add	r3, pc, #440	@ (adr r3, 8008b18 <atan+0x2a0>)
 8008960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008964:	f7f7 fc12 	bl	800018c <__adddf3>
 8008968:	4632      	mov	r2, r6
 800896a:	463b      	mov	r3, r7
 800896c:	f7f7 fdc4 	bl	80004f8 <__aeabi_dmul>
 8008970:	a36b      	add	r3, pc, #428	@ (adr r3, 8008b20 <atan+0x2a8>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fc09 	bl	800018c <__adddf3>
 800897a:	4632      	mov	r2, r6
 800897c:	463b      	mov	r3, r7
 800897e:	f7f7 fdbb 	bl	80004f8 <__aeabi_dmul>
 8008982:	a369      	add	r3, pc, #420	@ (adr r3, 8008b28 <atan+0x2b0>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f7f7 fc00 	bl	800018c <__adddf3>
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	f7f7 fdb2 	bl	80004f8 <__aeabi_dmul>
 8008994:	a366      	add	r3, pc, #408	@ (adr r3, 8008b30 <atan+0x2b8>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f7f7 fbf7 	bl	800018c <__adddf3>
 800899e:	4632      	mov	r2, r6
 80089a0:	463b      	mov	r3, r7
 80089a2:	f7f7 fda9 	bl	80004f8 <__aeabi_dmul>
 80089a6:	a364      	add	r3, pc, #400	@ (adr r3, 8008b38 <atan+0x2c0>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f7 fbee 	bl	800018c <__adddf3>
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	f7f7 fda0 	bl	80004f8 <__aeabi_dmul>
 80089b8:	a361      	add	r3, pc, #388	@ (adr r3, 8008b40 <atan+0x2c8>)
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	4680      	mov	r8, r0
 80089c0:	4689      	mov	r9, r1
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fd97 	bl	80004f8 <__aeabi_dmul>
 80089ca:	a35f      	add	r3, pc, #380	@ (adr r3, 8008b48 <atan+0x2d0>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	f7f7 fbda 	bl	8000188 <__aeabi_dsub>
 80089d4:	4632      	mov	r2, r6
 80089d6:	463b      	mov	r3, r7
 80089d8:	f7f7 fd8e 	bl	80004f8 <__aeabi_dmul>
 80089dc:	a35c      	add	r3, pc, #368	@ (adr r3, 8008b50 <atan+0x2d8>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fbd1 	bl	8000188 <__aeabi_dsub>
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	f7f7 fd85 	bl	80004f8 <__aeabi_dmul>
 80089ee:	a35a      	add	r3, pc, #360	@ (adr r3, 8008b58 <atan+0x2e0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f7 fbc8 	bl	8000188 <__aeabi_dsub>
 80089f8:	4632      	mov	r2, r6
 80089fa:	463b      	mov	r3, r7
 80089fc:	f7f7 fd7c 	bl	80004f8 <__aeabi_dmul>
 8008a00:	a357      	add	r3, pc, #348	@ (adr r3, 8008b60 <atan+0x2e8>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fbbf 	bl	8000188 <__aeabi_dsub>
 8008a0a:	4632      	mov	r2, r6
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	f7f7 fd73 	bl	80004f8 <__aeabi_dmul>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	4640      	mov	r0, r8
 8008a18:	4649      	mov	r1, r9
 8008a1a:	f7f7 fbb7 	bl	800018c <__adddf3>
 8008a1e:	4622      	mov	r2, r4
 8008a20:	462b      	mov	r3, r5
 8008a22:	f7f7 fd69 	bl	80004f8 <__aeabi_dmul>
 8008a26:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	d144      	bne.n	8008aba <atan+0x242>
 8008a30:	4620      	mov	r0, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	f7f7 fba8 	bl	8000188 <__aeabi_dsub>
 8008a38:	e733      	b.n	80088a2 <atan+0x2a>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8008b7c <atan+0x304>)
 8008a3e:	f7f7 fba3 	bl	8000188 <__aeabi_dsub>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4606      	mov	r6, r0
 8008a46:	460f      	mov	r7, r1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8008b7c <atan+0x304>)
 8008a4e:	f7f7 fb9d 	bl	800018c <__adddf3>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fe77 	bl	800074c <__aeabi_ddiv>
 8008a5e:	f04f 0a01 	mov.w	sl, #1
 8008a62:	4604      	mov	r4, r0
 8008a64:	460d      	mov	r5, r1
 8008a66:	e767      	b.n	8008938 <atan+0xc0>
 8008a68:	4b46      	ldr	r3, [pc, #280]	@ (8008b84 <atan+0x30c>)
 8008a6a:	429e      	cmp	r6, r3
 8008a6c:	d21a      	bcs.n	8008aa4 <atan+0x22c>
 8008a6e:	2200      	movs	r2, #0
 8008a70:	4b45      	ldr	r3, [pc, #276]	@ (8008b88 <atan+0x310>)
 8008a72:	f7f7 fb89 	bl	8000188 <__aeabi_dsub>
 8008a76:	2200      	movs	r2, #0
 8008a78:	4606      	mov	r6, r0
 8008a7a:	460f      	mov	r7, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4b41      	ldr	r3, [pc, #260]	@ (8008b88 <atan+0x310>)
 8008a82:	f7f7 fd39 	bl	80004f8 <__aeabi_dmul>
 8008a86:	2200      	movs	r2, #0
 8008a88:	4b3c      	ldr	r3, [pc, #240]	@ (8008b7c <atan+0x304>)
 8008a8a:	f7f7 fb7f 	bl	800018c <__adddf3>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4630      	mov	r0, r6
 8008a94:	4639      	mov	r1, r7
 8008a96:	f7f7 fe59 	bl	800074c <__aeabi_ddiv>
 8008a9a:	f04f 0a02 	mov.w	sl, #2
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	e749      	b.n	8008938 <atan+0xc0>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4938      	ldr	r1, [pc, #224]	@ (8008b8c <atan+0x314>)
 8008aac:	f7f7 fe4e 	bl	800074c <__aeabi_ddiv>
 8008ab0:	f04f 0a03 	mov.w	sl, #3
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	460d      	mov	r5, r1
 8008ab8:	e73e      	b.n	8008938 <atan+0xc0>
 8008aba:	4b35      	ldr	r3, [pc, #212]	@ (8008b90 <atan+0x318>)
 8008abc:	4e35      	ldr	r6, [pc, #212]	@ (8008b94 <atan+0x31c>)
 8008abe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fb5f 	bl	8000188 <__aeabi_dsub>
 8008aca:	4622      	mov	r2, r4
 8008acc:	462b      	mov	r3, r5
 8008ace:	f7f7 fb5b 	bl	8000188 <__aeabi_dsub>
 8008ad2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008ade:	f7f7 fb53 	bl	8000188 <__aeabi_dsub>
 8008ae2:	f1bb 0f00 	cmp.w	fp, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	f6bf aee4 	bge.w	80088b6 <atan+0x3e>
 8008aee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008af2:	461d      	mov	r5, r3
 8008af4:	e6df      	b.n	80088b6 <atan+0x3e>
 8008af6:	a51c      	add	r5, pc, #112	@ (adr r5, 8008b68 <atan+0x2f0>)
 8008af8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008afc:	e6db      	b.n	80088b6 <atan+0x3e>
 8008afe:	bf00      	nop
 8008b00:	54442d18 	.word	0x54442d18
 8008b04:	3ff921fb 	.word	0x3ff921fb
 8008b08:	8800759c 	.word	0x8800759c
 8008b0c:	7e37e43c 	.word	0x7e37e43c
 8008b10:	e322da11 	.word	0xe322da11
 8008b14:	3f90ad3a 	.word	0x3f90ad3a
 8008b18:	24760deb 	.word	0x24760deb
 8008b1c:	3fa97b4b 	.word	0x3fa97b4b
 8008b20:	a0d03d51 	.word	0xa0d03d51
 8008b24:	3fb10d66 	.word	0x3fb10d66
 8008b28:	c54c206e 	.word	0xc54c206e
 8008b2c:	3fb745cd 	.word	0x3fb745cd
 8008b30:	920083ff 	.word	0x920083ff
 8008b34:	3fc24924 	.word	0x3fc24924
 8008b38:	5555550d 	.word	0x5555550d
 8008b3c:	3fd55555 	.word	0x3fd55555
 8008b40:	2c6a6c2f 	.word	0x2c6a6c2f
 8008b44:	bfa2b444 	.word	0xbfa2b444
 8008b48:	52defd9a 	.word	0x52defd9a
 8008b4c:	3fadde2d 	.word	0x3fadde2d
 8008b50:	af749a6d 	.word	0xaf749a6d
 8008b54:	3fb3b0f2 	.word	0x3fb3b0f2
 8008b58:	fe231671 	.word	0xfe231671
 8008b5c:	3fbc71c6 	.word	0x3fbc71c6
 8008b60:	9998ebc4 	.word	0x9998ebc4
 8008b64:	3fc99999 	.word	0x3fc99999
 8008b68:	54442d18 	.word	0x54442d18
 8008b6c:	bff921fb 	.word	0xbff921fb
 8008b70:	440fffff 	.word	0x440fffff
 8008b74:	7ff00000 	.word	0x7ff00000
 8008b78:	3fdbffff 	.word	0x3fdbffff
 8008b7c:	3ff00000 	.word	0x3ff00000
 8008b80:	3ff2ffff 	.word	0x3ff2ffff
 8008b84:	40038000 	.word	0x40038000
 8008b88:	3ff80000 	.word	0x3ff80000
 8008b8c:	bff00000 	.word	0xbff00000
 8008b90:	08009be0 	.word	0x08009be0
 8008b94:	08009c00 	.word	0x08009c00

08008b98 <fabs>:
 8008b98:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4770      	bx	lr

08008ba0 <__ieee754_sqrt>:
 8008ba0:	4a67      	ldr	r2, [pc, #412]	@ (8008d40 <__ieee754_sqrt+0x1a0>)
 8008ba2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba6:	438a      	bics	r2, r1
 8008ba8:	4606      	mov	r6, r0
 8008baa:	460f      	mov	r7, r1
 8008bac:	460b      	mov	r3, r1
 8008bae:	4604      	mov	r4, r0
 8008bb0:	d10e      	bne.n	8008bd0 <__ieee754_sqrt+0x30>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	f7f7 fca0 	bl	80004f8 <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 fae4 	bl	800018c <__adddf3>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	dc0c      	bgt.n	8008bee <__ieee754_sqrt+0x4e>
 8008bd4:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008bd8:	4302      	orrs	r2, r0
 8008bda:	d0f5      	beq.n	8008bc8 <__ieee754_sqrt+0x28>
 8008bdc:	b189      	cbz	r1, 8008c02 <__ieee754_sqrt+0x62>
 8008bde:	4602      	mov	r2, r0
 8008be0:	f7f7 fad2 	bl	8000188 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	f7f7 fdb0 	bl	800074c <__aeabi_ddiv>
 8008bec:	e7ea      	b.n	8008bc4 <__ieee754_sqrt+0x24>
 8008bee:	150a      	asrs	r2, r1, #20
 8008bf0:	d115      	bne.n	8008c1e <__ieee754_sqrt+0x7e>
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	e009      	b.n	8008c0a <__ieee754_sqrt+0x6a>
 8008bf6:	0ae3      	lsrs	r3, r4, #11
 8008bf8:	3a15      	subs	r2, #21
 8008bfa:	0564      	lsls	r4, r4, #21
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0fa      	beq.n	8008bf6 <__ieee754_sqrt+0x56>
 8008c00:	e7f7      	b.n	8008bf2 <__ieee754_sqrt+0x52>
 8008c02:	460a      	mov	r2, r1
 8008c04:	e7fa      	b.n	8008bfc <__ieee754_sqrt+0x5c>
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	3101      	adds	r1, #1
 8008c0a:	02d8      	lsls	r0, r3, #11
 8008c0c:	d5fb      	bpl.n	8008c06 <__ieee754_sqrt+0x66>
 8008c0e:	1e48      	subs	r0, r1, #1
 8008c10:	1a12      	subs	r2, r2, r0
 8008c12:	f1c1 0020 	rsb	r0, r1, #32
 8008c16:	fa24 f000 	lsr.w	r0, r4, r0
 8008c1a:	4303      	orrs	r3, r0
 8008c1c:	408c      	lsls	r4, r1
 8008c1e:	2600      	movs	r6, #0
 8008c20:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008c24:	2116      	movs	r1, #22
 8008c26:	07d2      	lsls	r2, r2, #31
 8008c28:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c36:	bf5c      	itt	pl
 8008c38:	005b      	lslpl	r3, r3, #1
 8008c3a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008c3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c42:	bf58      	it	pl
 8008c44:	0064      	lslpl	r4, r4, #1
 8008c46:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008c4a:	107f      	asrs	r7, r7, #1
 8008c4c:	0064      	lsls	r4, r4, #1
 8008c4e:	1815      	adds	r5, r2, r0
 8008c50:	429d      	cmp	r5, r3
 8008c52:	bfde      	ittt	le
 8008c54:	182a      	addle	r2, r5, r0
 8008c56:	1b5b      	suble	r3, r3, r5
 8008c58:	1836      	addle	r6, r6, r0
 8008c5a:	0fe5      	lsrs	r5, r4, #31
 8008c5c:	3901      	subs	r1, #1
 8008c5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008c62:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008c66:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008c6a:	d1f0      	bne.n	8008c4e <__ieee754_sqrt+0xae>
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	f04f 0a20 	mov.w	sl, #32
 8008c72:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008c76:	429a      	cmp	r2, r3
 8008c78:	eb01 0c00 	add.w	ip, r1, r0
 8008c7c:	db02      	blt.n	8008c84 <__ieee754_sqrt+0xe4>
 8008c7e:	d113      	bne.n	8008ca8 <__ieee754_sqrt+0x108>
 8008c80:	45a4      	cmp	ip, r4
 8008c82:	d811      	bhi.n	8008ca8 <__ieee754_sqrt+0x108>
 8008c84:	f1bc 0f00 	cmp.w	ip, #0
 8008c88:	eb0c 0100 	add.w	r1, ip, r0
 8008c8c:	da42      	bge.n	8008d14 <__ieee754_sqrt+0x174>
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	db40      	blt.n	8008d14 <__ieee754_sqrt+0x174>
 8008c92:	f102 0e01 	add.w	lr, r2, #1
 8008c96:	1a9b      	subs	r3, r3, r2
 8008c98:	4672      	mov	r2, lr
 8008c9a:	45a4      	cmp	ip, r4
 8008c9c:	bf88      	it	hi
 8008c9e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008ca2:	eba4 040c 	sub.w	r4, r4, ip
 8008ca6:	4405      	add	r5, r0
 8008ca8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8008cb0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008cb4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008cb8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008cbc:	d1db      	bne.n	8008c76 <__ieee754_sqrt+0xd6>
 8008cbe:	431c      	orrs	r4, r3
 8008cc0:	d01a      	beq.n	8008cf8 <__ieee754_sqrt+0x158>
 8008cc2:	4c20      	ldr	r4, [pc, #128]	@ (8008d44 <__ieee754_sqrt+0x1a4>)
 8008cc4:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008d48 <__ieee754_sqrt+0x1a8>
 8008cc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008ccc:	e9db 2300 	ldrd	r2, r3, [fp]
 8008cd0:	f7f7 fa5a 	bl	8000188 <__aeabi_dsub>
 8008cd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4649      	mov	r1, r9
 8008ce0:	f7f7 fe86 	bl	80009f0 <__aeabi_dcmple>
 8008ce4:	b140      	cbz	r0, 8008cf8 <__ieee754_sqrt+0x158>
 8008ce6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008cea:	e9db 2300 	ldrd	r2, r3, [fp]
 8008cee:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008cf2:	d111      	bne.n	8008d18 <__ieee754_sqrt+0x178>
 8008cf4:	4655      	mov	r5, sl
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	1072      	asrs	r2, r6, #1
 8008cfa:	086b      	lsrs	r3, r5, #1
 8008cfc:	07f1      	lsls	r1, r6, #31
 8008cfe:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008d02:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008d06:	bf48      	it	mi
 8008d08:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008d12:	e757      	b.n	8008bc4 <__ieee754_sqrt+0x24>
 8008d14:	4696      	mov	lr, r2
 8008d16:	e7be      	b.n	8008c96 <__ieee754_sqrt+0xf6>
 8008d18:	f7f7 fa38 	bl	800018c <__adddf3>
 8008d1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fe58 	bl	80009dc <__aeabi_dcmplt>
 8008d2c:	b120      	cbz	r0, 8008d38 <__ieee754_sqrt+0x198>
 8008d2e:	1ca8      	adds	r0, r5, #2
 8008d30:	bf08      	it	eq
 8008d32:	3601      	addeq	r6, #1
 8008d34:	3502      	adds	r5, #2
 8008d36:	e7df      	b.n	8008cf8 <__ieee754_sqrt+0x158>
 8008d38:	1c6b      	adds	r3, r5, #1
 8008d3a:	f023 0501 	bic.w	r5, r3, #1
 8008d3e:	e7db      	b.n	8008cf8 <__ieee754_sqrt+0x158>
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	200001d8 	.word	0x200001d8
 8008d48:	200001d0 	.word	0x200001d0

08008d4c <round>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008d52:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008d56:	2a13      	cmp	r2, #19
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	dc1a      	bgt.n	8008d96 <round+0x4a>
 8008d60:	2a00      	cmp	r2, #0
 8008d62:	da0b      	bge.n	8008d7c <round+0x30>
 8008d64:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008d68:	3201      	adds	r2, #1
 8008d6a:	bf04      	itt	eq
 8008d6c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d70:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008d74:	2200      	movs	r2, #0
 8008d76:	461d      	mov	r5, r3
 8008d78:	4614      	mov	r4, r2
 8008d7a:	e016      	b.n	8008daa <round+0x5e>
 8008d7c:	4815      	ldr	r0, [pc, #84]	@ (8008dd4 <round+0x88>)
 8008d7e:	4110      	asrs	r0, r2
 8008d80:	4001      	ands	r1, r0
 8008d82:	4321      	orrs	r1, r4
 8008d84:	d011      	beq.n	8008daa <round+0x5e>
 8008d86:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008d8a:	fa41 f202 	asr.w	r2, r1, r2
 8008d8e:	4413      	add	r3, r2
 8008d90:	ea23 0300 	bic.w	r3, r3, r0
 8008d94:	e7ee      	b.n	8008d74 <round+0x28>
 8008d96:	2a33      	cmp	r2, #51	@ 0x33
 8008d98:	dd0a      	ble.n	8008db0 <round+0x64>
 8008d9a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008d9e:	d104      	bne.n	8008daa <round+0x5e>
 8008da0:	4602      	mov	r2, r0
 8008da2:	f7f7 f9f3 	bl	800018c <__adddf3>
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295
 8008db4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008db8:	40f8      	lsrs	r0, r7
 8008dba:	4220      	tst	r0, r4
 8008dbc:	d0f5      	beq.n	8008daa <round+0x5e>
 8008dbe:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	408a      	lsls	r2, r1
 8008dc6:	1912      	adds	r2, r2, r4
 8008dc8:	bf28      	it	cs
 8008dca:	3301      	addcs	r3, #1
 8008dcc:	ea22 0200 	bic.w	r2, r2, r0
 8008dd0:	e7d1      	b.n	8008d76 <round+0x2a>
 8008dd2:	bf00      	nop
 8008dd4:	000fffff 	.word	0x000fffff

08008dd8 <_init>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr

08008de4 <_fini>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr
